   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"usb_descriptor.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	usb_desc_ep
  21              		.section	.rodata.usb_desc_ep,"a",%progbits
  22              		.align	2
  25              	usb_desc_ep:
  26 0000 03       		.byte	3
  27 0001 01       		.byte	1
  28 0002 02       		.byte	2
  29 0003 01       		.byte	1
  30 0004 1000     		.2byte	16
  31 0006 02       		.byte	2
  32 0007 02       		.byte	2
  33 0008 00       		.byte	0
  34 0009 1000     		.2byte	16
  35 000b 03       		.byte	3
  36 000c 03       		.byte	3
  37 000d 01       		.byte	1
  38 000e 1000     		.2byte	16
  39              		.global	g_device_descriptor
  40              		.section	.data.g_device_descriptor,"aw",%progbits
  41              		.align	2
  44              	g_device_descriptor:
  45 0000 12       		.byte	18
  46 0001 01       		.byte	1
  47 0002 00       		.byte	0
  48 0003 02       		.byte	2
  49 0004 02       		.byte	2
  50 0005 02       		.byte	2
  51 0006 00       		.byte	0
  52 0007 10       		.byte	16
  53 0008 04       		.byte	4
  54 0009 25       		.byte	37
  55 000a 00       		.byte	0
  56 000b 03       		.byte	3
  57 000c 02       		.byte	2
  58 000d 00       		.byte	0
  59 000e 01       		.byte	1
  60 000f 02       		.byte	2
  61 0010 03       		.byte	3
  62 0011 01       		.byte	1
  63              		.global	g_config_descriptor
  64 0012 0000     		.section	.data.g_config_descriptor,"aw",%progbits
  65              		.align	2
  68              	g_config_descriptor:
  69 0000 09       		.byte	9
  70 0001 02       		.byte	2
  71 0002 43       		.byte	67
  72 0003 00       		.byte	0
  73 0004 02       		.byte	2
  74 0005 01       		.byte	1
  75 0006 00       		.byte	0
  76 0007 C0       		.byte	-64
  77 0008 32       		.byte	50
  78 0009 09       		.byte	9
  79 000a 04       		.byte	4
  80 000b 00       		.byte	0
  81 000c 00       		.byte	0
  82 000d 01       		.byte	1
  83 000e 02       		.byte	2
  84 000f 02       		.byte	2
  85 0010 00       		.byte	0
  86 0011 00       		.byte	0
  87 0012 05       		.byte	5
  88 0013 24       		.byte	36
  89 0014 00       		.byte	0
  90 0015 10       		.byte	16
  91 0016 01       		.byte	1
  92 0017 05       		.byte	5
  93 0018 24       		.byte	36
  94 0019 01       		.byte	1
  95 001a 01       		.byte	1
  96 001b 01       		.byte	1
  97 001c 04       		.byte	4
  98 001d 24       		.byte	36
  99 001e 02       		.byte	2
 100 001f 06       		.byte	6
 101 0020 05       		.byte	5
 102 0021 24       		.byte	36
 103 0022 06       		.byte	6
 104 0023 00       		.byte	0
 105 0024 01       		.byte	1
 106 0025 07       		.byte	7
 107 0026 05       		.byte	5
 108 0027 83       		.byte	-125
 109 0028 03       		.byte	3
 110 0029 10       		.byte	16
 111 002a 00       		.byte	0
 112 002b 0A       		.byte	10
 113 002c 09       		.byte	9
 114 002d 04       		.byte	4
 115 002e 01       		.byte	1
 116 002f 00       		.byte	0
 117 0030 02       		.byte	2
 118 0031 0A       		.byte	10
 119 0032 00       		.byte	0
 120 0033 00       		.byte	0
 121 0034 00       		.byte	0
 122 0035 07       		.byte	7
 123 0036 05       		.byte	5
 124 0037 81       		.byte	-127
 125 0038 02       		.byte	2
 126 0039 10       		.byte	16
 127 003a 00       		.byte	0
 128 003b 00       		.byte	0
 129 003c 07       		.byte	7
 130 003d 05       		.byte	5
 131 003e 02       		.byte	2
 132 003f 02       		.byte	2
 133 0040 10       		.byte	16
 134 0041 00       		.byte	0
 135 0042 00       		.byte	0
 136              		.global	USB_STR_0
 137 0043 00       		.section	.data.USB_STR_0,"aw",%progbits
 138              		.align	2
 141              	USB_STR_0:
 142 0000 04       		.byte	4
 143 0001 03       		.byte	3
 144 0002 09       		.byte	9
 145 0003 04       		.byte	4
 146              		.global	USB_STR_1
 147              		.section	.data.USB_STR_1,"aw",%progbits
 148              		.align	2
 151              	USB_STR_1:
 152 0000 1E       		.byte	30
 153 0001 03       		.byte	3
 154 0002 46       		.byte	70
 155 0003 00       		.byte	0
 156 0004 52       		.byte	82
 157 0005 00       		.byte	0
 158 0006 45       		.byte	69
 159 0007 00       		.byte	0
 160 0008 45       		.byte	69
 161 0009 00       		.byte	0
 162 000a 53       		.byte	83
 163 000b 00       		.byte	0
 164 000c 43       		.byte	67
 165 000d 00       		.byte	0
 166 000e 41       		.byte	65
 167 000f 00       		.byte	0
 168 0010 4C       		.byte	76
 169 0011 00       		.byte	0
 170 0012 45       		.byte	69
 171 0013 00       		.byte	0
 172 0014 20       		.byte	32
 173 0015 00       		.byte	0
 174 0016 49       		.byte	73
 175 0017 00       		.byte	0
 176 0018 4E       		.byte	78
 177 0019 00       		.byte	0
 178 001a 43       		.byte	67
 179 001b 00       		.byte	0
 180 001c 2E       		.byte	46
 181 001d 00       		.byte	0
 182              		.global	USB_STR_2
 183 001e 0000     		.section	.data.USB_STR_2,"aw",%progbits
 184              		.align	2
 187              	USB_STR_2:
 188 0000 1E       		.byte	30
 189 0001 03       		.byte	3
 190 0002 46       		.byte	70
 191 0003 00       		.byte	0
 192 0004 53       		.byte	83
 193 0005 00       		.byte	0
 194 0006 4C       		.byte	76
 195 0007 00       		.byte	0
 196 0008 20       		.byte	32
 197 0009 00       		.byte	0
 198 000a 43       		.byte	67
 199 000b 00       		.byte	0
 200 000c 44       		.byte	68
 201 000d 00       		.byte	0
 202 000e 43       		.byte	67
 203 000f 00       		.byte	0
 204 0010 20       		.byte	32
 205 0011 00       		.byte	0
 206 0012 44       		.byte	68
 207 0013 00       		.byte	0
 208 0014 45       		.byte	69
 209 0015 00       		.byte	0
 210 0016 56       		.byte	86
 211 0017 00       		.byte	0
 212 0018 49       		.byte	73
 213 0019 00       		.byte	0
 214 001a 43       		.byte	67
 215 001b 00       		.byte	0
 216 001c 45       		.byte	69
 217 001d 00       		.byte	0
 218              		.global	USB_STR_3
 219 001e 0000     		.section	.data.USB_STR_3,"aw",%progbits
 220              		.align	2
 223              	USB_STR_3:
 224 0000 14       		.byte	20
 225 0001 03       		.byte	3
 226 0002 30       		.byte	48
 227 0003 00       		.byte	0
 228 0004 30       		.byte	48
 229 0005 00       		.byte	0
 230 0006 30       		.byte	48
 231 0007 00       		.byte	0
 232 0008 31       		.byte	49
 233 0009 00       		.byte	0
 234 000a 32       		.byte	50
 235 000b 00       		.byte	0
 236 000c 33       		.byte	51
 237 000d 00       		.byte	0
 238 000e 41       		.byte	65
 239 000f 00       		.byte	0
 240 0010 42       		.byte	66
 241 0011 00       		.byte	0
 242 0012 43       		.byte	67
 243 0013 00       		.byte	0
 244              		.global	USB_STR_n
 245              		.section	.data.USB_STR_n,"aw",%progbits
 246              		.align	2
 249              	USB_STR_n:
 250 0000 22       		.byte	34
 251 0001 03       		.byte	3
 252 0002 42       		.byte	66
 253 0003 00       		.byte	0
 254 0004 41       		.byte	65
 255 0005 00       		.byte	0
 256 0006 44       		.byte	68
 257 0007 00       		.byte	0
 258 0008 20       		.byte	32
 259 0009 00       		.byte	0
 260 000a 53       		.byte	83
 261 000b 00       		.byte	0
 262 000c 54       		.byte	84
 263 000d 00       		.byte	0
 264 000e 52       		.byte	82
 265 000f 00       		.byte	0
 266 0010 49       		.byte	73
 267 0011 00       		.byte	0
 268 0012 4E       		.byte	78
 269 0013 00       		.byte	0
 270 0014 47       		.byte	71
 271 0015 00       		.byte	0
 272 0016 20       		.byte	32
 273 0017 00       		.byte	0
 274 0018 49       		.byte	73
 275 0019 00       		.byte	0
 276 001a 4E       		.byte	78
 277 001b 00       		.byte	0
 278 001c 44       		.byte	68
 279 001d 00       		.byte	0
 280 001e 45       		.byte	69
 281 001f 00       		.byte	0
 282 0020 58       		.byte	88
 283 0021 00       		.byte	0
 284              		.global	g_std_desc_size
 285 0022 0000     		.section	.rodata.g_std_desc_size,"a",%progbits
 286              		.align	2
 289              	g_std_desc_size:
 290 0000 0000     		.short	0
 291 0002 1200     		.short	18
 292 0004 4300     		.short	67
 293 0006 0000     		.short	0
 294 0008 0000     		.short	0
 295 000a 0000     		.short	0
 296 000c 0000     		.short	0
 297 000e 0000     		.short	0
 298              		.global	g_std_descriptors
 299              		.section	.rodata.g_std_descriptors,"a",%progbits
 300              		.align	2
 303              	g_std_descriptors:
 304 0000 00000000 		.word	0
 305 0004 00000000 		.word	g_device_descriptor
 306 0008 00000000 		.word	g_config_descriptor
 307 000c 00000000 		.word	0
 308 0010 00000000 		.word	0
 309 0014 00000000 		.word	0
 310 0018 00000000 		.word	0
 311 001c 00000000 		.word	0
 312              		.global	g_string_desc_size
 313              		.section	.rodata.g_string_desc_size,"a",%progbits
 314              		.align	2
 317              	g_string_desc_size:
 318 0000 04       		.byte	4
 319 0001 1E       		.byte	30
 320 0002 1E       		.byte	30
 321 0003 14       		.byte	20
 322 0004 22       		.byte	34
 323              		.global	g_string_descriptors
 324 0005 000000   		.section	.rodata.g_string_descriptors,"a",%progbits
 325              		.align	2
 328              	g_string_descriptors:
 329 0000 00000000 		.word	USB_STR_0
 330 0004 00000000 		.word	USB_STR_1
 331 0008 00000000 		.word	USB_STR_2
 332 000c 00000000 		.word	USB_STR_3
 333 0010 00000000 		.word	USB_STR_n
 334              		.global	g_languages
 335              		.section	.rodata.g_languages,"a",%progbits
 336              		.align	2
 339              	g_languages:
 340 0000 00000000 		.word	USB_STR_0
 341 0004 04       		.byte	4
 342 0005 000000   		.space	3
 343 0008 0904     		.short	1033
 344 000a 0000     		.space	2
 345 000c 00000000 		.word	g_string_descriptors
 346 0010 00000000 		.word	g_string_desc_size
 347 0014 00000000 		.space	12
 347      00000000 
 347      00000000 
 348              		.global	g_valid_config_values
 349              		.section	.rodata.g_valid_config_values,"a",%progbits
 350              		.align	2
 353              	g_valid_config_values:
 354 0000 00       		.byte	0
 355 0001 01       		.byte	1
 356 0002 0000     		.section	.data.g_line_coding,"aw",%progbits
 357              		.align	2
 360              	g_line_coding:
 361 0000 00       		.byte	0
 362 0001 C2       		.byte	-62
 363 0002 01       		.byte	1
 364 0003 00       		.byte	0
 365 0004 00       		.byte	0
 366 0005 00       		.byte	0
 367 0006 08       		.byte	8
 368 0007 00000000 		.space	7
 368      000000
 369 000e 0000     		.section	.bss.g_abstract_state,"aw",%nobits
 370              		.align	2
 373              	g_abstract_state:
 374 0000 00000000 		.space	4
 375              		.section	.bss.g_country_code,"aw",%nobits
 376              		.align	2
 379              	g_country_code:
 380 0000 00000000 		.space	4
 381              		.section	.bss.g_alternate_interface,"aw",%nobits
 382              		.align	2
 385              	g_alternate_interface:
 386 0000 0000     		.space	2
 387 0002 0000     		.section	.text.USB_Desc_Get_Descriptor,"ax",%progbits
 388              		.align	2
 389              		.global	USB_Desc_Get_Descriptor
 390              		.thumb
 391              		.thumb_func
 393              	USB_Desc_Get_Descriptor:
 394              	.LFB0:
 395              		.file 1 "../Generated_Code/usb_descriptor.c"
   1:../Generated_Code/usb_descriptor.c **** /******************************************************************************
   2:../Generated_Code/usb_descriptor.c ****  *
   3:../Generated_Code/usb_descriptor.c ****  * Freescale Semiconductor Inc.
   4:../Generated_Code/usb_descriptor.c ****  * (c) Copyright 2004-2009 Freescale Semiconductor, Inc.
   5:../Generated_Code/usb_descriptor.c ****  * ALL RIGHTS RESERVED.
   6:../Generated_Code/usb_descriptor.c ****  *
   7:../Generated_Code/usb_descriptor.c ****  **************************************************************************//*!
   8:../Generated_Code/usb_descriptor.c ****  *
   9:../Generated_Code/usb_descriptor.c ****  * @file usb_descriptor.c
  10:../Generated_Code/usb_descriptor.c ****  *
  11:../Generated_Code/usb_descriptor.c ****  * @author
  12:../Generated_Code/usb_descriptor.c ****  *
  13:../Generated_Code/usb_descriptor.c ****  * @version
  14:../Generated_Code/usb_descriptor.c ****  *
  15:../Generated_Code/usb_descriptor.c ****  * @date May-28-2009
  16:../Generated_Code/usb_descriptor.c ****  *
  17:../Generated_Code/usb_descriptor.c ****  * @brief This file contains USB descriptors for Virtual COM Loopback
  18:../Generated_Code/usb_descriptor.c ****  *        Application
  19:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
  20:../Generated_Code/usb_descriptor.c **** 
  21:../Generated_Code/usb_descriptor.c **** /******************************************************************************
  22:../Generated_Code/usb_descriptor.c ****  * Includes
  23:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
  24:../Generated_Code/usb_descriptor.c **** #include "derivative.h"
  25:../Generated_Code/usb_descriptor.c **** #include "types.h"
  26:../Generated_Code/usb_descriptor.c **** #include "usb_class.h"
  27:../Generated_Code/usb_descriptor.c **** #include "usb_descriptor.h"
  28:../Generated_Code/usb_descriptor.c **** 
  29:../Generated_Code/usb_descriptor.c **** #if (defined __MCF52xxx_H__)||(defined __MK_xxx_H__)
  30:../Generated_Code/usb_descriptor.c **** /* Put CFV2 descriptors in RAM */
  31:../Generated_Code/usb_descriptor.c **** #define USB_DESC_CONST
  32:../Generated_Code/usb_descriptor.c **** #else
  33:../Generated_Code/usb_descriptor.c **** #define USB_DESC_CONST	const
  34:../Generated_Code/usb_descriptor.c **** #endif
  35:../Generated_Code/usb_descriptor.c **** 
  36:../Generated_Code/usb_descriptor.c **** /*****************************************************************************
  37:../Generated_Code/usb_descriptor.c ****  * Constant and Macro's
  38:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
  39:../Generated_Code/usb_descriptor.c **** /* structure containing details of all the endpoints used by this device */
  40:../Generated_Code/usb_descriptor.c **** USB_DESC_CONST USB_ENDPOINTS usb_desc_ep =
  41:../Generated_Code/usb_descriptor.c **** {
  42:../Generated_Code/usb_descriptor.c ****     CDC_DESC_ENDPOINT_COUNT,
  43:../Generated_Code/usb_descriptor.c ****     {
  44:../Generated_Code/usb_descriptor.c ****         #if DATA_CLASS_SUPPORT
  45:../Generated_Code/usb_descriptor.c ****             #if DIC_ISOCHRONOUS_SETTING
  46:../Generated_Code/usb_descriptor.c ****             {
  47:../Generated_Code/usb_descriptor.c ****                 DIC_ISO_IN_ENDPOINT,
  48:../Generated_Code/usb_descriptor.c ****                 USB_ISOCHRONOUS_PIPE,
  49:../Generated_Code/usb_descriptor.c ****                 USB_SEND,
  50:../Generated_Code/usb_descriptor.c ****                 DIC_ISO_IN_ENDP_PACKET_SIZE
  51:../Generated_Code/usb_descriptor.c ****             },
  52:../Generated_Code/usb_descriptor.c ****             {
  53:../Generated_Code/usb_descriptor.c ****                 DIC_ISO_OUT_ENDPOINT,
  54:../Generated_Code/usb_descriptor.c ****                 USB_ISOCHRONOUS_PIPE,
  55:../Generated_Code/usb_descriptor.c ****                 USB_RECV,
  56:../Generated_Code/usb_descriptor.c ****                 DIC_ISO_OUT_ENDP_PACKET_SIZE
  57:../Generated_Code/usb_descriptor.c ****             }
  58:../Generated_Code/usb_descriptor.c ****             #else
  59:../Generated_Code/usb_descriptor.c ****             {
  60:../Generated_Code/usb_descriptor.c ****                 DIC_BULK_IN_ENDPOINT,
  61:../Generated_Code/usb_descriptor.c ****                 USB_BULK_PIPE,
  62:../Generated_Code/usb_descriptor.c ****                 USB_SEND,
  63:../Generated_Code/usb_descriptor.c ****                 DIC_BULK_IN_ENDP_PACKET_SIZE
  64:../Generated_Code/usb_descriptor.c ****             },
  65:../Generated_Code/usb_descriptor.c ****             {
  66:../Generated_Code/usb_descriptor.c ****                 DIC_BULK_OUT_ENDPOINT,
  67:../Generated_Code/usb_descriptor.c ****                 USB_BULK_PIPE,
  68:../Generated_Code/usb_descriptor.c ****                 USB_RECV,
  69:../Generated_Code/usb_descriptor.c ****                 DIC_BULK_OUT_ENDP_PACKET_SIZE
  70:../Generated_Code/usb_descriptor.c ****             }
  71:../Generated_Code/usb_descriptor.c ****             #endif
  72:../Generated_Code/usb_descriptor.c ****         #endif
  73:../Generated_Code/usb_descriptor.c ****         #if CIC_NOTIF_ELEM_SUPPORT
  74:../Generated_Code/usb_descriptor.c ****         ,
  75:../Generated_Code/usb_descriptor.c ****         {
  76:../Generated_Code/usb_descriptor.c ****             CIC_NOTIF_ENDPOINT,
  77:../Generated_Code/usb_descriptor.c ****             USB_INTERRUPT_PIPE,
  78:../Generated_Code/usb_descriptor.c ****             USB_SEND,
  79:../Generated_Code/usb_descriptor.c ****             CIC_NOTIF_ENDP_PACKET_SIZE
  80:../Generated_Code/usb_descriptor.c ****         }
  81:../Generated_Code/usb_descriptor.c ****         #endif
  82:../Generated_Code/usb_descriptor.c **** 
  83:../Generated_Code/usb_descriptor.c ****     }
  84:../Generated_Code/usb_descriptor.c **** };
  85:../Generated_Code/usb_descriptor.c **** 
  86:../Generated_Code/usb_descriptor.c **** uint_8 USB_DESC_CONST g_device_descriptor[DEVICE_DESCRIPTOR_SIZE] =
  87:../Generated_Code/usb_descriptor.c **** {
  88:../Generated_Code/usb_descriptor.c ****    DEVICE_DESCRIPTOR_SIZE,               /*  Device Descriptor Size         */
  89:../Generated_Code/usb_descriptor.c ****    USB_DEVICE_DESCRIPTOR,                /*  Device Type of descriptor      */
  90:../Generated_Code/usb_descriptor.c ****    0x00, 0x02,                           /*  BCD USB version                */
  91:../Generated_Code/usb_descriptor.c ****    0x02,                                 /*  Device Class is indicated in
  92:../Generated_Code/usb_descriptor.c ****                                              the interface descriptors      */
  93:../Generated_Code/usb_descriptor.c ****    0x02,                                 /*  Device Subclass is indicated
  94:../Generated_Code/usb_descriptor.c ****                                              in the interface descriptors   */
  95:../Generated_Code/usb_descriptor.c ****    0x00,                                 /*  Device Protocol                */
  96:../Generated_Code/usb_descriptor.c ****    CONTROL_MAX_PACKET_SIZE,              /*  Max Packet size                */
  97:../Generated_Code/usb_descriptor.c **** #if 0 /* << EST */
  98:../Generated_Code/usb_descriptor.c ****    0xA2,0x15,                            /*  Vendor ID                      */
  99:../Generated_Code/usb_descriptor.c ****    0x00,0x03,                            /*  0300 is our Product ID for CDC */
 100:../Generated_Code/usb_descriptor.c **** #else
 101:../Generated_Code/usb_descriptor.c ****    (0x2504&0xFF),((0x2504>>8)&0xFF),     /*  Vendor ID from properties      */
 102:../Generated_Code/usb_descriptor.c ****    (0x0300&0xFF),((0x0300>>8)&0xFF),     /*  Product ID from properties     */
 103:../Generated_Code/usb_descriptor.c **** #endif
 104:../Generated_Code/usb_descriptor.c ****    0x02,0x00,                            /*  BCD Device version             */
 105:../Generated_Code/usb_descriptor.c ****    0x01,                                 /*  Manufacturer string index      */
 106:../Generated_Code/usb_descriptor.c ****    0x02,                                 /*  Product string index           */
 107:../Generated_Code/usb_descriptor.c ****    0x03,                                 /*  Serial number string index     */
 108:../Generated_Code/usb_descriptor.c ****    0x01                                  /*  Number of configurations       */
 109:../Generated_Code/usb_descriptor.c **** };
 110:../Generated_Code/usb_descriptor.c **** 
 111:../Generated_Code/usb_descriptor.c **** uint_8 USB_DESC_CONST g_config_descriptor[CONFIG_DESC_SIZE] =
 112:../Generated_Code/usb_descriptor.c **** {
 113:../Generated_Code/usb_descriptor.c ****     CONFIG_ONLY_DESC_SIZE,  /*  Configuration Descriptor Size */
 114:../Generated_Code/usb_descriptor.c ****     USB_CONFIG_DESCRIPTOR,  /* "Configuration" type of descriptor */
 115:../Generated_Code/usb_descriptor.c ****     CONFIG_DESC_SIZE, 0x00, /*  Total length of the Configuration descriptor */
 116:../Generated_Code/usb_descriptor.c ****     (uint_8)(1+DATA_CLASS_SUPPORT),/*NumInterfaces*/
 117:../Generated_Code/usb_descriptor.c ****     0x01,                      /*  Configuration Value */
 118:../Generated_Code/usb_descriptor.c ****     0x00,                      /*  Configuration Description String Index*/
 119:../Generated_Code/usb_descriptor.c **** #if 0
 120:../Generated_Code/usb_descriptor.c ****     BUS_POWERED|SELF_POWERED|(REMOTE_WAKEUP_SUPPORT<<REMOTE_WAKEUP_SHIFT),
 121:../Generated_Code/usb_descriptor.c **** #else /* << EST: use settings from component */
 122:../Generated_Code/usb_descriptor.c ****     BUS_POWERED |
 123:../Generated_Code/usb_descriptor.c ****     SELF_POWERED |
 124:../Generated_Code/usb_descriptor.c ****     (REMOTE_WAKEUP_SUPPORT<<REMOTE_WAKEUP_SHIFT),
 125:../Generated_Code/usb_descriptor.c **** #endif
 126:../Generated_Code/usb_descriptor.c ****               /*  Attributes.support RemoteWakeup and self power*/
 127:../Generated_Code/usb_descriptor.c ****     (100>>1), /*  Current draw from bus, e.g. is in 2 mA units */
 128:../Generated_Code/usb_descriptor.c **** 
 129:../Generated_Code/usb_descriptor.c ****     /* CIC INTERFACE DESCRIPTOR */
 130:../Generated_Code/usb_descriptor.c ****     IFACE_ONLY_DESC_SIZE,
 131:../Generated_Code/usb_descriptor.c ****     USB_IFACE_DESCRIPTOR,
 132:../Generated_Code/usb_descriptor.c ****     0x00, /* bInterfaceNumber */
 133:../Generated_Code/usb_descriptor.c ****     0x00, /* bAlternateSetting */
 134:../Generated_Code/usb_descriptor.c ****     CIC_ENDP_COUNT, /* management and notification(optional)element present */
 135:../Generated_Code/usb_descriptor.c ****     0x02, /* Communication Interface Class */
 136:../Generated_Code/usb_descriptor.c ****     CIC_SUBCLASS_CODE,
 137:../Generated_Code/usb_descriptor.c ****     CIC_PROTOCOL_CODE,
 138:../Generated_Code/usb_descriptor.c ****     0x00, /* Interface Description String Index*/
 139:../Generated_Code/usb_descriptor.c **** 
 140:../Generated_Code/usb_descriptor.c ****     /* CDC Class-Specific descriptor */
 141:../Generated_Code/usb_descriptor.c ****     0x05,             /* size of Functional Desc in bytes */
 142:../Generated_Code/usb_descriptor.c ****     USB_CS_INTERFACE,  /* descriptor type*/
 143:../Generated_Code/usb_descriptor.c ****     HEADER_FUNC_DESC,
 144:../Generated_Code/usb_descriptor.c ****     0x10, 0x01,  /* USB Class Definitions for CDC spec release number in BCD */
 145:../Generated_Code/usb_descriptor.c **** 
 146:../Generated_Code/usb_descriptor.c ****     0x05,             /* Size of this descriptor */
 147:../Generated_Code/usb_descriptor.c ****     USB_CS_INTERFACE, /* descriptor type*/
 148:../Generated_Code/usb_descriptor.c ****     CALL_MANAGEMENT_FUNC_DESC,
 149:../Generated_Code/usb_descriptor.c ****     0x01,/*may use 0x03 */  /* device handales call management itself(D0 set)
 150:../Generated_Code/usb_descriptor.c ****               and will process commands multiplexed over the data interface */
 151:../Generated_Code/usb_descriptor.c ****     0x01,      /* Indicates multiplexed commands are
 152:../Generated_Code/usb_descriptor.c ****                 handled via data interface */
 153:../Generated_Code/usb_descriptor.c **** 
 154:../Generated_Code/usb_descriptor.c ****     0x04,             /* Size of this descriptor */
 155:../Generated_Code/usb_descriptor.c ****     USB_CS_INTERFACE, /* descriptor type*/
 156:../Generated_Code/usb_descriptor.c ****     ABSTRACT_CONTROL_FUNC_DESC,
 157:../Generated_Code/usb_descriptor.c ****     0x06, /*may use 0x0F */ /* Device Supports all commands for ACM - CDC
 158:../Generated_Code/usb_descriptor.c ****                               PSTN SubClass bmCapabilities */
 159:../Generated_Code/usb_descriptor.c **** 
 160:../Generated_Code/usb_descriptor.c ****     0x05,             /* size of Functional Desc in bytes */
 161:../Generated_Code/usb_descriptor.c ****     USB_CS_INTERFACE,  /* descriptor type*/
 162:../Generated_Code/usb_descriptor.c ****     UNION_FUNC_DESC,
 163:../Generated_Code/usb_descriptor.c ****     0x00,           /* Interface Number of Control */
 164:../Generated_Code/usb_descriptor.c ****     0x01            /* Interface Number of Subordinate (Data Class) Interface */
 165:../Generated_Code/usb_descriptor.c **** 
 166:../Generated_Code/usb_descriptor.c **** #if CIC_NOTIF_ELEM_SUPPORT    /*Endpoint descriptor */
 167:../Generated_Code/usb_descriptor.c ****     , /* Comma Added if NOTIF ELEM IS TO BE ADDED */
 168:../Generated_Code/usb_descriptor.c ****     ENDP_ONLY_DESC_SIZE,
 169:../Generated_Code/usb_descriptor.c ****     USB_ENDPOINT_DESCRIPTOR,
 170:../Generated_Code/usb_descriptor.c ****     CIC_NOTIF_ENDPOINT|(USB_SEND << 7),
 171:../Generated_Code/usb_descriptor.c ****     USB_INTERRUPT_PIPE,
 172:../Generated_Code/usb_descriptor.c ****     CIC_NOTIF_ENDP_PACKET_SIZE, 0x00,
 173:../Generated_Code/usb_descriptor.c ****     0x0A
 174:../Generated_Code/usb_descriptor.c **** #endif
 175:../Generated_Code/usb_descriptor.c **** 
 176:../Generated_Code/usb_descriptor.c **** #if DATA_CLASS_SUPPORT
 177:../Generated_Code/usb_descriptor.c ****         , /* Comma Added if DATA_CLASS_DESC IS TO BE ADDED */
 178:../Generated_Code/usb_descriptor.c ****         IFACE_ONLY_DESC_SIZE,
 179:../Generated_Code/usb_descriptor.c ****         USB_IFACE_DESCRIPTOR,
 180:../Generated_Code/usb_descriptor.c ****         (uint_8)(0x00+DATA_CLASS_SUPPORT), /* bInterfaceNumber */
 181:../Generated_Code/usb_descriptor.c ****         0x00, /* bAlternateSetting */
 182:../Generated_Code/usb_descriptor.c ****         DIC_ENDP_COUNT, /* notification element included */
 183:../Generated_Code/usb_descriptor.c ****         0x0A, /* DATA Interface Class */
 184:../Generated_Code/usb_descriptor.c ****         0x00, /* Data Interface SubClass Code */
 185:../Generated_Code/usb_descriptor.c ****         DIC_PROTOCOL_CODE,
 186:../Generated_Code/usb_descriptor.c ****         0x00, /* Interface Description String Index*/
 187:../Generated_Code/usb_descriptor.c **** 
 188:../Generated_Code/usb_descriptor.c ****     #if ! DIC_ISOCHRONOUS_SETTING
 189:../Generated_Code/usb_descriptor.c ****         /*Endpoint descriptor */
 190:../Generated_Code/usb_descriptor.c ****         ENDP_ONLY_DESC_SIZE,
 191:../Generated_Code/usb_descriptor.c ****         USB_ENDPOINT_DESCRIPTOR,
 192:../Generated_Code/usb_descriptor.c ****         DIC_BULK_IN_ENDPOINT|(USB_SEND << 7),
 193:../Generated_Code/usb_descriptor.c ****         USB_BULK_PIPE,
 194:../Generated_Code/usb_descriptor.c ****         DIC_BULK_IN_ENDP_PACKET_SIZE, 0x00,
 195:../Generated_Code/usb_descriptor.c ****         0x00,/* This value is ignored for Bulk ENDPOINT */
 196:../Generated_Code/usb_descriptor.c **** 
 197:../Generated_Code/usb_descriptor.c ****         /*Endpoint descriptor */
 198:../Generated_Code/usb_descriptor.c ****         ENDP_ONLY_DESC_SIZE,
 199:../Generated_Code/usb_descriptor.c ****         USB_ENDPOINT_DESCRIPTOR,
 200:../Generated_Code/usb_descriptor.c ****         DIC_BULK_OUT_ENDPOINT|(USB_RECV << 7),
 201:../Generated_Code/usb_descriptor.c ****         USB_BULK_PIPE,
 202:../Generated_Code/usb_descriptor.c ****         DIC_BULK_OUT_ENDP_PACKET_SIZE, 0x00,
 203:../Generated_Code/usb_descriptor.c ****         0x00 /* This value is ignored for Bulk ENDPOINT */
 204:../Generated_Code/usb_descriptor.c ****     #else
 205:../Generated_Code/usb_descriptor.c ****         /*Endpoint descriptor */
 206:../Generated_Code/usb_descriptor.c ****         ENDP_ONLY_DESC_SIZE,
 207:../Generated_Code/usb_descriptor.c ****         USB_ENDPOINT_DESCRIPTOR,
 208:../Generated_Code/usb_descriptor.c ****         DIC_ISO_IN_ENDPOINT|(USB_SEND << 7),
 209:../Generated_Code/usb_descriptor.c ****         USB_ISOCHRONOUS_PIPE,
 210:../Generated_Code/usb_descriptor.c ****         DIC_ISO_IN_ENDP_PACKET_SIZE, 0x00,
 211:../Generated_Code/usb_descriptor.c ****         0x01,/* This value is for Iso ENDPOINT */
 212:../Generated_Code/usb_descriptor.c **** 
 213:../Generated_Code/usb_descriptor.c ****         /*Endpoint descriptor */
 214:../Generated_Code/usb_descriptor.c ****         ENDP_ONLY_DESC_SIZE,
 215:../Generated_Code/usb_descriptor.c ****         USB_ENDPOINT_DESCRIPTOR,
 216:../Generated_Code/usb_descriptor.c ****         DIC_ISO_OUT_ENDPOINT|(USB_RECV << 7),
 217:../Generated_Code/usb_descriptor.c ****         USB_ISOCHRONOUS_PIPE,
 218:../Generated_Code/usb_descriptor.c ****         DIC_ISO_OUT_ENDP_PACKET_SIZE, 0x00,
 219:../Generated_Code/usb_descriptor.c ****         0x01 /* This value is for Iso ENDPOINT */
 220:../Generated_Code/usb_descriptor.c ****     #endif
 221:../Generated_Code/usb_descriptor.c **** #endif
 222:../Generated_Code/usb_descriptor.c **** };
 223:../Generated_Code/usb_descriptor.c **** 
 224:../Generated_Code/usb_descriptor.c **** uint_8 USB_DESC_CONST USB_STR_0[USB_STR_0_SIZE+USB_STR_DESC_SIZE] =
 225:../Generated_Code/usb_descriptor.c ****                                     {sizeof(USB_STR_0),
 226:../Generated_Code/usb_descriptor.c ****                                      USB_STRING_DESCRIPTOR,
 227:../Generated_Code/usb_descriptor.c ****                                       0x09,
 228:../Generated_Code/usb_descriptor.c ****                                       0x04/*equiavlent to 0x0409*/
 229:../Generated_Code/usb_descriptor.c ****                                     };
 230:../Generated_Code/usb_descriptor.c **** 
 231:../Generated_Code/usb_descriptor.c **** uint_8 USB_DESC_CONST USB_STR_1[USB_STR_1_SIZE+USB_STR_DESC_SIZE]
 232:../Generated_Code/usb_descriptor.c ****                           = {  sizeof(USB_STR_1),
 233:../Generated_Code/usb_descriptor.c ****                                USB_STRING_DESCRIPTOR,
 234:../Generated_Code/usb_descriptor.c **** #if 0 /* << EST */
 235:../Generated_Code/usb_descriptor.c ****                                'F',0,
 236:../Generated_Code/usb_descriptor.c ****                                'R',0,
 237:../Generated_Code/usb_descriptor.c ****                                'E',0,
 238:../Generated_Code/usb_descriptor.c ****                                'E',0,
 239:../Generated_Code/usb_descriptor.c ****                                'S',0,
 240:../Generated_Code/usb_descriptor.c ****                                'C',0,
 241:../Generated_Code/usb_descriptor.c ****                                'A',0,
 242:../Generated_Code/usb_descriptor.c ****                                'L',0,
 243:../Generated_Code/usb_descriptor.c ****                                'E',0,
 244:../Generated_Code/usb_descriptor.c ****                                ' ',0,
 245:../Generated_Code/usb_descriptor.c ****                                'S',0,
 246:../Generated_Code/usb_descriptor.c ****                                'E',0,
 247:../Generated_Code/usb_descriptor.c ****                                'M',0,
 248:../Generated_Code/usb_descriptor.c ****                                'I',0,
 249:../Generated_Code/usb_descriptor.c ****                                'C',0,
 250:../Generated_Code/usb_descriptor.c ****                                'O',0,
 251:../Generated_Code/usb_descriptor.c ****                                'N',0,
 252:../Generated_Code/usb_descriptor.c ****                                'D',0,
 253:../Generated_Code/usb_descriptor.c ****                                'U',0,
 254:../Generated_Code/usb_descriptor.c ****                                'C',0,
 255:../Generated_Code/usb_descriptor.c ****                                'T',0,
 256:../Generated_Code/usb_descriptor.c ****                                'O',0,
 257:../Generated_Code/usb_descriptor.c ****                                'R',0,
 258:../Generated_Code/usb_descriptor.c ****                                ' ',0,
 259:../Generated_Code/usb_descriptor.c ****                                'I',0,
 260:../Generated_Code/usb_descriptor.c ****                                'N',0,
 261:../Generated_Code/usb_descriptor.c ****                                'C',0,
 262:../Generated_Code/usb_descriptor.c ****                                '.',0
 263:../Generated_Code/usb_descriptor.c **** #else
 264:../Generated_Code/usb_descriptor.c ****                                  'F',0,
 265:../Generated_Code/usb_descriptor.c ****                                  'R',0,
 266:../Generated_Code/usb_descriptor.c ****                                  'E',0,
 267:../Generated_Code/usb_descriptor.c ****                                  'E',0,
 268:../Generated_Code/usb_descriptor.c ****                                  'S',0,
 269:../Generated_Code/usb_descriptor.c ****                                  'C',0,
 270:../Generated_Code/usb_descriptor.c ****                                  'A',0,
 271:../Generated_Code/usb_descriptor.c ****                                  'L',0,
 272:../Generated_Code/usb_descriptor.c ****                                  'E',0,
 273:../Generated_Code/usb_descriptor.c ****                                  ' ',0,
 274:../Generated_Code/usb_descriptor.c ****                                  'I',0,
 275:../Generated_Code/usb_descriptor.c ****                                  'N',0,
 276:../Generated_Code/usb_descriptor.c ****                                  'C',0,
 277:../Generated_Code/usb_descriptor.c ****                                  '.',0,
 278:../Generated_Code/usb_descriptor.c **** #endif
 279:../Generated_Code/usb_descriptor.c ****                           };
 280:../Generated_Code/usb_descriptor.c **** 
 281:../Generated_Code/usb_descriptor.c **** 
 282:../Generated_Code/usb_descriptor.c **** uint_8 USB_DESC_CONST USB_STR_2[USB_STR_2_SIZE+USB_STR_DESC_SIZE]
 283:../Generated_Code/usb_descriptor.c ****                           = {  sizeof(USB_STR_2),
 284:../Generated_Code/usb_descriptor.c ****                                USB_STRING_DESCRIPTOR,
 285:../Generated_Code/usb_descriptor.c **** #if 0 /* << EST */
 286:../Generated_Code/usb_descriptor.c ****                                ' ',0,
 287:../Generated_Code/usb_descriptor.c ****                                ' ',0,
 288:../Generated_Code/usb_descriptor.c **** 							#ifdef __MK_xxx_H__
 289:../Generated_Code/usb_descriptor.c **** 							   'M',0,
 290:../Generated_Code/usb_descriptor.c **** 							   'K',0,
 291:../Generated_Code/usb_descriptor.c **** 							#elif (defined __MCF52xxx_H__)
 292:../Generated_Code/usb_descriptor.c **** 							   'C',0,
 293:../Generated_Code/usb_descriptor.c **** 							   'F',0,
 294:../Generated_Code/usb_descriptor.c **** 							#elif (defined MCU_mcf51jf128)
 295:../Generated_Code/usb_descriptor.c **** 							   'J',0,
 296:../Generated_Code/usb_descriptor.c **** 							   'F',0,
 297:../Generated_Code/usb_descriptor.c **** 							#else
 298:../Generated_Code/usb_descriptor.c **** 							   'J',0,
 299:../Generated_Code/usb_descriptor.c **** 							   'M',0,
 300:../Generated_Code/usb_descriptor.c **** 							#endif
 301:../Generated_Code/usb_descriptor.c ****                                ' ',0,
 302:../Generated_Code/usb_descriptor.c ****                                'C',0,
 303:../Generated_Code/usb_descriptor.c ****                                'D',0,
 304:../Generated_Code/usb_descriptor.c ****                                'C',0,
 305:../Generated_Code/usb_descriptor.c ****                                ' ',0,
 306:../Generated_Code/usb_descriptor.c ****                                'D',0,
 307:../Generated_Code/usb_descriptor.c ****                                'E',0,
 308:../Generated_Code/usb_descriptor.c ****                                'M',0,
 309:../Generated_Code/usb_descriptor.c ****                                'O',0,
 310:../Generated_Code/usb_descriptor.c ****                                ' ',0
 311:../Generated_Code/usb_descriptor.c **** #else
 312:../Generated_Code/usb_descriptor.c ****                                  'F',0,
 313:../Generated_Code/usb_descriptor.c ****                                  'S',0,
 314:../Generated_Code/usb_descriptor.c ****                                  'L',0,
 315:../Generated_Code/usb_descriptor.c ****                                  ' ',0,
 316:../Generated_Code/usb_descriptor.c ****                                  'C',0,
 317:../Generated_Code/usb_descriptor.c ****                                  'D',0,
 318:../Generated_Code/usb_descriptor.c ****                                  'C',0,
 319:../Generated_Code/usb_descriptor.c ****                                  ' ',0,
 320:../Generated_Code/usb_descriptor.c ****                                  'D',0,
 321:../Generated_Code/usb_descriptor.c ****                                  'E',0,
 322:../Generated_Code/usb_descriptor.c ****                                  'V',0,
 323:../Generated_Code/usb_descriptor.c ****                                  'I',0,
 324:../Generated_Code/usb_descriptor.c ****                                  'C',0,
 325:../Generated_Code/usb_descriptor.c ****                                  'E',0,
 326:../Generated_Code/usb_descriptor.c **** #endif
 327:../Generated_Code/usb_descriptor.c ****                           };
 328:../Generated_Code/usb_descriptor.c **** 
 329:../Generated_Code/usb_descriptor.c **** /* string descriptor for serial number */
 330:../Generated_Code/usb_descriptor.c **** uint_8 USB_DESC_CONST USB_STR_3[USB_STR_3_SIZE+USB_STR_DESC_SIZE]
 331:../Generated_Code/usb_descriptor.c ****                           = {  sizeof(USB_STR_3),
 332:../Generated_Code/usb_descriptor.c ****                                USB_STRING_DESCRIPTOR,
 333:../Generated_Code/usb_descriptor.c ****                                  '0',0,
 334:../Generated_Code/usb_descriptor.c ****                                  '0',0,
 335:../Generated_Code/usb_descriptor.c ****                                  '0',0,
 336:../Generated_Code/usb_descriptor.c ****                                  '1',0,
 337:../Generated_Code/usb_descriptor.c ****                                  '2',0,
 338:../Generated_Code/usb_descriptor.c ****                                  '3',0,
 339:../Generated_Code/usb_descriptor.c ****                                  'A',0,
 340:../Generated_Code/usb_descriptor.c ****                                  'B',0,
 341:../Generated_Code/usb_descriptor.c ****                                  'C',0,
 342:../Generated_Code/usb_descriptor.c ****                           };
 343:../Generated_Code/usb_descriptor.c **** 
 344:../Generated_Code/usb_descriptor.c **** uint_8 USB_DESC_CONST USB_STR_n[USB_STR_n_SIZE+USB_STR_DESC_SIZE]
 345:../Generated_Code/usb_descriptor.c ****                           = {  sizeof(USB_STR_n),
 346:../Generated_Code/usb_descriptor.c ****                                USB_STRING_DESCRIPTOR,
 347:../Generated_Code/usb_descriptor.c ****                                'B',0,
 348:../Generated_Code/usb_descriptor.c ****                                'A',0,
 349:../Generated_Code/usb_descriptor.c ****                                'D',0,
 350:../Generated_Code/usb_descriptor.c ****                                ' ',0,
 351:../Generated_Code/usb_descriptor.c ****                                'S',0,
 352:../Generated_Code/usb_descriptor.c ****                                'T',0,
 353:../Generated_Code/usb_descriptor.c ****                                'R',0,
 354:../Generated_Code/usb_descriptor.c ****                                'I',0,
 355:../Generated_Code/usb_descriptor.c ****                                'N',0,
 356:../Generated_Code/usb_descriptor.c ****                                'G',0,
 357:../Generated_Code/usb_descriptor.c ****                                ' ',0,
 358:../Generated_Code/usb_descriptor.c ****                                'I',0,
 359:../Generated_Code/usb_descriptor.c ****                                'N',0,
 360:../Generated_Code/usb_descriptor.c ****                                'D',0,
 361:../Generated_Code/usb_descriptor.c ****                                'E',0,
 362:../Generated_Code/usb_descriptor.c ****                                'X',0
 363:../Generated_Code/usb_descriptor.c ****                           };
 364:../Generated_Code/usb_descriptor.c **** 
 365:../Generated_Code/usb_descriptor.c **** 
 366:../Generated_Code/usb_descriptor.c **** USB_PACKET_SIZE const g_std_desc_size[USB_MAX_STD_DESCRIPTORS+1] =
 367:../Generated_Code/usb_descriptor.c ****                                     {0,
 368:../Generated_Code/usb_descriptor.c ****                                      DEVICE_DESCRIPTOR_SIZE,
 369:../Generated_Code/usb_descriptor.c ****                                      CONFIG_DESC_SIZE,
 370:../Generated_Code/usb_descriptor.c ****                                      0, /* string */
 371:../Generated_Code/usb_descriptor.c ****                                      0, /* Interface */
 372:../Generated_Code/usb_descriptor.c ****                                      0, /* Endpoint */
 373:../Generated_Code/usb_descriptor.c ****                                      0, /* Device Qualifier */
 374:../Generated_Code/usb_descriptor.c ****                                      0 /* other speed config */
 375:../Generated_Code/usb_descriptor.c ****                                     };
 376:../Generated_Code/usb_descriptor.c **** 
 377:../Generated_Code/usb_descriptor.c **** uint_8_ptr const g_std_descriptors[USB_MAX_STD_DESCRIPTORS+1] =
 378:../Generated_Code/usb_descriptor.c ****                             {
 379:../Generated_Code/usb_descriptor.c ****                                 NULL,
 380:../Generated_Code/usb_descriptor.c ****                                 (uint_8_ptr)g_device_descriptor,
 381:../Generated_Code/usb_descriptor.c ****                                 (uint_8_ptr)g_config_descriptor,
 382:../Generated_Code/usb_descriptor.c ****                                 NULL, /* string */
 383:../Generated_Code/usb_descriptor.c ****                                 NULL, /* Interface */
 384:../Generated_Code/usb_descriptor.c ****                                 NULL, /* Endpoint */
 385:../Generated_Code/usb_descriptor.c ****                                 NULL, /* Device Qualifier */
 386:../Generated_Code/usb_descriptor.c ****                                 NULL  /* other speed config*/
 387:../Generated_Code/usb_descriptor.c ****                             };
 388:../Generated_Code/usb_descriptor.c **** 
 389:../Generated_Code/usb_descriptor.c **** uint_8 const g_string_desc_size[USB_MAX_STRING_DESCRIPTORS+1] =
 390:../Generated_Code/usb_descriptor.c ****                             {
 391:../Generated_Code/usb_descriptor.c ****                                 sizeof(USB_STR_0),
 392:../Generated_Code/usb_descriptor.c ****                                 sizeof(USB_STR_1),
 393:../Generated_Code/usb_descriptor.c ****                                 sizeof(USB_STR_2),
 394:../Generated_Code/usb_descriptor.c ****                                 sizeof(USB_STR_3), /* << EST serial number */
 395:../Generated_Code/usb_descriptor.c ****                                 sizeof(USB_STR_n)
 396:../Generated_Code/usb_descriptor.c ****                             };
 397:../Generated_Code/usb_descriptor.c **** 
 398:../Generated_Code/usb_descriptor.c **** uint_8_ptr const g_string_descriptors[USB_MAX_STRING_DESCRIPTORS+1] =
 399:../Generated_Code/usb_descriptor.c ****                             {
 400:../Generated_Code/usb_descriptor.c ****                                 (uint_8_ptr)USB_STR_0,
 401:../Generated_Code/usb_descriptor.c ****                                 (uint_8_ptr)USB_STR_1,
 402:../Generated_Code/usb_descriptor.c ****                                 (uint_8_ptr)USB_STR_2,
 403:../Generated_Code/usb_descriptor.c ****                                 (uint_8_ptr)USB_STR_3, /* << EST serial number */
 404:../Generated_Code/usb_descriptor.c ****                                 (uint_8_ptr)USB_STR_n
 405:../Generated_Code/usb_descriptor.c ****                             };
 406:../Generated_Code/usb_descriptor.c **** 
 407:../Generated_Code/usb_descriptor.c **** #ifdef __HC08__ /* << EST */
 408:../Generated_Code/usb_descriptor.c **** #pragma MESSAGE DISABLE C4800 /* implicit cast in assignment */
 409:../Generated_Code/usb_descriptor.c **** #endif
 410:../Generated_Code/usb_descriptor.c **** USB_ALL_LANGUAGES g_languages = { USB_STR_0, sizeof(USB_STR_0),
 411:../Generated_Code/usb_descriptor.c **** 		                          {
 412:../Generated_Code/usb_descriptor.c **** 		                            {
 413:../Generated_Code/usb_descriptor.c ****                                             (uint_16)0x0409,
 414:../Generated_Code/usb_descriptor.c ****                                         (const uint_8 **)g_string_descriptors,
 415:../Generated_Code/usb_descriptor.c ****                                         g_string_desc_size
 416:../Generated_Code/usb_descriptor.c ****                                     }
 417:../Generated_Code/usb_descriptor.c **** 		                          }
 418:../Generated_Code/usb_descriptor.c ****                                 };
 419:../Generated_Code/usb_descriptor.c **** #ifdef __HC08__ /* << EST */
 420:../Generated_Code/usb_descriptor.c **** #pragma MESSAGE DEFAULT C4800
 421:../Generated_Code/usb_descriptor.c **** #endif
 422:../Generated_Code/usb_descriptor.c **** 
 423:../Generated_Code/usb_descriptor.c **** uint_8 const g_valid_config_values[USB_MAX_CONFIG_SUPPORTED+1]={0,1};
 424:../Generated_Code/usb_descriptor.c **** 
 425:../Generated_Code/usb_descriptor.c **** /****************************************************************************
 426:../Generated_Code/usb_descriptor.c ****  * Global Variables
 427:../Generated_Code/usb_descriptor.c ****  ****************************************************************************/
 428:../Generated_Code/usb_descriptor.c **** #ifdef _MC9S08JS16_H
 429:../Generated_Code/usb_descriptor.c **** #pragma DATA_SEG APP_DATA
 430:../Generated_Code/usb_descriptor.c **** #endif
 431:../Generated_Code/usb_descriptor.c **** 
 432:../Generated_Code/usb_descriptor.c **** static uint_8 g_line_coding[USB_MAX_SUPPORTED_INTERFACES][LINE_CODING_SIZE] =
 433:../Generated_Code/usb_descriptor.c **** {
 434:../Generated_Code/usb_descriptor.c ****         { (LINE_CODE_DTERATE_IFACE0>> 0) & 0x000000FF,
 435:../Generated_Code/usb_descriptor.c ****           (LINE_CODE_DTERATE_IFACE0>> 8) & 0x000000FF,
 436:../Generated_Code/usb_descriptor.c ****           (LINE_CODE_DTERATE_IFACE0>>16) & 0x000000FF,
 437:../Generated_Code/usb_descriptor.c ****           (LINE_CODE_DTERATE_IFACE0>>24) & 0x000000FF,
 438:../Generated_Code/usb_descriptor.c ****           /*e.g. 0x00,0xC2,0x01,0x00 : 0x0001C200 is 115200 bits per second */
 439:../Generated_Code/usb_descriptor.c ****            LINE_CODE_CHARFORMAT_IFACE0,
 440:../Generated_Code/usb_descriptor.c ****            LINE_CODE_PARITYTYPE_IFACE0,
 441:../Generated_Code/usb_descriptor.c ****            LINE_CODE_DATABITS_IFACE0
 442:../Generated_Code/usb_descriptor.c ****         }
 443:../Generated_Code/usb_descriptor.c **** };
 444:../Generated_Code/usb_descriptor.c **** 
 445:../Generated_Code/usb_descriptor.c **** static uint_8 g_abstract_state[USB_MAX_SUPPORTED_INTERFACES][COMM_FEATURE_DATA_SIZE] =
 446:../Generated_Code/usb_descriptor.c **** {
 447:../Generated_Code/usb_descriptor.c ****         { (STATUS_ABSTRACT_STATE_IFACE0>>0) & 0x00FF,
 448:../Generated_Code/usb_descriptor.c ****           (STATUS_ABSTRACT_STATE_IFACE0>>8) & 0x00FF
 449:../Generated_Code/usb_descriptor.c ****         }
 450:../Generated_Code/usb_descriptor.c **** };
 451:../Generated_Code/usb_descriptor.c **** 
 452:../Generated_Code/usb_descriptor.c **** static uint_8 g_country_code[USB_MAX_SUPPORTED_INTERFACES][COMM_FEATURE_DATA_SIZE] =
 453:../Generated_Code/usb_descriptor.c **** {
 454:../Generated_Code/usb_descriptor.c ****         { (COUNTRY_SETTING_IFACE0>>0) & 0x00FF,
 455:../Generated_Code/usb_descriptor.c ****           (COUNTRY_SETTING_IFACE0>>8) & 0x00FF
 456:../Generated_Code/usb_descriptor.c ****         }
 457:../Generated_Code/usb_descriptor.c **** };
 458:../Generated_Code/usb_descriptor.c **** 
 459:../Generated_Code/usb_descriptor.c **** static uint_8 g_alternate_interface[USB_MAX_SUPPORTED_INTERFACES];
 460:../Generated_Code/usb_descriptor.c **** 
 461:../Generated_Code/usb_descriptor.c **** /*****************************************************************************
 462:../Generated_Code/usb_descriptor.c ****  * Local Types - None
 463:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 464:../Generated_Code/usb_descriptor.c **** 
 465:../Generated_Code/usb_descriptor.c **** /*****************************************************************************
 466:../Generated_Code/usb_descriptor.c ****  * Local Functions Prototypes
 467:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 468:../Generated_Code/usb_descriptor.c **** 
 469:../Generated_Code/usb_descriptor.c **** /*****************************************************************************
 470:../Generated_Code/usb_descriptor.c ****  * Local Variables - None
 471:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 472:../Generated_Code/usb_descriptor.c **** 
 473:../Generated_Code/usb_descriptor.c **** 
 474:../Generated_Code/usb_descriptor.c ****  /*****************************************************************************
 475:../Generated_Code/usb_descriptor.c ****  * Local Functions - None
 476:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 477:../Generated_Code/usb_descriptor.c **** 
 478:../Generated_Code/usb_descriptor.c **** /*****************************************************************************
 479:../Generated_Code/usb_descriptor.c ****  * Global Functions
 480:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 481:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 482:../Generated_Code/usb_descriptor.c ****  *
 483:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Get_Descriptor
 484:../Generated_Code/usb_descriptor.c ****  *
 485:../Generated_Code/usb_descriptor.c ****  * @brief The function returns the correponding descriptor
 486:../Generated_Code/usb_descriptor.c ****  *
 487:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller ID
 488:../Generated_Code/usb_descriptor.c ****  * @param type          : type of descriptor requested
 489:../Generated_Code/usb_descriptor.c ****  * @param sub_type      : string index for string descriptor
 490:../Generated_Code/usb_descriptor.c ****  * @param index         : string descriptor language Id
 491:../Generated_Code/usb_descriptor.c ****  * @param descriptor    : output descriptor pointer
 492:../Generated_Code/usb_descriptor.c ****  * @param size          : size of descriptor returned
 493:../Generated_Code/usb_descriptor.c ****  *
 494:../Generated_Code/usb_descriptor.c ****  * @return USB_OK                      When Successfull
 495:../Generated_Code/usb_descriptor.c ****  *         USBERR_INVALID_REQ_TYPE     when Error
 496:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 497:../Generated_Code/usb_descriptor.c ****  * This function is used to pass the pointer to the requested descriptor
 498:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 499:../Generated_Code/usb_descriptor.c **** uint_8 USB_Desc_Get_Descriptor (
 500:../Generated_Code/usb_descriptor.c ****      uint_8 controller_ID,   /* [IN] Controller ID */
 501:../Generated_Code/usb_descriptor.c ****      uint_8 type,            /* [IN] type of descriptor requested */
 502:../Generated_Code/usb_descriptor.c ****      uint_8 str_num,         /* [IN] string index for string descriptor */
 503:../Generated_Code/usb_descriptor.c ****      uint_16 index,          /* [IN] string descriptor language Id */
 504:../Generated_Code/usb_descriptor.c ****      uint_8_ptr *descriptor, /* [OUT] output descriptor pointer */
 505:../Generated_Code/usb_descriptor.c ****      USB_PACKET_SIZE *size   /* [OUT] size of descriptor returned */
 506:../Generated_Code/usb_descriptor.c **** )
 507:../Generated_Code/usb_descriptor.c **** {
 396              		.loc 1 507 0
 397              		.cfi_startproc
 398              		@ args = 8, pretend = 0, frame = 16
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 401 0000 80B4     		push	{r7}
 402              		.cfi_def_cfa_offset 4
 403              		.cfi_offset 7, -4
 404 0002 85B0     		sub	sp, sp, #20
 405              		.cfi_def_cfa_offset 24
 406 0004 00AF     		add	r7, sp, #0
 407              		.cfi_def_cfa_register 7
 408 0006 F871     		strb	r0, [r7, #7]
 409 0008 B971     		strb	r1, [r7, #6]
 410 000a 7A71     		strb	r2, [r7, #5]
 411 000c 7B80     		strh	r3, [r7, #2]	@ movhi
 508:../Generated_Code/usb_descriptor.c ****      UNUSED (controller_ID)
 509:../Generated_Code/usb_descriptor.c **** 
 510:../Generated_Code/usb_descriptor.c ****     /* string descriptors are handled saperately */
 511:../Generated_Code/usb_descriptor.c ****     if (type == USB_STRING_DESCRIPTOR)
 412              		.loc 1 511 0
 413 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 414 0010 032B     		cmp	r3, #3
 415 0012 47D1     		bne	.L2
 512:../Generated_Code/usb_descriptor.c ****     {
 513:../Generated_Code/usb_descriptor.c ****         if(index == 0)
 416              		.loc 1 513 0
 417 0014 7B88     		ldrh	r3, [r7, #2]
 418 0016 002B     		cmp	r3, #0
 419 0018 07D1     		bne	.L3
 514:../Generated_Code/usb_descriptor.c ****         {
 515:../Generated_Code/usb_descriptor.c ****             /* return the string and size of all languages */
 516:../Generated_Code/usb_descriptor.c ****             *descriptor = (uint_8_ptr)g_languages.languages_supported_string;
 420              		.loc 1 516 0
 421 001a 324A     		ldr	r2, .L14
 422 001c BB69     		ldr	r3, [r7, #24]
 423 001e 1A60     		str	r2, [r3]
 517:../Generated_Code/usb_descriptor.c ****             *size = g_languages.languages_supported_size;
 424              		.loc 1 517 0
 425 0020 0423     		movs	r3, #4
 426 0022 1A46     		mov	r2, r3
 427 0024 FB69     		ldr	r3, [r7, #28]
 428 0026 1A80     		strh	r2, [r3]	@ movhi
 429 0028 54E0     		b	.L10
 430              	.L3:
 431              	.LBB2:
 518:../Generated_Code/usb_descriptor.c ****         } else
 519:../Generated_Code/usb_descriptor.c ****         {
 520:../Generated_Code/usb_descriptor.c ****             uint_8 lang_id=0;
 432              		.loc 1 520 0
 433 002a 0023     		movs	r3, #0
 434 002c FB73     		strb	r3, [r7, #15]
 521:../Generated_Code/usb_descriptor.c ****             uint_8 lang_index=USB_MAX_LANGUAGES_SUPPORTED;
 435              		.loc 1 521 0
 436 002e 0123     		movs	r3, #1
 437 0030 BB73     		strb	r3, [r7, #14]
 522:../Generated_Code/usb_descriptor.c **** 
 523:../Generated_Code/usb_descriptor.c ****             for(;lang_id< USB_MAX_LANGUAGES_SUPPORTED;lang_id++)
 438              		.loc 1 523 0
 439 0032 15E0     		b	.L5
 440              	.L9:
 524:../Generated_Code/usb_descriptor.c ****             {
 525:../Generated_Code/usb_descriptor.c ****                 /* check whether we have a string for this language */
 526:../Generated_Code/usb_descriptor.c ****                 if(index == g_languages.usb_language[lang_id].language_id)
 441              		.loc 1 526 0
 442 0034 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 443 0036 2C49     		ldr	r1, .L14+4
 444 0038 1346     		mov	r3, r2
 445 003a 5B00     		lsls	r3, r3, #1
 446 003c 1344     		add	r3, r3, r2
 447 003e 9B00     		lsls	r3, r3, #2
 448 0040 0B44     		add	r3, r3, r1
 449 0042 0833     		adds	r3, r3, #8
 450 0044 1B88     		ldrh	r3, [r3]
 451 0046 7A88     		ldrh	r2, [r7, #2]
 452 0048 9A42     		cmp	r2, r3
 453 004a 06D1     		bne	.L6
 527:../Generated_Code/usb_descriptor.c ****                 {   /* check for max descriptors */
 528:../Generated_Code/usb_descriptor.c ****                     if(str_num < USB_MAX_STRING_DESCRIPTORS)
 454              		.loc 1 528 0
 455 004c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 456 004e 032B     		cmp	r3, #3
 457 0050 02D8     		bhi	.L7
 529:../Generated_Code/usb_descriptor.c ****                     {   /* setup index for the string to be returned */
 530:../Generated_Code/usb_descriptor.c ****                         lang_index=str_num;
 458              		.loc 1 530 0
 459 0052 7B79     		ldrb	r3, [r7, #5]
 460 0054 BB73     		strb	r3, [r7, #14]
 531:../Generated_Code/usb_descriptor.c ****                     }
 532:../Generated_Code/usb_descriptor.c **** 
 533:../Generated_Code/usb_descriptor.c ****                     break;
 461              		.loc 1 533 0
 462 0056 06E0     		b	.L8
 463              	.L7:
 464 0058 05E0     		b	.L8
 465              	.L6:
 523:../Generated_Code/usb_descriptor.c ****             for(;lang_id< USB_MAX_LANGUAGES_SUPPORTED;lang_id++)
 466              		.loc 1 523 0
 467 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 468 005c 0133     		adds	r3, r3, #1
 469 005e FB73     		strb	r3, [r7, #15]
 470              	.L5:
 523:../Generated_Code/usb_descriptor.c ****             for(;lang_id< USB_MAX_LANGUAGES_SUPPORTED;lang_id++)
 471              		.loc 1 523 0 is_stmt 0 discriminator 1
 472 0060 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 473 0062 002B     		cmp	r3, #0
 474 0064 E6D0     		beq	.L9
 475              	.L8:
 534:../Generated_Code/usb_descriptor.c ****                 }
 535:../Generated_Code/usb_descriptor.c **** 
 536:../Generated_Code/usb_descriptor.c ****             }
 537:../Generated_Code/usb_descriptor.c **** 
 538:../Generated_Code/usb_descriptor.c ****             /* set return val for descriptor and size */
 539:../Generated_Code/usb_descriptor.c ****             *descriptor = (uint_8_ptr)g_languages.usb_language[lang_id].
 476              		.loc 1 539 0 is_stmt 1
 477 0066 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 478 0068 1F49     		ldr	r1, .L14+4
 479 006a 1346     		mov	r3, r2
 480 006c 5B00     		lsls	r3, r3, #1
 481 006e 1344     		add	r3, r3, r2
 482 0070 9B00     		lsls	r3, r3, #2
 483 0072 0B44     		add	r3, r3, r1
 484 0074 0833     		adds	r3, r3, #8
 485 0076 5A68     		ldr	r2, [r3, #4]
 540:../Generated_Code/usb_descriptor.c ****                                                 lang_desc[lang_index];
 486              		.loc 1 540 0
 487 0078 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 488 007a 9B00     		lsls	r3, r3, #2
 489 007c 1344     		add	r3, r3, r2
 490 007e 1A68     		ldr	r2, [r3]
 539:../Generated_Code/usb_descriptor.c ****             *descriptor = (uint_8_ptr)g_languages.usb_language[lang_id].
 491              		.loc 1 539 0
 492 0080 BB69     		ldr	r3, [r7, #24]
 493 0082 1A60     		str	r2, [r3]
 541:../Generated_Code/usb_descriptor.c ****             *size = g_languages.usb_language[lang_id].
 494              		.loc 1 541 0
 495 0084 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 496 0086 1849     		ldr	r1, .L14+4
 497 0088 1346     		mov	r3, r2
 498 008a 5B00     		lsls	r3, r3, #1
 499 008c 1344     		add	r3, r3, r2
 500 008e 9B00     		lsls	r3, r3, #2
 501 0090 0B44     		add	r3, r3, r1
 502 0092 1033     		adds	r3, r3, #16
 503 0094 1A68     		ldr	r2, [r3]
 542:../Generated_Code/usb_descriptor.c ****                                                 lang_desc_size[lang_index];
 504              		.loc 1 542 0
 505 0096 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 506 0098 1344     		add	r3, r3, r2
 507 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 541:../Generated_Code/usb_descriptor.c ****             *size = g_languages.usb_language[lang_id].
 508              		.loc 1 541 0
 509 009c 1A46     		mov	r2, r3
 510 009e FB69     		ldr	r3, [r7, #28]
 511 00a0 1A80     		strh	r2, [r3]	@ movhi
 512 00a2 17E0     		b	.L10
 513              	.L2:
 514              	.LBE2:
 543:../Generated_Code/usb_descriptor.c ****         }
 544:../Generated_Code/usb_descriptor.c **** 
 545:../Generated_Code/usb_descriptor.c ****     }
 546:../Generated_Code/usb_descriptor.c ****     else if (type < USB_MAX_STD_DESCRIPTORS+1)
 515              		.loc 1 546 0
 516 00a4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 517 00a6 072B     		cmp	r3, #7
 518 00a8 12D8     		bhi	.L11
 547:../Generated_Code/usb_descriptor.c ****     {
 548:../Generated_Code/usb_descriptor.c ****         /* Set return val for descriptor and size */
 549:../Generated_Code/usb_descriptor.c ****         *descriptor = (uint_8_ptr)g_std_descriptors [type];
 519              		.loc 1 549 0
 520 00aa BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 521 00ac 0F4B     		ldr	r3, .L14+8
 522 00ae 53F82220 		ldr	r2, [r3, r2, lsl #2]
 523 00b2 BB69     		ldr	r3, [r7, #24]
 524 00b4 1A60     		str	r2, [r3]
 550:../Generated_Code/usb_descriptor.c **** 
 551:../Generated_Code/usb_descriptor.c ****         /* if there is no descriptor then return error */
 552:../Generated_Code/usb_descriptor.c ****         if(*descriptor == NULL)
 525              		.loc 1 552 0
 526 00b6 BB69     		ldr	r3, [r7, #24]
 527 00b8 1B68     		ldr	r3, [r3]
 528 00ba 002B     		cmp	r3, #0
 529 00bc 01D1     		bne	.L12
 553:../Generated_Code/usb_descriptor.c ****         {
 554:../Generated_Code/usb_descriptor.c ****             return USBERR_INVALID_REQ_TYPE;
 530              		.loc 1 554 0
 531 00be CD23     		movs	r3, #205
 532 00c0 09E0     		b	.L13
 533              	.L12:
 555:../Generated_Code/usb_descriptor.c ****         }
 556:../Generated_Code/usb_descriptor.c **** 
 557:../Generated_Code/usb_descriptor.c ****         *size = g_std_desc_size[type];
 534              		.loc 1 557 0
 535 00c2 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 536 00c4 0A4B     		ldr	r3, .L14+12
 537 00c6 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 538 00ca FB69     		ldr	r3, [r7, #28]
 539 00cc 1A80     		strh	r2, [r3]	@ movhi
 540 00ce 01E0     		b	.L10
 541              	.L11:
 558:../Generated_Code/usb_descriptor.c ****     }
 559:../Generated_Code/usb_descriptor.c ****     else /* invalid descriptor */
 560:../Generated_Code/usb_descriptor.c ****     {
 561:../Generated_Code/usb_descriptor.c ****         return USBERR_INVALID_REQ_TYPE;
 542              		.loc 1 561 0
 543 00d0 CD23     		movs	r3, #205
 544 00d2 00E0     		b	.L13
 545              	.L10:
 562:../Generated_Code/usb_descriptor.c ****     }
 563:../Generated_Code/usb_descriptor.c **** 
 564:../Generated_Code/usb_descriptor.c ****     return USB_OK;
 546              		.loc 1 564 0
 547 00d4 0023     		movs	r3, #0
 548              	.L13:
 565:../Generated_Code/usb_descriptor.c **** }
 549              		.loc 1 565 0
 550 00d6 1846     		mov	r0, r3
 551 00d8 1437     		adds	r7, r7, #20
 552 00da BD46     		mov	sp, r7
 553              		@ sp needed
 554 00dc 5DF8047B 		ldr	r7, [sp], #4
 555 00e0 7047     		bx	lr
 556              	.L15:
 557 00e2 00BF     		.align	2
 558              	.L14:
 559 00e4 00000000 		.word	USB_STR_0
 560 00e8 00000000 		.word	g_languages
 561 00ec 00000000 		.word	g_std_descriptors
 562 00f0 00000000 		.word	g_std_desc_size
 563              		.cfi_endproc
 564              	.LFE0:
 566              		.section	.text.USB_Desc_Get_Interface,"ax",%progbits
 567              		.align	2
 568              		.global	USB_Desc_Get_Interface
 569              		.thumb
 570              		.thumb_func
 572              	USB_Desc_Get_Interface:
 573              	.LFB1:
 566:../Generated_Code/usb_descriptor.c **** 
 567:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 568:../Generated_Code/usb_descriptor.c ****  *
 569:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Get_Interface
 570:../Generated_Code/usb_descriptor.c ****  *
 571:../Generated_Code/usb_descriptor.c ****  * @brief The function returns the alternate interface
 572:../Generated_Code/usb_descriptor.c ****  *
 573:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller Id
 574:../Generated_Code/usb_descriptor.c ****  * @param interface     : Interface number
 575:../Generated_Code/usb_descriptor.c ****  * @param alt_interface : Output alternate interface
 576:../Generated_Code/usb_descriptor.c ****  *
 577:../Generated_Code/usb_descriptor.c ****  * @return USB_OK                     When Successfull
 578:../Generated_Code/usb_descriptor.c ****  *         USBERR_INVALID_REQ_TYPE    when Error
 579:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 580:../Generated_Code/usb_descriptor.c ****  * This function is called by the framework module to get the current interface
 581:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 582:../Generated_Code/usb_descriptor.c **** uint_8 USB_Desc_Get_Interface (
 583:../Generated_Code/usb_descriptor.c ****       uint_8 controller_ID,     /* [IN] Controller ID */
 584:../Generated_Code/usb_descriptor.c ****       uint_8 interface,         /* [IN] interface number */
 585:../Generated_Code/usb_descriptor.c ****       uint_8_ptr alt_interface  /* [OUT] output alternate interface */
 586:../Generated_Code/usb_descriptor.c **** )
 587:../Generated_Code/usb_descriptor.c **** {
 574              		.loc 1 587 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 8
 577              		@ frame_needed = 1, uses_anonymous_args = 0
 578              		@ link register save eliminated.
 579 0000 80B4     		push	{r7}
 580              		.cfi_def_cfa_offset 4
 581              		.cfi_offset 7, -4
 582 0002 83B0     		sub	sp, sp, #12
 583              		.cfi_def_cfa_offset 16
 584 0004 00AF     		add	r7, sp, #0
 585              		.cfi_def_cfa_register 7
 586 0006 0B46     		mov	r3, r1
 587 0008 3A60     		str	r2, [r7]
 588 000a 0246     		mov	r2, r0
 589 000c FA71     		strb	r2, [r7, #7]
 590 000e BB71     		strb	r3, [r7, #6]
 588:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 589:../Generated_Code/usb_descriptor.c ****     /* if interface valid */
 590:../Generated_Code/usb_descriptor.c ****     if(interface < USB_MAX_SUPPORTED_INTERFACES)
 591              		.loc 1 590 0
 592 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 593 0012 012B     		cmp	r3, #1
 594 0014 06D8     		bhi	.L17
 591:../Generated_Code/usb_descriptor.c ****     {
 592:../Generated_Code/usb_descriptor.c ****         /* get alternate interface*/
 593:../Generated_Code/usb_descriptor.c ****         *alt_interface = g_alternate_interface[interface];
 595              		.loc 1 593 0
 596 0016 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 597 0018 064A     		ldr	r2, .L19
 598 001a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 599 001c 3B68     		ldr	r3, [r7]
 600 001e 1A70     		strb	r2, [r3]
 594:../Generated_Code/usb_descriptor.c ****         return USB_OK;
 601              		.loc 1 594 0
 602 0020 0023     		movs	r3, #0
 603 0022 00E0     		b	.L18
 604              	.L17:
 595:../Generated_Code/usb_descriptor.c ****     }
 596:../Generated_Code/usb_descriptor.c **** 
 597:../Generated_Code/usb_descriptor.c ****     return USBERR_INVALID_REQ_TYPE;
 605              		.loc 1 597 0
 606 0024 CD23     		movs	r3, #205
 607              	.L18:
 598:../Generated_Code/usb_descriptor.c **** }
 608              		.loc 1 598 0
 609 0026 1846     		mov	r0, r3
 610 0028 0C37     		adds	r7, r7, #12
 611 002a BD46     		mov	sp, r7
 612              		@ sp needed
 613 002c 5DF8047B 		ldr	r7, [sp], #4
 614 0030 7047     		bx	lr
 615              	.L20:
 616 0032 00BF     		.align	2
 617              	.L19:
 618 0034 00000000 		.word	g_alternate_interface
 619              		.cfi_endproc
 620              	.LFE1:
 622              		.section	.text.USB_Desc_Set_Interface,"ax",%progbits
 623              		.align	2
 624              		.global	USB_Desc_Set_Interface
 625              		.thumb
 626              		.thumb_func
 628              	USB_Desc_Set_Interface:
 629              	.LFB2:
 599:../Generated_Code/usb_descriptor.c **** 
 600:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 601:../Generated_Code/usb_descriptor.c ****  *
 602:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Set_Interface
 603:../Generated_Code/usb_descriptor.c ****  *
 604:../Generated_Code/usb_descriptor.c ****  * @brief The function sets the alternate interface
 605:../Generated_Code/usb_descriptor.c ****  *
 606:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller Id
 607:../Generated_Code/usb_descriptor.c ****  * @param interface     : Interface number
 608:../Generated_Code/usb_descriptor.c ****  * @param alt_interface : Input alternate interface
 609:../Generated_Code/usb_descriptor.c ****  *
 610:../Generated_Code/usb_descriptor.c ****  * @return USB_OK                              When Successfull
 611:../Generated_Code/usb_descriptor.c ****  *         USBERR_INVALID_REQ_TYPE             when Error
 612:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 613:../Generated_Code/usb_descriptor.c ****  * This function is called by the framework module to set the interface
 614:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 615:../Generated_Code/usb_descriptor.c **** uint_8 USB_Desc_Set_Interface (
 616:../Generated_Code/usb_descriptor.c ****       uint_8 controller_ID, /* [IN] Controller ID */
 617:../Generated_Code/usb_descriptor.c ****       uint_8 interface,     /* [IN] interface number */
 618:../Generated_Code/usb_descriptor.c ****       uint_8 alt_interface  /* [IN] input alternate interface */
 619:../Generated_Code/usb_descriptor.c **** )
 620:../Generated_Code/usb_descriptor.c **** {
 630              		.loc 1 620 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 8
 633              		@ frame_needed = 1, uses_anonymous_args = 0
 634              		@ link register save eliminated.
 635 0000 80B4     		push	{r7}
 636              		.cfi_def_cfa_offset 4
 637              		.cfi_offset 7, -4
 638 0002 83B0     		sub	sp, sp, #12
 639              		.cfi_def_cfa_offset 16
 640 0004 00AF     		add	r7, sp, #0
 641              		.cfi_def_cfa_register 7
 642 0006 1346     		mov	r3, r2
 643 0008 0246     		mov	r2, r0
 644 000a FA71     		strb	r2, [r7, #7]
 645 000c 0A46     		mov	r2, r1
 646 000e BA71     		strb	r2, [r7, #6]
 647 0010 7B71     		strb	r3, [r7, #5]
 621:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 622:../Generated_Code/usb_descriptor.c ****     /* if interface valid */
 623:../Generated_Code/usb_descriptor.c ****     if(interface < USB_MAX_SUPPORTED_INTERFACES)
 648              		.loc 1 623 0
 649 0012 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 650 0014 012B     		cmp	r3, #1
 651 0016 05D8     		bhi	.L22
 624:../Generated_Code/usb_descriptor.c ****     {
 625:../Generated_Code/usb_descriptor.c ****         /* set alternate interface*/
 626:../Generated_Code/usb_descriptor.c ****         g_alternate_interface[interface]=alt_interface;
 652              		.loc 1 626 0
 653 0018 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 654 001a 064A     		ldr	r2, .L24
 655 001c 7979     		ldrb	r1, [r7, #5]
 656 001e D154     		strb	r1, [r2, r3]
 627:../Generated_Code/usb_descriptor.c ****             return USB_OK;
 657              		.loc 1 627 0
 658 0020 0023     		movs	r3, #0
 659 0022 00E0     		b	.L23
 660              	.L22:
 628:../Generated_Code/usb_descriptor.c ****     }
 629:../Generated_Code/usb_descriptor.c **** 
 630:../Generated_Code/usb_descriptor.c ****     return USBERR_INVALID_REQ_TYPE;
 661              		.loc 1 630 0
 662 0024 CD23     		movs	r3, #205
 663              	.L23:
 631:../Generated_Code/usb_descriptor.c **** }
 664              		.loc 1 631 0
 665 0026 1846     		mov	r0, r3
 666 0028 0C37     		adds	r7, r7, #12
 667 002a BD46     		mov	sp, r7
 668              		@ sp needed
 669 002c 5DF8047B 		ldr	r7, [sp], #4
 670 0030 7047     		bx	lr
 671              	.L25:
 672 0032 00BF     		.align	2
 673              	.L24:
 674 0034 00000000 		.word	g_alternate_interface
 675              		.cfi_endproc
 676              	.LFE2:
 678              		.section	.text.USB_Desc_Valid_Configation,"ax",%progbits
 679              		.align	2
 680              		.global	USB_Desc_Valid_Configation
 681              		.thumb
 682              		.thumb_func
 684              	USB_Desc_Valid_Configation:
 685              	.LFB3:
 632:../Generated_Code/usb_descriptor.c **** 
 633:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 634:../Generated_Code/usb_descriptor.c ****  *
 635:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Valid_Configation
 636:../Generated_Code/usb_descriptor.c ****  *
 637:../Generated_Code/usb_descriptor.c ****  * @brief The function checks whether the configuration parameter
 638:../Generated_Code/usb_descriptor.c ****  *        input is valid or not
 639:../Generated_Code/usb_descriptor.c ****  *
 640:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller Id
 641:../Generated_Code/usb_descriptor.c ****  * @param config_val    : Configuration value
 642:../Generated_Code/usb_descriptor.c ****  *
 643:../Generated_Code/usb_descriptor.c ****  * @return TRUE           When Valid
 644:../Generated_Code/usb_descriptor.c ****  *         FALSE          When Error
 645:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 646:../Generated_Code/usb_descriptor.c ****  * This function checks whether the configuration is valid or not
 647:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 648:../Generated_Code/usb_descriptor.c **** boolean USB_Desc_Valid_Configation (
 649:../Generated_Code/usb_descriptor.c ****       uint_8 controller_ID,/*[IN] Controller ID */
 650:../Generated_Code/usb_descriptor.c ****       uint_16 config_val   /*[IN] configuration value */
 651:../Generated_Code/usb_descriptor.c **** )
 652:../Generated_Code/usb_descriptor.c **** {
 686              		.loc 1 652 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 16
 689              		@ frame_needed = 1, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 691 0000 80B4     		push	{r7}
 692              		.cfi_def_cfa_offset 4
 693              		.cfi_offset 7, -4
 694 0002 85B0     		sub	sp, sp, #20
 695              		.cfi_def_cfa_offset 24
 696 0004 00AF     		add	r7, sp, #0
 697              		.cfi_def_cfa_register 7
 698 0006 0246     		mov	r2, r0
 699 0008 0B46     		mov	r3, r1
 700 000a FA71     		strb	r2, [r7, #7]
 701 000c BB80     		strh	r3, [r7, #4]	@ movhi
 653:../Generated_Code/usb_descriptor.c ****     uint_8 loop_index=0;
 702              		.loc 1 653 0
 703 000e 0023     		movs	r3, #0
 704 0010 FB73     		strb	r3, [r7, #15]
 654:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 655:../Generated_Code/usb_descriptor.c **** 
 656:../Generated_Code/usb_descriptor.c ****     /* check with only supported val right now */
 657:../Generated_Code/usb_descriptor.c ****     while(loop_index < (USB_MAX_CONFIG_SUPPORTED+1))
 705              		.loc 1 657 0
 706 0012 0AE0     		b	.L27
 707              	.L30:
 658:../Generated_Code/usb_descriptor.c ****     {
 659:../Generated_Code/usb_descriptor.c ****         if(config_val == g_valid_config_values[loop_index])
 708              		.loc 1 659 0
 709 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 710 0016 0A4A     		ldr	r2, .L31
 711 0018 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 712 001a BA88     		ldrh	r2, [r7, #4]
 713 001c 9A42     		cmp	r2, r3
 714 001e 01D1     		bne	.L28
 660:../Generated_Code/usb_descriptor.c ****         {
 661:../Generated_Code/usb_descriptor.c ****             return TRUE;
 715              		.loc 1 661 0
 716 0020 0123     		movs	r3, #1
 717 0022 06E0     		b	.L29
 718              	.L28:
 662:../Generated_Code/usb_descriptor.c ****         }
 663:../Generated_Code/usb_descriptor.c ****         loop_index++;
 719              		.loc 1 663 0
 720 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 721 0026 0133     		adds	r3, r3, #1
 722 0028 FB73     		strb	r3, [r7, #15]
 723              	.L27:
 657:../Generated_Code/usb_descriptor.c ****     while(loop_index < (USB_MAX_CONFIG_SUPPORTED+1))
 724              		.loc 1 657 0 discriminator 1
 725 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 726 002c 012B     		cmp	r3, #1
 727 002e F1D9     		bls	.L30
 664:../Generated_Code/usb_descriptor.c ****     }
 665:../Generated_Code/usb_descriptor.c **** 
 666:../Generated_Code/usb_descriptor.c ****     return FALSE;
 728              		.loc 1 666 0
 729 0030 0023     		movs	r3, #0
 730              	.L29:
 667:../Generated_Code/usb_descriptor.c **** }
 731              		.loc 1 667 0
 732 0032 1846     		mov	r0, r3
 733 0034 1437     		adds	r7, r7, #20
 734 0036 BD46     		mov	sp, r7
 735              		@ sp needed
 736 0038 5DF8047B 		ldr	r7, [sp], #4
 737 003c 7047     		bx	lr
 738              	.L32:
 739 003e 00BF     		.align	2
 740              	.L31:
 741 0040 00000000 		.word	g_valid_config_values
 742              		.cfi_endproc
 743              	.LFE3:
 745              		.section	.text.USB_Desc_Valid_Interface,"ax",%progbits
 746              		.align	2
 747              		.global	USB_Desc_Valid_Interface
 748              		.thumb
 749              		.thumb_func
 751              	USB_Desc_Valid_Interface:
 752              	.LFB4:
 668:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 669:../Generated_Code/usb_descriptor.c ****  *
 670:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Valid_Interface
 671:../Generated_Code/usb_descriptor.c ****  *
 672:../Generated_Code/usb_descriptor.c ****  * @brief The function checks whether the interface parameter
 673:../Generated_Code/usb_descriptor.c ****  *        input is valid or not
 674:../Generated_Code/usb_descriptor.c ****  *
 675:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller Id
 676:../Generated_Code/usb_descriptor.c ****  * @param interface     : Target interface
 677:../Generated_Code/usb_descriptor.c ****  *
 678:../Generated_Code/usb_descriptor.c ****  * @return TRUE           When Valid
 679:../Generated_Code/usb_descriptor.c ****  *         FALSE          When Error
 680:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 681:../Generated_Code/usb_descriptor.c ****  * This function checks whether the interface is valid or not
 682:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 683:../Generated_Code/usb_descriptor.c **** boolean USB_Desc_Valid_Interface (
 684:../Generated_Code/usb_descriptor.c ****       uint_8 controller_ID, /*[IN] Controller ID */
 685:../Generated_Code/usb_descriptor.c ****       uint_8 interface      /*[IN] target interface */
 686:../Generated_Code/usb_descriptor.c **** )
 687:../Generated_Code/usb_descriptor.c **** {
 753              		.loc 1 687 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 16
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 758 0000 80B4     		push	{r7}
 759              		.cfi_def_cfa_offset 4
 760              		.cfi_offset 7, -4
 761 0002 85B0     		sub	sp, sp, #20
 762              		.cfi_def_cfa_offset 24
 763 0004 00AF     		add	r7, sp, #0
 764              		.cfi_def_cfa_register 7
 765 0006 0246     		mov	r2, r0
 766 0008 0B46     		mov	r3, r1
 767 000a FA71     		strb	r2, [r7, #7]
 768 000c BB71     		strb	r3, [r7, #6]
 688:../Generated_Code/usb_descriptor.c ****     uint_8 loop_index=0;
 769              		.loc 1 688 0
 770 000e 0023     		movs	r3, #0
 771 0010 FB73     		strb	r3, [r7, #15]
 689:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 690:../Generated_Code/usb_descriptor.c **** 
 691:../Generated_Code/usb_descriptor.c ****     /* check with only supported val right now */
 692:../Generated_Code/usb_descriptor.c ****     while(loop_index < USB_MAX_SUPPORTED_INTERFACES)
 772              		.loc 1 692 0
 773 0012 0AE0     		b	.L34
 774              	.L37:
 693:../Generated_Code/usb_descriptor.c ****     {
 694:../Generated_Code/usb_descriptor.c ****         if(interface == g_alternate_interface[loop_index])
 775              		.loc 1 694 0
 776 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 777 0016 0A4A     		ldr	r2, .L38
 778 0018 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 779 001a BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 780 001c 9A42     		cmp	r2, r3
 781 001e 01D1     		bne	.L35
 695:../Generated_Code/usb_descriptor.c ****         {
 696:../Generated_Code/usb_descriptor.c ****             return TRUE;
 782              		.loc 1 696 0
 783 0020 0123     		movs	r3, #1
 784 0022 06E0     		b	.L36
 785              	.L35:
 697:../Generated_Code/usb_descriptor.c ****         }
 698:../Generated_Code/usb_descriptor.c ****         loop_index++;
 786              		.loc 1 698 0
 787 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 788 0026 0133     		adds	r3, r3, #1
 789 0028 FB73     		strb	r3, [r7, #15]
 790              	.L34:
 692:../Generated_Code/usb_descriptor.c ****     while(loop_index < USB_MAX_SUPPORTED_INTERFACES)
 791              		.loc 1 692 0 discriminator 1
 792 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 793 002c 012B     		cmp	r3, #1
 794 002e F1D9     		bls	.L37
 699:../Generated_Code/usb_descriptor.c ****     }
 700:../Generated_Code/usb_descriptor.c **** 
 701:../Generated_Code/usb_descriptor.c ****     return FALSE;
 795              		.loc 1 701 0
 796 0030 0023     		movs	r3, #0
 797              	.L36:
 702:../Generated_Code/usb_descriptor.c **** }
 798              		.loc 1 702 0
 799 0032 1846     		mov	r0, r3
 800 0034 1437     		adds	r7, r7, #20
 801 0036 BD46     		mov	sp, r7
 802              		@ sp needed
 803 0038 5DF8047B 		ldr	r7, [sp], #4
 804 003c 7047     		bx	lr
 805              	.L39:
 806 003e 00BF     		.align	2
 807              	.L38:
 808 0040 00000000 		.word	g_alternate_interface
 809              		.cfi_endproc
 810              	.LFE4:
 812              		.section	.text.USB_Desc_Remote_Wakeup,"ax",%progbits
 813              		.align	2
 814              		.global	USB_Desc_Remote_Wakeup
 815              		.thumb
 816              		.thumb_func
 818              	USB_Desc_Remote_Wakeup:
 819              	.LFB5:
 703:../Generated_Code/usb_descriptor.c **** 
 704:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 705:../Generated_Code/usb_descriptor.c ****  *
 706:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Remote_Wakeup
 707:../Generated_Code/usb_descriptor.c ****  *
 708:../Generated_Code/usb_descriptor.c ****  * @brief The function checks whether the remote wakeup is supported or not
 709:../Generated_Code/usb_descriptor.c ****  *
 710:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller ID
 711:../Generated_Code/usb_descriptor.c ****  *
 712:../Generated_Code/usb_descriptor.c ****  * @return REMOTE_WAKEUP_SUPPORT (TRUE) - if remote wakeup supported
 713:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 714:../Generated_Code/usb_descriptor.c ****  * This function returns remote wakeup is supported or not
 715:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 716:../Generated_Code/usb_descriptor.c **** boolean USB_Desc_Remote_Wakeup (
 717:../Generated_Code/usb_descriptor.c ****       uint_8 controller_ID  /* [IN] Controller ID */
 718:../Generated_Code/usb_descriptor.c **** )
 719:../Generated_Code/usb_descriptor.c **** {
 820              		.loc 1 719 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 8
 823              		@ frame_needed = 1, uses_anonymous_args = 0
 824              		@ link register save eliminated.
 825 0000 80B4     		push	{r7}
 826              		.cfi_def_cfa_offset 4
 827              		.cfi_offset 7, -4
 828 0002 83B0     		sub	sp, sp, #12
 829              		.cfi_def_cfa_offset 16
 830 0004 00AF     		add	r7, sp, #0
 831              		.cfi_def_cfa_register 7
 832 0006 0346     		mov	r3, r0
 833 0008 FB71     		strb	r3, [r7, #7]
 720:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 721:../Generated_Code/usb_descriptor.c ****     return REMOTE_WAKEUP_SUPPORT;
 834              		.loc 1 721 0
 835 000a 0023     		movs	r3, #0
 722:../Generated_Code/usb_descriptor.c **** }
 836              		.loc 1 722 0
 837 000c 1846     		mov	r0, r3
 838 000e 0C37     		adds	r7, r7, #12
 839 0010 BD46     		mov	sp, r7
 840              		@ sp needed
 841 0012 5DF8047B 		ldr	r7, [sp], #4
 842 0016 7047     		bx	lr
 843              		.cfi_endproc
 844              	.LFE5:
 846              		.section	.text.USB_Desc_Get_Endpoints,"ax",%progbits
 847              		.align	2
 848              		.global	USB_Desc_Get_Endpoints
 849              		.thumb
 850              		.thumb_func
 852              	USB_Desc_Get_Endpoints:
 853              	.LFB6:
 723:../Generated_Code/usb_descriptor.c **** 
 724:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 725:../Generated_Code/usb_descriptor.c ****  *
 726:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Get_Endpoints
 727:../Generated_Code/usb_descriptor.c ****  *
 728:../Generated_Code/usb_descriptor.c ****  * @brief The function returns with the list of all non control endpoints used
 729:../Generated_Code/usb_descriptor.c ****  *
 730:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller ID
 731:../Generated_Code/usb_descriptor.c ****  *
 732:../Generated_Code/usb_descriptor.c ****  * @return pointer to USB_ENDPOINTS
 733:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 734:../Generated_Code/usb_descriptor.c ****  * This function returns the information about all the non control endpoints
 735:../Generated_Code/usb_descriptor.c ****  * implemented
 736:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 737:../Generated_Code/usb_descriptor.c **** void* USB_Desc_Get_Endpoints (
 738:../Generated_Code/usb_descriptor.c ****       uint_8 controller_ID  /* [IN] Controller ID */
 739:../Generated_Code/usb_descriptor.c **** )
 740:../Generated_Code/usb_descriptor.c **** {
 854              		.loc 1 740 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 8
 857              		@ frame_needed = 1, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859 0000 80B4     		push	{r7}
 860              		.cfi_def_cfa_offset 4
 861              		.cfi_offset 7, -4
 862 0002 83B0     		sub	sp, sp, #12
 863              		.cfi_def_cfa_offset 16
 864 0004 00AF     		add	r7, sp, #0
 865              		.cfi_def_cfa_register 7
 866 0006 0346     		mov	r3, r0
 867 0008 FB71     		strb	r3, [r7, #7]
 741:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 742:../Generated_Code/usb_descriptor.c ****     return (void*)&usb_desc_ep;
 868              		.loc 1 742 0
 869 000a 034B     		ldr	r3, .L44
 743:../Generated_Code/usb_descriptor.c **** }
 870              		.loc 1 743 0
 871 000c 1846     		mov	r0, r3
 872 000e 0C37     		adds	r7, r7, #12
 873 0010 BD46     		mov	sp, r7
 874              		@ sp needed
 875 0012 5DF8047B 		ldr	r7, [sp], #4
 876 0016 7047     		bx	lr
 877              	.L45:
 878              		.align	2
 879              	.L44:
 880 0018 00000000 		.word	usb_desc_ep
 881              		.cfi_endproc
 882              	.LFE6:
 884              		.section	.text.USB_Desc_Get_Line_Coding,"ax",%progbits
 885              		.align	2
 886              		.global	USB_Desc_Get_Line_Coding
 887              		.thumb
 888              		.thumb_func
 890              	USB_Desc_Get_Line_Coding:
 891              	.LFB7:
 744:../Generated_Code/usb_descriptor.c **** 
 745:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 746:../Generated_Code/usb_descriptor.c ****  *
 747:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Get_Line_Coding
 748:../Generated_Code/usb_descriptor.c ****  *
 749:../Generated_Code/usb_descriptor.c ****  * @brief The function returns the Line Coding/Configuraion
 750:../Generated_Code/usb_descriptor.c ****  *
 751:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller ID
 752:../Generated_Code/usb_descriptor.c ****  * @param interface     : Interface number
 753:../Generated_Code/usb_descriptor.c ****  * @param coding_data   : Output line coding data
 754:../Generated_Code/usb_descriptor.c ****  *
 755:../Generated_Code/usb_descriptor.c ****  * @return USB_OK                              When Successfull
 756:../Generated_Code/usb_descriptor.c ****  *         USBERR_INVALID_REQ_TYPE             when Error
 757:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 758:../Generated_Code/usb_descriptor.c ****  * Returns current Line Coding Parameters
 759:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 760:../Generated_Code/usb_descriptor.c **** uint_8 USB_Desc_Get_Line_Coding (
 761:../Generated_Code/usb_descriptor.c ****     uint_8 controller_ID,       /* [IN] Controller ID */
 762:../Generated_Code/usb_descriptor.c ****     uint_8 interface,           /* [IN] Interface Number */
 763:../Generated_Code/usb_descriptor.c ****     uint_8_ptr *coding_data     /* [OUT] Line Coding Data */
 764:../Generated_Code/usb_descriptor.c **** )
 765:../Generated_Code/usb_descriptor.c **** {
 892              		.loc 1 765 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 8
 895              		@ frame_needed = 1, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 897 0000 80B4     		push	{r7}
 898              		.cfi_def_cfa_offset 4
 899              		.cfi_offset 7, -4
 900 0002 83B0     		sub	sp, sp, #12
 901              		.cfi_def_cfa_offset 16
 902 0004 00AF     		add	r7, sp, #0
 903              		.cfi_def_cfa_register 7
 904 0006 0B46     		mov	r3, r1
 905 0008 3A60     		str	r2, [r7]
 906 000a 0246     		mov	r2, r0
 907 000c FA71     		strb	r2, [r7, #7]
 908 000e BB71     		strb	r3, [r7, #6]
 766:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 767:../Generated_Code/usb_descriptor.c ****     /* if interface valid */
 768:../Generated_Code/usb_descriptor.c ****     if(interface < USB_MAX_SUPPORTED_INTERFACES)
 909              		.loc 1 768 0
 910 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 911 0012 012B     		cmp	r3, #1
 912 0014 09D8     		bhi	.L47
 769:../Generated_Code/usb_descriptor.c ****     {
 770:../Generated_Code/usb_descriptor.c ****         /* get line coding data*/
 771:../Generated_Code/usb_descriptor.c ****         *coding_data = g_line_coding[interface];
 913              		.loc 1 771 0
 914 0016 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 915 0018 1346     		mov	r3, r2
 916 001a DB00     		lsls	r3, r3, #3
 917 001c 9B1A     		subs	r3, r3, r2
 918 001e 064A     		ldr	r2, .L49
 919 0020 1A44     		add	r2, r2, r3
 920 0022 3B68     		ldr	r3, [r7]
 921 0024 1A60     		str	r2, [r3]
 772:../Generated_Code/usb_descriptor.c ****         return USB_OK;
 922              		.loc 1 772 0
 923 0026 0023     		movs	r3, #0
 924 0028 00E0     		b	.L48
 925              	.L47:
 773:../Generated_Code/usb_descriptor.c ****     }
 774:../Generated_Code/usb_descriptor.c **** 
 775:../Generated_Code/usb_descriptor.c ****     return USBERR_INVALID_REQ_TYPE;
 926              		.loc 1 775 0
 927 002a CD23     		movs	r3, #205
 928              	.L48:
 776:../Generated_Code/usb_descriptor.c **** }
 929              		.loc 1 776 0
 930 002c 1846     		mov	r0, r3
 931 002e 0C37     		adds	r7, r7, #12
 932 0030 BD46     		mov	sp, r7
 933              		@ sp needed
 934 0032 5DF8047B 		ldr	r7, [sp], #4
 935 0036 7047     		bx	lr
 936              	.L50:
 937              		.align	2
 938              	.L49:
 939 0038 00000000 		.word	g_line_coding
 940              		.cfi_endproc
 941              	.LFE7:
 943              		.section	.text.USB_Desc_Set_Line_Coding,"ax",%progbits
 944              		.align	2
 945              		.global	USB_Desc_Set_Line_Coding
 946              		.thumb
 947              		.thumb_func
 949              	USB_Desc_Set_Line_Coding:
 950              	.LFB8:
 777:../Generated_Code/usb_descriptor.c **** 
 778:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 779:../Generated_Code/usb_descriptor.c ****  *
 780:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Set_Line_Coding
 781:../Generated_Code/usb_descriptor.c ****  *
 782:../Generated_Code/usb_descriptor.c ****  * @brief The function sets the Line Coding/Configuraion
 783:../Generated_Code/usb_descriptor.c ****  *
 784:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller ID
 785:../Generated_Code/usb_descriptor.c ****  * @param interface     : Interface number
 786:../Generated_Code/usb_descriptor.c ****  * @param coding_data   : Output line coding data
 787:../Generated_Code/usb_descriptor.c ****  *
 788:../Generated_Code/usb_descriptor.c ****  * @return USB_OK                              When Successfull
 789:../Generated_Code/usb_descriptor.c ****  *         USBERR_INVALID_REQ_TYPE             when Error
 790:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 791:../Generated_Code/usb_descriptor.c ****  * Sets Line Coding Structure with the HOST specified values
 792:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 793:../Generated_Code/usb_descriptor.c **** uint_8 USB_Desc_Set_Line_Coding (
 794:../Generated_Code/usb_descriptor.c ****     uint_8 controller_ID,       /* [IN] Controller ID */
 795:../Generated_Code/usb_descriptor.c ****     uint_8 interface,           /* [IN] Interface Number */
 796:../Generated_Code/usb_descriptor.c ****     uint_8_ptr *coding_data     /* [IN] Line Coding Data */
 797:../Generated_Code/usb_descriptor.c **** )
 798:../Generated_Code/usb_descriptor.c **** {
 951              		.loc 1 798 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 16
 954              		@ frame_needed = 1, uses_anonymous_args = 0
 955              		@ link register save eliminated.
 956 0000 90B4     		push	{r4, r7}
 957              		.cfi_def_cfa_offset 8
 958              		.cfi_offset 4, -8
 959              		.cfi_offset 7, -4
 960 0002 84B0     		sub	sp, sp, #16
 961              		.cfi_def_cfa_offset 24
 962 0004 00AF     		add	r7, sp, #0
 963              		.cfi_def_cfa_register 7
 964 0006 0B46     		mov	r3, r1
 965 0008 3A60     		str	r2, [r7]
 966 000a 0246     		mov	r2, r0
 967 000c FA71     		strb	r2, [r7, #7]
 968 000e BB71     		strb	r3, [r7, #6]
 799:../Generated_Code/usb_descriptor.c ****     uint_8 count;
 800:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 801:../Generated_Code/usb_descriptor.c **** 
 802:../Generated_Code/usb_descriptor.c ****     /* if interface valid */
 803:../Generated_Code/usb_descriptor.c ****     if(interface < USB_MAX_SUPPORTED_INTERFACES)
 969              		.loc 1 803 0
 970 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 971 0012 012B     		cmp	r3, #1
 972 0014 1AD8     		bhi	.L52
 804:../Generated_Code/usb_descriptor.c ****     {
 805:../Generated_Code/usb_descriptor.c ****         /* set line coding data*/
 806:../Generated_Code/usb_descriptor.c ****         for (count = 0; count < LINE_CODING_SIZE; count++)
 973              		.loc 1 806 0
 974 0016 0023     		movs	r3, #0
 975 0018 FB73     		strb	r3, [r7, #15]
 976 001a 12E0     		b	.L53
 977              	.L54:
 807:../Generated_Code/usb_descriptor.c ****         {
 808:../Generated_Code/usb_descriptor.c ****             g_line_coding[interface][count] = *((*coding_data +
 978              		.loc 1 808 0 discriminator 2
 979 001c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 980 001e FC7B     		ldrb	r4, [r7, #15]	@ zero_extendqisi2
 981 0020 3B68     		ldr	r3, [r7]
 982 0022 1968     		ldr	r1, [r3]
 809:../Generated_Code/usb_descriptor.c ****                                                 USB_SETUP_PKT_SIZE) + count);
 983              		.loc 1 809 0 discriminator 2
 984 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 985 0026 0833     		adds	r3, r3, #8
 986 0028 0B44     		add	r3, r3, r1
 808:../Generated_Code/usb_descriptor.c ****             g_line_coding[interface][count] = *((*coding_data +
 987              		.loc 1 808 0 discriminator 2
 988 002a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 989 002c 0A48     		ldr	r0, .L56
 990 002e 1346     		mov	r3, r2
 991 0030 DB00     		lsls	r3, r3, #3
 992 0032 9B1A     		subs	r3, r3, r2
 993 0034 2344     		add	r3, r3, r4
 994 0036 0344     		add	r3, r3, r0
 995 0038 0A46     		mov	r2, r1
 996 003a 1A70     		strb	r2, [r3]
 806:../Generated_Code/usb_descriptor.c ****         for (count = 0; count < LINE_CODING_SIZE; count++)
 997              		.loc 1 806 0 discriminator 2
 998 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 999 003e 0133     		adds	r3, r3, #1
 1000 0040 FB73     		strb	r3, [r7, #15]
 1001              	.L53:
 806:../Generated_Code/usb_descriptor.c ****         for (count = 0; count < LINE_CODING_SIZE; count++)
 1002              		.loc 1 806 0 is_stmt 0 discriminator 1
 1003 0042 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1004 0044 062B     		cmp	r3, #6
 1005 0046 E9D9     		bls	.L54
 810:../Generated_Code/usb_descriptor.c ****         }
 811:../Generated_Code/usb_descriptor.c ****         return USB_OK;
 1006              		.loc 1 811 0 is_stmt 1
 1007 0048 0023     		movs	r3, #0
 1008 004a 00E0     		b	.L55
 1009              	.L52:
 812:../Generated_Code/usb_descriptor.c ****     }
 813:../Generated_Code/usb_descriptor.c **** 
 814:../Generated_Code/usb_descriptor.c ****     return USBERR_INVALID_REQ_TYPE;
 1010              		.loc 1 814 0
 1011 004c CD23     		movs	r3, #205
 1012              	.L55:
 815:../Generated_Code/usb_descriptor.c **** }
 1013              		.loc 1 815 0
 1014 004e 1846     		mov	r0, r3
 1015 0050 1037     		adds	r7, r7, #16
 1016 0052 BD46     		mov	sp, r7
 1017              		@ sp needed
 1018 0054 90BC     		pop	{r4, r7}
 1019 0056 7047     		bx	lr
 1020              	.L57:
 1021              		.align	2
 1022              	.L56:
 1023 0058 00000000 		.word	g_line_coding
 1024              		.cfi_endproc
 1025              	.LFE8:
 1027              		.section	.text.USB_Desc_Get_Abstract_State,"ax",%progbits
 1028              		.align	2
 1029              		.global	USB_Desc_Get_Abstract_State
 1030              		.thumb
 1031              		.thumb_func
 1033              	USB_Desc_Get_Abstract_State:
 1034              	.LFB9:
 816:../Generated_Code/usb_descriptor.c **** 
 817:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 818:../Generated_Code/usb_descriptor.c ****  *
 819:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Get_Abstract_State
 820:../Generated_Code/usb_descriptor.c ****  *
 821:../Generated_Code/usb_descriptor.c ****  * @brief The function gets the current setting for communication feature
 822:../Generated_Code/usb_descriptor.c ****  *                                                  (ABSTRACT_STATE)
 823:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller ID
 824:../Generated_Code/usb_descriptor.c ****  * @param interface     : Interface number
 825:../Generated_Code/usb_descriptor.c ****  * @param feature_data  : Output comm feature data
 826:../Generated_Code/usb_descriptor.c ****  *
 827:../Generated_Code/usb_descriptor.c ****  * @return USB_OK                              When Successfull
 828:../Generated_Code/usb_descriptor.c ****  *         USBERR_INVALID_REQ_TYPE             when Error
 829:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 830:../Generated_Code/usb_descriptor.c ****  * Returns ABSTRACT STATE Communication Feature to the Host
 831:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 832:../Generated_Code/usb_descriptor.c **** uint_8 USB_Desc_Get_Abstract_State (
 833:../Generated_Code/usb_descriptor.c ****     uint_8 controller_ID,       /* [IN] Controller ID */
 834:../Generated_Code/usb_descriptor.c ****     uint_8 interface,           /* [IN] Interface Number */
 835:../Generated_Code/usb_descriptor.c ****     uint_8_ptr *feature_data    /* [OUT] Output Comm Feature Data */
 836:../Generated_Code/usb_descriptor.c **** )
 837:../Generated_Code/usb_descriptor.c **** {
 1035              		.loc 1 837 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 8
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 1040 0000 80B4     		push	{r7}
 1041              		.cfi_def_cfa_offset 4
 1042              		.cfi_offset 7, -4
 1043 0002 83B0     		sub	sp, sp, #12
 1044              		.cfi_def_cfa_offset 16
 1045 0004 00AF     		add	r7, sp, #0
 1046              		.cfi_def_cfa_register 7
 1047 0006 0B46     		mov	r3, r1
 1048 0008 3A60     		str	r2, [r7]
 1049 000a 0246     		mov	r2, r0
 1050 000c FA71     		strb	r2, [r7, #7]
 1051 000e BB71     		strb	r3, [r7, #6]
 838:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 839:../Generated_Code/usb_descriptor.c ****     /* if interface valid */
 840:../Generated_Code/usb_descriptor.c ****     if(interface < USB_MAX_SUPPORTED_INTERFACES)
 1052              		.loc 1 840 0
 1053 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1054 0012 012B     		cmp	r3, #1
 1055 0014 07D8     		bhi	.L59
 841:../Generated_Code/usb_descriptor.c ****     {
 842:../Generated_Code/usb_descriptor.c ****         /* get line coding data*/
 843:../Generated_Code/usb_descriptor.c ****         *feature_data = g_abstract_state[interface];
 1056              		.loc 1 843 0
 1057 0016 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1058 0018 5A00     		lsls	r2, r3, #1
 1059 001a 064B     		ldr	r3, .L61
 1060 001c 1A44     		add	r2, r2, r3
 1061 001e 3B68     		ldr	r3, [r7]
 1062 0020 1A60     		str	r2, [r3]
 844:../Generated_Code/usb_descriptor.c ****         return USB_OK;
 1063              		.loc 1 844 0
 1064 0022 0023     		movs	r3, #0
 1065 0024 00E0     		b	.L60
 1066              	.L59:
 845:../Generated_Code/usb_descriptor.c ****     }
 846:../Generated_Code/usb_descriptor.c **** 
 847:../Generated_Code/usb_descriptor.c ****     return USBERR_INVALID_REQ_TYPE;
 1067              		.loc 1 847 0
 1068 0026 CD23     		movs	r3, #205
 1069              	.L60:
 848:../Generated_Code/usb_descriptor.c **** }
 1070              		.loc 1 848 0
 1071 0028 1846     		mov	r0, r3
 1072 002a 0C37     		adds	r7, r7, #12
 1073 002c BD46     		mov	sp, r7
 1074              		@ sp needed
 1075 002e 5DF8047B 		ldr	r7, [sp], #4
 1076 0032 7047     		bx	lr
 1077              	.L62:
 1078              		.align	2
 1079              	.L61:
 1080 0034 00000000 		.word	g_abstract_state
 1081              		.cfi_endproc
 1082              	.LFE9:
 1084              		.section	.text.USB_Desc_Get_Country_Setting,"ax",%progbits
 1085              		.align	2
 1086              		.global	USB_Desc_Get_Country_Setting
 1087              		.thumb
 1088              		.thumb_func
 1090              	USB_Desc_Get_Country_Setting:
 1091              	.LFB10:
 849:../Generated_Code/usb_descriptor.c **** 
 850:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 851:../Generated_Code/usb_descriptor.c ****  *
 852:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Get_Country_Setting
 853:../Generated_Code/usb_descriptor.c ****  *
 854:../Generated_Code/usb_descriptor.c ****  * @brief The function gets the current setting for communication feature
 855:../Generated_Code/usb_descriptor.c ****  *                                                  (COUNTRY_CODE)
 856:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller ID
 857:../Generated_Code/usb_descriptor.c ****  * @param interface     : Interface number
 858:../Generated_Code/usb_descriptor.c ****  * @param feature_data  : Output comm feature data
 859:../Generated_Code/usb_descriptor.c ****  *
 860:../Generated_Code/usb_descriptor.c ****  * @return USB_OK                              When Successfull
 861:../Generated_Code/usb_descriptor.c ****  *         USBERR_INVALID_REQ_TYPE             when Error
 862:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 863:../Generated_Code/usb_descriptor.c ****  * Returns the country Code to the Host
 864:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 865:../Generated_Code/usb_descriptor.c **** uint_8 USB_Desc_Get_Country_Setting (
 866:../Generated_Code/usb_descriptor.c ****     uint_8 controller_ID,       /* [IN] Controller ID */
 867:../Generated_Code/usb_descriptor.c ****     uint_8 interface,           /* [IN] Interface Number */
 868:../Generated_Code/usb_descriptor.c ****     uint_8_ptr *feature_data    /* [OUT] Output Comm Feature Data */
 869:../Generated_Code/usb_descriptor.c **** )
 870:../Generated_Code/usb_descriptor.c **** {
 1092              		.loc 1 870 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096              		@ link register save eliminated.
 1097 0000 80B4     		push	{r7}
 1098              		.cfi_def_cfa_offset 4
 1099              		.cfi_offset 7, -4
 1100 0002 83B0     		sub	sp, sp, #12
 1101              		.cfi_def_cfa_offset 16
 1102 0004 00AF     		add	r7, sp, #0
 1103              		.cfi_def_cfa_register 7
 1104 0006 0B46     		mov	r3, r1
 1105 0008 3A60     		str	r2, [r7]
 1106 000a 0246     		mov	r2, r0
 1107 000c FA71     		strb	r2, [r7, #7]
 1108 000e BB71     		strb	r3, [r7, #6]
 871:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 872:../Generated_Code/usb_descriptor.c ****     /* if interface valid */
 873:../Generated_Code/usb_descriptor.c ****     if(interface < USB_MAX_SUPPORTED_INTERFACES)
 1109              		.loc 1 873 0
 1110 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1111 0012 012B     		cmp	r3, #1
 1112 0014 07D8     		bhi	.L64
 874:../Generated_Code/usb_descriptor.c ****     {
 875:../Generated_Code/usb_descriptor.c ****         /* get line coding data*/
 876:../Generated_Code/usb_descriptor.c ****         *feature_data = g_country_code[interface];
 1113              		.loc 1 876 0
 1114 0016 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1115 0018 5A00     		lsls	r2, r3, #1
 1116 001a 064B     		ldr	r3, .L66
 1117 001c 1A44     		add	r2, r2, r3
 1118 001e 3B68     		ldr	r3, [r7]
 1119 0020 1A60     		str	r2, [r3]
 877:../Generated_Code/usb_descriptor.c ****         return USB_OK;
 1120              		.loc 1 877 0
 1121 0022 0023     		movs	r3, #0
 1122 0024 00E0     		b	.L65
 1123              	.L64:
 878:../Generated_Code/usb_descriptor.c ****     }
 879:../Generated_Code/usb_descriptor.c **** 
 880:../Generated_Code/usb_descriptor.c ****     return USBERR_INVALID_REQ_TYPE;
 1124              		.loc 1 880 0
 1125 0026 CD23     		movs	r3, #205
 1126              	.L65:
 881:../Generated_Code/usb_descriptor.c **** }
 1127              		.loc 1 881 0
 1128 0028 1846     		mov	r0, r3
 1129 002a 0C37     		adds	r7, r7, #12
 1130 002c BD46     		mov	sp, r7
 1131              		@ sp needed
 1132 002e 5DF8047B 		ldr	r7, [sp], #4
 1133 0032 7047     		bx	lr
 1134              	.L67:
 1135              		.align	2
 1136              	.L66:
 1137 0034 00000000 		.word	g_country_code
 1138              		.cfi_endproc
 1139              	.LFE10:
 1141              		.section	.text.USB_Desc_Set_Abstract_State,"ax",%progbits
 1142              		.align	2
 1143              		.global	USB_Desc_Set_Abstract_State
 1144              		.thumb
 1145              		.thumb_func
 1147              	USB_Desc_Set_Abstract_State:
 1148              	.LFB11:
 882:../Generated_Code/usb_descriptor.c **** 
 883:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 884:../Generated_Code/usb_descriptor.c ****  *
 885:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Set_Abstract_State
 886:../Generated_Code/usb_descriptor.c ****  *
 887:../Generated_Code/usb_descriptor.c ****  * @brief The function gets the current setting for communication feature
 888:../Generated_Code/usb_descriptor.c ****  *                                                  (ABSTRACT_STATE)
 889:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller ID
 890:../Generated_Code/usb_descriptor.c ****  * @param interface     : Interface number
 891:../Generated_Code/usb_descriptor.c ****  * @param feature_data  : Output comm feature data
 892:../Generated_Code/usb_descriptor.c ****  *
 893:../Generated_Code/usb_descriptor.c ****  * @return USB_OK                              When Successfull
 894:../Generated_Code/usb_descriptor.c ****  *         USBERR_INVALID_REQ_TYPE             when Error
 895:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 896:../Generated_Code/usb_descriptor.c ****  * Sets the ABSTRACT State specified by the Host
 897:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 898:../Generated_Code/usb_descriptor.c **** uint_8 USB_Desc_Set_Abstract_State (
 899:../Generated_Code/usb_descriptor.c ****     uint_8 controller_ID,       /* [IN] Controller ID */
 900:../Generated_Code/usb_descriptor.c ****     uint_8 interface,           /* [IN] Interface Number */
 901:../Generated_Code/usb_descriptor.c ****     uint_8_ptr *feature_data    /* [OUT] Output Comm Feature Data */
 902:../Generated_Code/usb_descriptor.c **** )
 903:../Generated_Code/usb_descriptor.c **** {
 1149              		.loc 1 903 0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 16
 1152              		@ frame_needed = 1, uses_anonymous_args = 0
 1153              		@ link register save eliminated.
 1154 0000 80B4     		push	{r7}
 1155              		.cfi_def_cfa_offset 4
 1156              		.cfi_offset 7, -4
 1157 0002 85B0     		sub	sp, sp, #20
 1158              		.cfi_def_cfa_offset 24
 1159 0004 00AF     		add	r7, sp, #0
 1160              		.cfi_def_cfa_register 7
 1161 0006 0B46     		mov	r3, r1
 1162 0008 3A60     		str	r2, [r7]
 1163 000a 0246     		mov	r2, r0
 1164 000c FA71     		strb	r2, [r7, #7]
 1165 000e BB71     		strb	r3, [r7, #6]
 904:../Generated_Code/usb_descriptor.c ****     uint_8 count;
 905:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 906:../Generated_Code/usb_descriptor.c **** 
 907:../Generated_Code/usb_descriptor.c ****     /* if interface valid */
 908:../Generated_Code/usb_descriptor.c ****     if(interface < USB_MAX_SUPPORTED_INTERFACES)
 1166              		.loc 1 908 0
 1167 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1168 0012 012B     		cmp	r3, #1
 1169 0014 16D8     		bhi	.L69
 909:../Generated_Code/usb_descriptor.c ****     {
 910:../Generated_Code/usb_descriptor.c ****         /* set Abstract State Feature*/
 911:../Generated_Code/usb_descriptor.c ****         for (count = 0; count < COMM_FEATURE_DATA_SIZE; count++)
 1170              		.loc 1 911 0
 1171 0016 0023     		movs	r3, #0
 1172 0018 FB73     		strb	r3, [r7, #15]
 1173 001a 0EE0     		b	.L70
 1174              	.L71:
 912:../Generated_Code/usb_descriptor.c ****         {
 913:../Generated_Code/usb_descriptor.c ****             g_abstract_state[interface][count] = *(*feature_data + count);
 1175              		.loc 1 913 0 discriminator 2
 1176 001c B879     		ldrb	r0, [r7, #6]	@ zero_extendqisi2
 1177 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1178 0020 3A68     		ldr	r2, [r7]
 1179 0022 1168     		ldr	r1, [r2]
 1180 0024 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1181 0026 0A44     		add	r2, r2, r1
 1182 0028 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1183 002a 0A49     		ldr	r1, .L73
 1184 002c 4000     		lsls	r0, r0, #1
 1185 002e 0344     		add	r3, r3, r0
 1186 0030 0B44     		add	r3, r3, r1
 1187 0032 1A70     		strb	r2, [r3]
 911:../Generated_Code/usb_descriptor.c ****         for (count = 0; count < COMM_FEATURE_DATA_SIZE; count++)
 1188              		.loc 1 911 0 discriminator 2
 1189 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1190 0036 0133     		adds	r3, r3, #1
 1191 0038 FB73     		strb	r3, [r7, #15]
 1192              	.L70:
 911:../Generated_Code/usb_descriptor.c ****         for (count = 0; count < COMM_FEATURE_DATA_SIZE; count++)
 1193              		.loc 1 911 0 is_stmt 0 discriminator 1
 1194 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1195 003c 012B     		cmp	r3, #1
 1196 003e EDD9     		bls	.L71
 914:../Generated_Code/usb_descriptor.c ****         }
 915:../Generated_Code/usb_descriptor.c ****         return USB_OK;
 1197              		.loc 1 915 0 is_stmt 1
 1198 0040 0023     		movs	r3, #0
 1199 0042 00E0     		b	.L72
 1200              	.L69:
 916:../Generated_Code/usb_descriptor.c ****     }
 917:../Generated_Code/usb_descriptor.c **** 
 918:../Generated_Code/usb_descriptor.c ****     return USBERR_INVALID_REQ_TYPE;
 1201              		.loc 1 918 0
 1202 0044 CD23     		movs	r3, #205
 1203              	.L72:
 919:../Generated_Code/usb_descriptor.c **** }
 1204              		.loc 1 919 0
 1205 0046 1846     		mov	r0, r3
 1206 0048 1437     		adds	r7, r7, #20
 1207 004a BD46     		mov	sp, r7
 1208              		@ sp needed
 1209 004c 5DF8047B 		ldr	r7, [sp], #4
 1210 0050 7047     		bx	lr
 1211              	.L74:
 1212 0052 00BF     		.align	2
 1213              	.L73:
 1214 0054 00000000 		.word	g_abstract_state
 1215              		.cfi_endproc
 1216              	.LFE11:
 1218              		.section	.text.USB_Desc_Set_Country_Setting,"ax",%progbits
 1219              		.align	2
 1220              		.global	USB_Desc_Set_Country_Setting
 1221              		.thumb
 1222              		.thumb_func
 1224              	USB_Desc_Set_Country_Setting:
 1225              	.LFB12:
 920:../Generated_Code/usb_descriptor.c **** 
 921:../Generated_Code/usb_descriptor.c **** /**************************************************************************//*!
 922:../Generated_Code/usb_descriptor.c ****  *
 923:../Generated_Code/usb_descriptor.c ****  * @name  USB_Desc_Set_Country_Setting
 924:../Generated_Code/usb_descriptor.c ****  *
 925:../Generated_Code/usb_descriptor.c ****  * @brief The function gets the current setting for communication feature
 926:../Generated_Code/usb_descriptor.c ****  *                                                  (COUNTRY_CODE)
 927:../Generated_Code/usb_descriptor.c ****  * @param controller_ID : Controller ID
 928:../Generated_Code/usb_descriptor.c ****  * @param interface     : Interface number
 929:../Generated_Code/usb_descriptor.c ****  * @param feature_data  : Output comm feature data
 930:../Generated_Code/usb_descriptor.c ****  *
 931:../Generated_Code/usb_descriptor.c ****  * @return USB_OK                              When Successfull
 932:../Generated_Code/usb_descriptor.c ****  *         USBERR_INVALID_REQ_TYPE             when Error
 933:../Generated_Code/usb_descriptor.c ****  *****************************************************************************
 934:../Generated_Code/usb_descriptor.c ****  * Sets the country code specified by the HOST
 935:../Generated_Code/usb_descriptor.c ****  *****************************************************************************/
 936:../Generated_Code/usb_descriptor.c **** uint_8 USB_Desc_Set_Country_Setting(
 937:../Generated_Code/usb_descriptor.c ****     uint_8 controller_ID,       /* [IN] Controller ID */
 938:../Generated_Code/usb_descriptor.c ****     uint_8 interface,           /* [IN] Interface Number */
 939:../Generated_Code/usb_descriptor.c ****     uint_8_ptr *feature_data    /* [OUT] Output Comm Feature Data */
 940:../Generated_Code/usb_descriptor.c **** )
 941:../Generated_Code/usb_descriptor.c **** {
 1226              		.loc 1 941 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 16
 1229              		@ frame_needed = 1, uses_anonymous_args = 0
 1230              		@ link register save eliminated.
 1231 0000 80B4     		push	{r7}
 1232              		.cfi_def_cfa_offset 4
 1233              		.cfi_offset 7, -4
 1234 0002 85B0     		sub	sp, sp, #20
 1235              		.cfi_def_cfa_offset 24
 1236 0004 00AF     		add	r7, sp, #0
 1237              		.cfi_def_cfa_register 7
 1238 0006 0B46     		mov	r3, r1
 1239 0008 3A60     		str	r2, [r7]
 1240 000a 0246     		mov	r2, r0
 1241 000c FA71     		strb	r2, [r7, #7]
 1242 000e BB71     		strb	r3, [r7, #6]
 942:../Generated_Code/usb_descriptor.c ****     uint_8 count;
 943:../Generated_Code/usb_descriptor.c ****     UNUSED (controller_ID)
 944:../Generated_Code/usb_descriptor.c **** 
 945:../Generated_Code/usb_descriptor.c ****     /* if interface valid */
 946:../Generated_Code/usb_descriptor.c ****     if(interface < USB_MAX_SUPPORTED_INTERFACES)
 1243              		.loc 1 946 0
 1244 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1245 0012 012B     		cmp	r3, #1
 1246 0014 16D8     		bhi	.L76
 947:../Generated_Code/usb_descriptor.c ****     {
 948:../Generated_Code/usb_descriptor.c ****         for (count = 0; count < COMM_FEATURE_DATA_SIZE; count++)
 1247              		.loc 1 948 0
 1248 0016 0023     		movs	r3, #0
 1249 0018 FB73     		strb	r3, [r7, #15]
 1250 001a 0EE0     		b	.L77
 1251              	.L78:
 949:../Generated_Code/usb_descriptor.c ****         {
 950:../Generated_Code/usb_descriptor.c ****             g_country_code[interface][count] = *(*feature_data + count);
 1252              		.loc 1 950 0 discriminator 2
 1253 001c B879     		ldrb	r0, [r7, #6]	@ zero_extendqisi2
 1254 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1255 0020 3A68     		ldr	r2, [r7]
 1256 0022 1168     		ldr	r1, [r2]
 1257 0024 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1258 0026 0A44     		add	r2, r2, r1
 1259 0028 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1260 002a 0A49     		ldr	r1, .L80
 1261 002c 4000     		lsls	r0, r0, #1
 1262 002e 0344     		add	r3, r3, r0
 1263 0030 0B44     		add	r3, r3, r1
 1264 0032 1A70     		strb	r2, [r3]
 948:../Generated_Code/usb_descriptor.c ****         for (count = 0; count < COMM_FEATURE_DATA_SIZE; count++)
 1265              		.loc 1 948 0 discriminator 2
 1266 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1267 0036 0133     		adds	r3, r3, #1
 1268 0038 FB73     		strb	r3, [r7, #15]
 1269              	.L77:
 948:../Generated_Code/usb_descriptor.c ****         for (count = 0; count < COMM_FEATURE_DATA_SIZE; count++)
 1270              		.loc 1 948 0 is_stmt 0 discriminator 1
 1271 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1272 003c 012B     		cmp	r3, #1
 1273 003e EDD9     		bls	.L78
 951:../Generated_Code/usb_descriptor.c ****         }
 952:../Generated_Code/usb_descriptor.c ****         return USB_OK;
 1274              		.loc 1 952 0 is_stmt 1
 1275 0040 0023     		movs	r3, #0
 1276 0042 00E0     		b	.L79
 1277              	.L76:
 953:../Generated_Code/usb_descriptor.c ****     }
 954:../Generated_Code/usb_descriptor.c **** 
 955:../Generated_Code/usb_descriptor.c ****     return USBERR_INVALID_REQ_TYPE;
 1278              		.loc 1 955 0
 1279 0044 CD23     		movs	r3, #205
 1280              	.L79:
 956:../Generated_Code/usb_descriptor.c **** }
 1281              		.loc 1 956 0
 1282 0046 1846     		mov	r0, r3
 1283 0048 1437     		adds	r7, r7, #20
 1284 004a BD46     		mov	sp, r7
 1285              		@ sp needed
 1286 004c 5DF8047B 		ldr	r7, [sp], #4
 1287 0050 7047     		bx	lr
 1288              	.L81:
 1289 0052 00BF     		.align	2
 1290              	.L80:
 1291 0054 00000000 		.word	g_country_code
 1292              		.cfi_endproc
 1293              	.LFE12:
 1295              		.text
 1296              	.Letext0:
 1297              		.file 2 "../Generated_Code/types.h"
 1298              		.file 3 "../Generated_Code/usb_devapi.h"
 1299              		.file 4 "../Generated_Code/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb_descriptor.c
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:25     .rodata.usb_desc_ep:00000000 usb_desc_ep
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:22     .rodata.usb_desc_ep:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:44     .data.g_device_descriptor:00000000 g_device_descriptor
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:41     .data.g_device_descriptor:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:68     .data.g_config_descriptor:00000000 g_config_descriptor
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:65     .data.g_config_descriptor:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:141    .data.USB_STR_0:00000000 USB_STR_0
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:138    .data.USB_STR_0:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:151    .data.USB_STR_1:00000000 USB_STR_1
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:148    .data.USB_STR_1:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:187    .data.USB_STR_2:00000000 USB_STR_2
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:184    .data.USB_STR_2:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:223    .data.USB_STR_3:00000000 USB_STR_3
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:220    .data.USB_STR_3:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:249    .data.USB_STR_n:00000000 USB_STR_n
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:246    .data.USB_STR_n:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:289    .rodata.g_std_desc_size:00000000 g_std_desc_size
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:286    .rodata.g_std_desc_size:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:303    .rodata.g_std_descriptors:00000000 g_std_descriptors
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:300    .rodata.g_std_descriptors:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:317    .rodata.g_string_desc_size:00000000 g_string_desc_size
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:314    .rodata.g_string_desc_size:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:328    .rodata.g_string_descriptors:00000000 g_string_descriptors
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:325    .rodata.g_string_descriptors:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:339    .rodata.g_languages:00000000 g_languages
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:336    .rodata.g_languages:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:353    .rodata.g_valid_config_values:00000000 g_valid_config_values
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:350    .rodata.g_valid_config_values:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:357    .data.g_line_coding:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:360    .data.g_line_coding:00000000 g_line_coding
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:370    .bss.g_abstract_state:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:373    .bss.g_abstract_state:00000000 g_abstract_state
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:376    .bss.g_country_code:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:379    .bss.g_country_code:00000000 g_country_code
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:382    .bss.g_alternate_interface:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:385    .bss.g_alternate_interface:00000000 g_alternate_interface
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:388    .text.USB_Desc_Get_Descriptor:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:393    .text.USB_Desc_Get_Descriptor:00000000 USB_Desc_Get_Descriptor
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:559    .text.USB_Desc_Get_Descriptor:000000e4 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:567    .text.USB_Desc_Get_Interface:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:572    .text.USB_Desc_Get_Interface:00000000 USB_Desc_Get_Interface
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:618    .text.USB_Desc_Get_Interface:00000034 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:623    .text.USB_Desc_Set_Interface:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:628    .text.USB_Desc_Set_Interface:00000000 USB_Desc_Set_Interface
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:674    .text.USB_Desc_Set_Interface:00000034 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:679    .text.USB_Desc_Valid_Configation:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:684    .text.USB_Desc_Valid_Configation:00000000 USB_Desc_Valid_Configation
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:741    .text.USB_Desc_Valid_Configation:00000040 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:746    .text.USB_Desc_Valid_Interface:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:751    .text.USB_Desc_Valid_Interface:00000000 USB_Desc_Valid_Interface
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:808    .text.USB_Desc_Valid_Interface:00000040 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:813    .text.USB_Desc_Remote_Wakeup:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:818    .text.USB_Desc_Remote_Wakeup:00000000 USB_Desc_Remote_Wakeup
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:847    .text.USB_Desc_Get_Endpoints:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:852    .text.USB_Desc_Get_Endpoints:00000000 USB_Desc_Get_Endpoints
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:880    .text.USB_Desc_Get_Endpoints:00000018 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:885    .text.USB_Desc_Get_Line_Coding:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:890    .text.USB_Desc_Get_Line_Coding:00000000 USB_Desc_Get_Line_Coding
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:939    .text.USB_Desc_Get_Line_Coding:00000038 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:944    .text.USB_Desc_Set_Line_Coding:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:949    .text.USB_Desc_Set_Line_Coding:00000000 USB_Desc_Set_Line_Coding
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1023   .text.USB_Desc_Set_Line_Coding:00000058 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1028   .text.USB_Desc_Get_Abstract_State:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1033   .text.USB_Desc_Get_Abstract_State:00000000 USB_Desc_Get_Abstract_State
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1080   .text.USB_Desc_Get_Abstract_State:00000034 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1085   .text.USB_Desc_Get_Country_Setting:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1090   .text.USB_Desc_Get_Country_Setting:00000000 USB_Desc_Get_Country_Setting
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1137   .text.USB_Desc_Get_Country_Setting:00000034 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1142   .text.USB_Desc_Set_Abstract_State:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1147   .text.USB_Desc_Set_Abstract_State:00000000 USB_Desc_Set_Abstract_State
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1214   .text.USB_Desc_Set_Abstract_State:00000054 $d
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1219   .text.USB_Desc_Set_Country_Setting:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1224   .text.USB_Desc_Set_Country_Setting:00000000 USB_Desc_Set_Country_Setting
C:\Users\Aron\AppData\Local\Temp\ccEEVTnc.s:1291   .text.USB_Desc_Set_Country_Setting:00000054 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22dcf9ce9babd46e5ea858ea4400d115
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.PE_Types.h.68.de7a315b6e4c635a9a7a45ae6ec20b08
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.60.44eca2ca2a72148441f11b3e43b344a9
                           .group:00000000 wm4.MK22F12.h.59.83dcc0895f45d7d67f2182a38aa7f04f
                           .group:00000000 wm4.Cpu.h.80.27ab3269a1d751f899c04690559be7d6
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.types.h.50.d3318ce6df3e49a2799b12d1eaa56060
                           .group:00000000 wm4.hidef.h.47.6ef7d215344a2f057d0c5b3f27c726aa
                           .group:00000000 wm4.FSL_USB_Stack_Config.h.5.a51a5d818e84d127c6c2fe6362a5c643
                           .group:00000000 wm4.usb_user_config.h.47.47e295f338247e629ef1110422279558
                           .group:00000000 wm4.usb_devapi.h.60.9ad576a4fab4e64ae00ce9daf4685bf6
                           .group:00000000 wm4.usb_class.h.55.92808305847d365ece574c9f6c1494ae
                           .group:00000000 wm4.usb_descriptor.h.22.8ce00718dc8831c9823675dd75db5e93

NO UNDEFINED SYMBOLS
