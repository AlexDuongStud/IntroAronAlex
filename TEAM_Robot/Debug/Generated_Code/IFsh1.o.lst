   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"IFsh1.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.bss.IFsh1_CurrentCommand,"aw",%nobits
  21              		.align	2
  24              	IFsh1_CurrentCommand:
  25 0000 00000000 		.space	4
  26              		.section	.bss.IFsh1_CmdResult,"aw",%nobits
  29              	IFsh1_CmdResult:
  30 0000 00       		.space	1
  31              		.section	.bss.IFsh1_CmdPending,"aw",%nobits
  34              	IFsh1_CmdPending:
  35 0000 00       		.space	1
  36              		.section	.bss.IFsh1_EnEvent,"aw",%nobits
  39              	IFsh1_EnEvent:
  40 0000 00       		.space	1
  41              		.section	.bss.IntFlashLdd1_DevDataPtr,"aw",%nobits
  42              		.align	2
  45              	IntFlashLdd1_DevDataPtr:
  46 0000 00000000 		.space	4
  47              		.section	.bss.IFsh1_CurrentDataAddress,"aw",%nobits
  48              		.align	2
  51              	IFsh1_CurrentDataAddress:
  52 0000 00000000 		.space	4
  53              		.section	.bss.IFsh1_CurrentDataSize,"aw",%nobits
  54              		.align	2
  57              	IFsh1_CurrentDataSize:
  58 0000 00000000 		.space	4
  59              		.section	.bss.IFsh1_FlashAddress,"aw",%nobits
  60              		.align	2
  63              	IFsh1_FlashAddress:
  64 0000 00000000 		.space	4
  65              		.section	.bss.IFsh1_NextSrcDataAddress,"aw",%nobits
  66              		.align	2
  69              	IFsh1_NextSrcDataAddress:
  70 0000 00000000 		.space	4
  71              		.section	.bss.IFsh1_RemainingDataSize,"aw",%nobits
  72              		.align	2
  75              	IFsh1_RemainingDataSize:
  76 0000 00000000 		.space	4
  77              		.section	.bss.tmpSector,"aw",%nobits
  78              		.align	2
  81              	tmpSector:
  82 0000 00000000 		.space	4096
  82      00000000 
  82      00000000 
  82      00000000 
  82      00000000 
  83              		.section	.text.IFsh1_SetFlash,"ax",%progbits
  84              		.align	2
  85              		.global	IFsh1_SetFlash
  86              		.thumb
  87              		.thumb_func
  89              	IFsh1_SetFlash:
  90              	.LFB0:
  91              		.file 1 "../Generated_Code/IFsh1.c"
   1:../Generated_Code/IFsh1.c **** /* ###################################################################
   2:../Generated_Code/IFsh1.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/IFsh1.c **** **     Filename    : IFsh1.c
   4:../Generated_Code/IFsh1.c **** **     Project     : TEAM_Robot
   5:../Generated_Code/IFsh1.c **** **     Processor   : MK22FX512VLK12
   6:../Generated_Code/IFsh1.c **** **     Component   : IntFLASH
   7:../Generated_Code/IFsh1.c **** **     Version     : Component 02.409, Driver 01.02, CPU db: 3.00.000
   8:../Generated_Code/IFsh1.c **** **     Repository  : Kinetis
   9:../Generated_Code/IFsh1.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/IFsh1.c **** **     Date/Time   : 2018-09-28, 15:03, # CodeGen: 0
  11:../Generated_Code/IFsh1.c **** **     Abstract    :
  12:../Generated_Code/IFsh1.c **** **         This component "IntFLASH" implements an access to internal FLASH.
  13:../Generated_Code/IFsh1.c **** **         The component support reading/writing data into FLASH, erasing of
  14:../Generated_Code/IFsh1.c **** **         selected sector.
  15:../Generated_Code/IFsh1.c **** **         The component supports events if the write interrupt is supported.
  16:../Generated_Code/IFsh1.c **** **         The component supports following modes of write operations:
  17:../Generated_Code/IFsh1.c **** **           - Write - writing without any test.
  18:../Generated_Code/IFsh1.c **** **           - Destructive write - sector is erased if necessary.
  19:../Generated_Code/IFsh1.c **** **           - Safe write - user event is invoked to save and resore data
  20:../Generated_Code/IFsh1.c **** **                          from the current sector.
  21:../Generated_Code/IFsh1.c **** **         The component requires on-chip FLASH memory (not used/allocated by
  22:../Generated_Code/IFsh1.c **** **         other components).
  23:../Generated_Code/IFsh1.c **** **     Settings    :
  24:../Generated_Code/IFsh1.c **** **          Component name                                 : IFsh1
  25:../Generated_Code/IFsh1.c **** **          FLASH                                          : FTFE
  26:../Generated_Code/IFsh1.c **** **          FLASH_LDD                                      : FLASH_LDD
  27:../Generated_Code/IFsh1.c **** **          Write method                                   : Safe write (with save & erase)
  28:../Generated_Code/IFsh1.c **** **            Buffer type                                  : Implemented by the component
  29:../Generated_Code/IFsh1.c **** **          Interrupt service/event                        : Disabled
  30:../Generated_Code/IFsh1.c **** **          Wait in RAM                                    : yes
  31:../Generated_Code/IFsh1.c **** **          Virtual page                                   : Disabled
  32:../Generated_Code/IFsh1.c **** **          Initialization                                 : 
  33:../Generated_Code/IFsh1.c **** **            Events enabled in init.                      : yes
  34:../Generated_Code/IFsh1.c **** **            Wait enabled in init.                        : yes
  35:../Generated_Code/IFsh1.c **** **          CPU clock/speed selection                      : 
  36:../Generated_Code/IFsh1.c **** **            FLASH clock                                  : 
  37:../Generated_Code/IFsh1.c **** **            High speed mode                              : This component enabled
  38:../Generated_Code/IFsh1.c **** **            Low speed mode                               : This component disabled
  39:../Generated_Code/IFsh1.c **** **            Slow speed mode                              : This component disabled
  40:../Generated_Code/IFsh1.c **** **     Contents    :
  41:../Generated_Code/IFsh1.c **** **         DisableEvent  - byte IFsh1_DisableEvent(void);
  42:../Generated_Code/IFsh1.c **** **         EnableEvent   - byte IFsh1_EnableEvent(void);
  43:../Generated_Code/IFsh1.c **** **         SetByteFlash  - byte IFsh1_SetByteFlash(IFsh1_TAddress Addr, byte Data);
  44:../Generated_Code/IFsh1.c **** **         SetWordFlash  - byte IFsh1_SetWordFlash(IFsh1_TAddress Addr, word Data);
  45:../Generated_Code/IFsh1.c **** **         SetBlockFlash - byte IFsh1_SetBlockFlash(IFsh1_TDataAddress Source, IFsh1_TAddress Dest,
  46:../Generated_Code/IFsh1.c **** **         GetBlockFlash - byte IFsh1_GetBlockFlash(IFsh1_TAddress Source, IFsh1_TDataAddress Dest,
  47:../Generated_Code/IFsh1.c **** **
  48:../Generated_Code/IFsh1.c **** **     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
  49:../Generated_Code/IFsh1.c **** **     All Rights Reserved.
  50:../Generated_Code/IFsh1.c **** **     
  51:../Generated_Code/IFsh1.c **** **     Redistribution and use in source and binary forms, with or without modification,
  52:../Generated_Code/IFsh1.c **** **     are permitted provided that the following conditions are met:
  53:../Generated_Code/IFsh1.c **** **     
  54:../Generated_Code/IFsh1.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  55:../Generated_Code/IFsh1.c **** **       of conditions and the following disclaimer.
  56:../Generated_Code/IFsh1.c **** **     
  57:../Generated_Code/IFsh1.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  58:../Generated_Code/IFsh1.c **** **       list of conditions and the following disclaimer in the documentation and/or
  59:../Generated_Code/IFsh1.c **** **       other materials provided with the distribution.
  60:../Generated_Code/IFsh1.c **** **     
  61:../Generated_Code/IFsh1.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  62:../Generated_Code/IFsh1.c **** **       contributors may be used to endorse or promote products derived from this
  63:../Generated_Code/IFsh1.c **** **       software without specific prior written permission.
  64:../Generated_Code/IFsh1.c **** **     
  65:../Generated_Code/IFsh1.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  66:../Generated_Code/IFsh1.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  67:../Generated_Code/IFsh1.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  68:../Generated_Code/IFsh1.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  69:../Generated_Code/IFsh1.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  70:../Generated_Code/IFsh1.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  71:../Generated_Code/IFsh1.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  72:../Generated_Code/IFsh1.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  73:../Generated_Code/IFsh1.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  74:../Generated_Code/IFsh1.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  75:../Generated_Code/IFsh1.c **** **     
  76:../Generated_Code/IFsh1.c **** **     http: www.freescale.com
  77:../Generated_Code/IFsh1.c **** **     mail: support@freescale.com
  78:../Generated_Code/IFsh1.c **** ** ###################################################################*/
  79:../Generated_Code/IFsh1.c **** /*!
  80:../Generated_Code/IFsh1.c **** ** @file IFsh1.c
  81:../Generated_Code/IFsh1.c **** ** @version 01.02
  82:../Generated_Code/IFsh1.c **** ** @brief
  83:../Generated_Code/IFsh1.c **** **         This component "IntFLASH" implements an access to internal FLASH.
  84:../Generated_Code/IFsh1.c **** **         The component support reading/writing data into FLASH, erasing of
  85:../Generated_Code/IFsh1.c **** **         selected sector.
  86:../Generated_Code/IFsh1.c **** **         The component supports events if the write interrupt is supported.
  87:../Generated_Code/IFsh1.c **** **         The component supports following modes of write operations:
  88:../Generated_Code/IFsh1.c **** **           - Write - writing without any test.
  89:../Generated_Code/IFsh1.c **** **           - Destructive write - sector is erased if necessary.
  90:../Generated_Code/IFsh1.c **** **           - Safe write - user event is invoked to save and resore data
  91:../Generated_Code/IFsh1.c **** **                          from the current sector.
  92:../Generated_Code/IFsh1.c **** **         The component requires on-chip FLASH memory (not used/allocated by
  93:../Generated_Code/IFsh1.c **** **         other components).
  94:../Generated_Code/IFsh1.c **** */         
  95:../Generated_Code/IFsh1.c **** /*!
  96:../Generated_Code/IFsh1.c **** **  @addtogroup IFsh1_module IFsh1 module documentation
  97:../Generated_Code/IFsh1.c **** **  @{
  98:../Generated_Code/IFsh1.c **** */         
  99:../Generated_Code/IFsh1.c **** 
 100:../Generated_Code/IFsh1.c **** /* MODULE IFsh1. */
 101:../Generated_Code/IFsh1.c **** 
 102:../Generated_Code/IFsh1.c **** #include "IFsh1.h"
 103:../Generated_Code/IFsh1.c **** 
 104:../Generated_Code/IFsh1.c **** #ifdef __cplusplus
 105:../Generated_Code/IFsh1.c **** extern "C" {
 106:../Generated_Code/IFsh1.c **** #endif
 107:../Generated_Code/IFsh1.c **** 
 108:../Generated_Code/IFsh1.c **** /* Internal method prototypes */
 109:../Generated_Code/IFsh1.c **** 
 110:../Generated_Code/IFsh1.c **** #define IFsh1_TOTAL_FLASH_BLOCK_COUNT  0x02U
 111:../Generated_Code/IFsh1.c **** #define IFsh1_P_FLASH_SIZE             0x00080000U
 112:../Generated_Code/IFsh1.c **** #define IFsh1_P_FLASH_BLOCK_COUNT      0x01U
 113:../Generated_Code/IFsh1.c **** #define IFsh1_P_FLASH_BLOCK_SIZE       0x00080000U
 114:../Generated_Code/IFsh1.c **** #define IFsh1_D_FLASH_START_ADDRESS    0x10000000U
 115:../Generated_Code/IFsh1.c **** #define IFsh1_D_FLASH_SIZE             0x00020000U
 116:../Generated_Code/IFsh1.c **** #define IFsh1_D_FLASH_BLOCK_COUNT      0x01U
 117:../Generated_Code/IFsh1.c **** #define IFsh1_D_FLASH_BLOCK_SIZE       0x00020000U
 118:../Generated_Code/IFsh1.c **** 
 119:../Generated_Code/IFsh1.c **** #define IFsh1_CMD_NONE                 0x00U
 120:../Generated_Code/IFsh1.c **** #define IFsh1_CMD_READ                 0x01U
 121:../Generated_Code/IFsh1.c **** #define IFsh1_CMD_ERASE_SECTOR         0x02U
 122:../Generated_Code/IFsh1.c **** #define IFsh1_CMD_ERASE_BLOCK          0x03U
 123:../Generated_Code/IFsh1.c **** #define IFsh1_CMD_VERIFY_ERASED_BLOCK  0x04U
 124:../Generated_Code/IFsh1.c **** #define IFsh1_CMD_WRITE                0x05U
 125:../Generated_Code/IFsh1.c **** #define IFsh1_CMD_WRITE_ERASE          0x06U
 126:../Generated_Code/IFsh1.c **** 
 127:../Generated_Code/IFsh1.c **** typedef struct IFsh1_TSector_Struct {
 128:../Generated_Code/IFsh1.c ****   uint32_t Data[IntFlashLdd1_ERASABLE_UNIT_SIZE/4U];
 129:../Generated_Code/IFsh1.c **** } IFsh1_TSector;
 130:../Generated_Code/IFsh1.c **** 
 131:../Generated_Code/IFsh1.c **** static uint32_t IFsh1_CurrentCommand;  /* Current command */
 132:../Generated_Code/IFsh1.c **** static bool IFsh1_CmdResult;           /* Last command result */
 133:../Generated_Code/IFsh1.c **** static bool IFsh1_CmdPending;          /* Current command state */
 134:../Generated_Code/IFsh1.c **** static bool IFsh1_EnEvent;             /* State of events (enabled/disabled) */
 135:../Generated_Code/IFsh1.c **** 
 136:../Generated_Code/IFsh1.c **** static LDD_TDeviceData* IntFlashLdd1_DevDataPtr;
 137:../Generated_Code/IFsh1.c **** static LDD_TData *IFsh1_CurrentDataAddress;
 138:../Generated_Code/IFsh1.c **** static LDD_FLASH_TDataSize IFsh1_CurrentDataSize;
 139:../Generated_Code/IFsh1.c **** static LDD_FLASH_TAddress IFsh1_FlashAddress;
 140:../Generated_Code/IFsh1.c **** static LDD_TData *IFsh1_NextSrcDataAddress;
 141:../Generated_Code/IFsh1.c **** static LDD_FLASH_TDataSize IFsh1_RemainingDataSize;
 142:../Generated_Code/IFsh1.c **** static IFsh1_TSector tmpSector;
 143:../Generated_Code/IFsh1.c **** 
 144:../Generated_Code/IFsh1.c **** byte IFsh1_SetFlash(IFsh1_TDataAddress Source, IFsh1_TAddress Dest, word Count);
 145:../Generated_Code/IFsh1.c **** 
 146:../Generated_Code/IFsh1.c **** /*
 147:../Generated_Code/IFsh1.c **** ** ===================================================================
 148:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_SetFlash (component IntFLASH)
 149:../Generated_Code/IFsh1.c **** **
 150:../Generated_Code/IFsh1.c **** **     Description :
 151:../Generated_Code/IFsh1.c **** **         This method is internal. It is used by Processor Expert only.
 152:../Generated_Code/IFsh1.c **** ** ===================================================================
 153:../Generated_Code/IFsh1.c **** */
 154:../Generated_Code/IFsh1.c **** byte IFsh1_SetFlash(IFsh1_TDataAddress Src, IFsh1_TAddress Dst, word Count)
 155:../Generated_Code/IFsh1.c **** {
  92              		.loc 1 155 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 32
  95              		@ frame_needed = 1, uses_anonymous_args = 0
  96 0000 80B5     		push	{r7, lr}
  97              		.cfi_def_cfa_offset 8
  98              		.cfi_offset 7, -8
  99              		.cfi_offset 14, -4
 100 0002 88B0     		sub	sp, sp, #32
 101              		.cfi_def_cfa_offset 40
 102 0004 00AF     		add	r7, sp, #0
 103              		.cfi_def_cfa_register 7
 104 0006 F860     		str	r0, [r7, #12]
 105 0008 B960     		str	r1, [r7, #8]
 106 000a 1346     		mov	r3, r2
 107 000c FB80     		strh	r3, [r7, #6]	@ movhi
 156:../Generated_Code/IFsh1.c ****   LDD_TError                 Result;
 157:../Generated_Code/IFsh1.c ****   uint32_t                   x;
 158:../Generated_Code/IFsh1.c ****   uint32_t                   SectorAddress, SectorOffset;
 159:../Generated_Code/IFsh1.c **** 
 160:../Generated_Code/IFsh1.c ****   if (IFsh1_CmdPending) {
 108              		.loc 1 160 0
 109 000e 5C4B     		ldr	r3, .L17
 110 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 111 0012 002B     		cmp	r3, #0
 112 0014 01D0     		beq	.L2
 161:../Generated_Code/IFsh1.c ****     return ERR_BUSY;
 113              		.loc 1 161 0
 114 0016 0823     		movs	r3, #8
 115 0018 ADE0     		b	.L3
 116              	.L2:
 162:../Generated_Code/IFsh1.c ****   }
 163:../Generated_Code/IFsh1.c ****   Result = ERR_OK;                     /* Suppose area is erased */
 117              		.loc 1 163 0
 118 001a 0023     		movs	r3, #0
 119 001c FB83     		strh	r3, [r7, #30]	@ movhi
 164:../Generated_Code/IFsh1.c ****   for (x=0U; x<Count; x++) {           /* Check if written area is erased */
 120              		.loc 1 164 0
 121 001e 0023     		movs	r3, #0
 122 0020 BB61     		str	r3, [r7, #24]
 123 0022 0BE0     		b	.L4
 124              	.L7:
 165:../Generated_Code/IFsh1.c ****     if (((uint8_t*)Dst)[x] != 0xFFU) { /* Byte erased? */
 125              		.loc 1 165 0
 126 0024 BA69     		ldr	r2, [r7, #24]
 127 0026 BB68     		ldr	r3, [r7, #8]
 128 0028 1344     		add	r3, r3, r2
 129 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 130 002c FF2B     		cmp	r3, #255
 131 002e 02D0     		beq	.L5
 166:../Generated_Code/IFsh1.c ****       Result = ERR_FAILED;             /* No, Erase is required */
 132              		.loc 1 166 0
 133 0030 1B23     		movs	r3, #27
 134 0032 FB83     		strh	r3, [r7, #30]	@ movhi
 167:../Generated_Code/IFsh1.c ****      break;
 135              		.loc 1 167 0
 136 0034 06E0     		b	.L6
 137              	.L5:
 164:../Generated_Code/IFsh1.c ****   for (x=0U; x<Count; x++) {           /* Check if written area is erased */
 138              		.loc 1 164 0
 139 0036 BB69     		ldr	r3, [r7, #24]
 140 0038 0133     		adds	r3, r3, #1
 141 003a BB61     		str	r3, [r7, #24]
 142              	.L4:
 164:../Generated_Code/IFsh1.c ****   for (x=0U; x<Count; x++) {           /* Check if written area is erased */
 143              		.loc 1 164 0 is_stmt 0 discriminator 1
 144 003c FA88     		ldrh	r2, [r7, #6]
 145 003e BB69     		ldr	r3, [r7, #24]
 146 0040 9A42     		cmp	r2, r3
 147 0042 EFD8     		bhi	.L7
 148              	.L6:
 168:../Generated_Code/IFsh1.c ****     }
 169:../Generated_Code/IFsh1.c ****   }
 170:../Generated_Code/IFsh1.c ****   if (Result == ERR_FAILED) {
 149              		.loc 1 170 0 is_stmt 1
 150 0044 FB8B     		ldrh	r3, [r7, #30]
 151 0046 1B2B     		cmp	r3, #27
 152 0048 68D1     		bne	.L8
 171:../Generated_Code/IFsh1.c ****     SectorAddress = Dst & ~(LDD_FLASH_TAddress)IntFlashLdd1_ERASABLE_UNIT_MASK;
 153              		.loc 1 171 0
 154 004a BB68     		ldr	r3, [r7, #8]
 155 004c 23F47F63 		bic	r3, r3, #4080
 156 0050 23F00F03 		bic	r3, r3, #15
 157 0054 3B61     		str	r3, [r7, #16]
 172:../Generated_Code/IFsh1.c ****     SectorOffset = Dst & IntFlashLdd1_ERASABLE_UNIT_MASK;
 158              		.loc 1 172 0
 159 0056 BB68     		ldr	r3, [r7, #8]
 160 0058 C3F30B03 		ubfx	r3, r3, #0, #12
 161 005c 7B61     		str	r3, [r7, #20]
 173:../Generated_Code/IFsh1.c ****     tmpSector = *(IFsh1_TSector *)SectorAddress; /* Create copy of the sector */
 162              		.loc 1 173 0
 163 005e 3B69     		ldr	r3, [r7, #16]
 164 0060 484A     		ldr	r2, .L17+4
 165 0062 1146     		mov	r1, r2
 166 0064 1A46     		mov	r2, r3
 167 0066 4FF48053 		mov	r3, #4096
 168 006a 0846     		mov	r0, r1
 169 006c 1146     		mov	r1, r2
 170 006e 1A46     		mov	r2, r3
 171 0070 FFF7FEFF 		bl	memcpy
 172              	.L10:
 174:../Generated_Code/IFsh1.c ****     do {                               /* Rewrite part of the sector with new data */
 175:../Generated_Code/IFsh1.c ****       ((uint8_t*)(void*)&tmpSector)[SectorOffset] = *(uint8_t*)(void*)(Src);
 173              		.loc 1 175 0 discriminator 1
 174 0074 7A69     		ldr	r2, [r7, #20]
 175 0076 434B     		ldr	r3, .L17+4
 176 0078 1344     		add	r3, r3, r2
 177 007a FA68     		ldr	r2, [r7, #12]
 178 007c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 179 007e 1A70     		strb	r2, [r3]
 176:../Generated_Code/IFsh1.c ****       Src++;
 180              		.loc 1 176 0 discriminator 1
 181 0080 FB68     		ldr	r3, [r7, #12]
 182 0082 0133     		adds	r3, r3, #1
 183 0084 FB60     		str	r3, [r7, #12]
 177:../Generated_Code/IFsh1.c ****       Count--;
 184              		.loc 1 177 0 discriminator 1
 185 0086 FB88     		ldrh	r3, [r7, #6]
 186 0088 013B     		subs	r3, r3, #1
 187 008a FB80     		strh	r3, [r7, #6]	@ movhi
 178:../Generated_Code/IFsh1.c ****     } while ((++SectorOffset != IntFlashLdd1_ERASABLE_UNIT_SIZE) && (Count != 0U));
 188              		.loc 1 178 0 discriminator 1
 189 008c 7B69     		ldr	r3, [r7, #20]
 190 008e 0133     		adds	r3, r3, #1
 191 0090 7B61     		str	r3, [r7, #20]
 192 0092 7B69     		ldr	r3, [r7, #20]
 193 0094 B3F5805F 		cmp	r3, #4096
 194 0098 02D0     		beq	.L9
 195 009a FB88     		ldrh	r3, [r7, #6]
 196 009c 002B     		cmp	r3, #0
 197 009e E9D1     		bne	.L10
 198              	.L9:
 179:../Generated_Code/IFsh1.c ****     IFsh1_CmdPending = TRUE;
 199              		.loc 1 179 0
 200 00a0 374B     		ldr	r3, .L17
 201 00a2 0122     		movs	r2, #1
 202 00a4 1A70     		strb	r2, [r3]
 180:../Generated_Code/IFsh1.c ****     IFsh1_CurrentCommand = IFsh1_CMD_WRITE_ERASE;
 203              		.loc 1 180 0
 204 00a6 384B     		ldr	r3, .L17+8
 205 00a8 0622     		movs	r2, #6
 206 00aa 1A60     		str	r2, [r3]
 181:../Generated_Code/IFsh1.c ****     IFsh1_CurrentDataAddress = (LDD_TData *)&tmpSector;
 207              		.loc 1 181 0
 208 00ac 374B     		ldr	r3, .L17+12
 209 00ae 354A     		ldr	r2, .L17+4
 210 00b0 1A60     		str	r2, [r3]
 182:../Generated_Code/IFsh1.c ****     IFsh1_CurrentDataSize = IntFlashLdd1_ERASABLE_UNIT_SIZE;
 211              		.loc 1 182 0
 212 00b2 374B     		ldr	r3, .L17+16
 213 00b4 4FF48052 		mov	r2, #4096
 214 00b8 1A60     		str	r2, [r3]
 183:../Generated_Code/IFsh1.c ****     IFsh1_FlashAddress = SectorAddress;
 215              		.loc 1 183 0
 216 00ba 364B     		ldr	r3, .L17+20
 217 00bc 3A69     		ldr	r2, [r7, #16]
 218 00be 1A60     		str	r2, [r3]
 184:../Generated_Code/IFsh1.c ****     IFsh1_NextSrcDataAddress = (LDD_TData *)Src;
 219              		.loc 1 184 0
 220 00c0 354B     		ldr	r3, .L17+24
 221 00c2 FA68     		ldr	r2, [r7, #12]
 222 00c4 1A60     		str	r2, [r3]
 185:../Generated_Code/IFsh1.c ****     IFsh1_RemainingDataSize = (LDD_FLASH_TDataSize) Count;
 223              		.loc 1 185 0
 224 00c6 FA88     		ldrh	r2, [r7, #6]
 225 00c8 344B     		ldr	r3, .L17+28
 226 00ca 1A60     		str	r2, [r3]
 186:../Generated_Code/IFsh1.c ****     Result = IntFlashLdd1_Erase(IntFlashLdd1_DevDataPtr, IFsh1_FlashAddress, IFsh1_CurrentDataSize)
 227              		.loc 1 186 0
 228 00cc 344B     		ldr	r3, .L17+32
 229 00ce 1968     		ldr	r1, [r3]
 230 00d0 304B     		ldr	r3, .L17+20
 231 00d2 1A68     		ldr	r2, [r3]
 232 00d4 2E4B     		ldr	r3, .L17+16
 233 00d6 1B68     		ldr	r3, [r3]
 234 00d8 0846     		mov	r0, r1
 235 00da 1146     		mov	r1, r2
 236 00dc 1A46     		mov	r2, r3
 237 00de FFF7FEFF 		bl	IntFlashLdd1_Erase
 238 00e2 0346     		mov	r3, r0
 239 00e4 FB83     		strh	r3, [r7, #30]	@ movhi
 187:../Generated_Code/IFsh1.c ****     if (Result == ERR_OK) {
 240              		.loc 1 187 0
 241 00e6 FB8B     		ldrh	r3, [r7, #30]
 242 00e8 002B     		cmp	r3, #0
 243 00ea 0CD1     		bne	.L11
 244              	.L12:
 188:../Generated_Code/IFsh1.c ****       do {
 189:../Generated_Code/IFsh1.c ****         IntFlashLdd1_Main(IntFlashLdd1_DevDataPtr);
 245              		.loc 1 189 0 discriminator 1
 246 00ec 2C4B     		ldr	r3, .L17+32
 247 00ee 1B68     		ldr	r3, [r3]
 248 00f0 1846     		mov	r0, r3
 249 00f2 FFF7FEFF 		bl	IntFlashLdd1_Main
 190:../Generated_Code/IFsh1.c ****       } while (IFsh1_CmdPending);
 250              		.loc 1 190 0 discriminator 1
 251 00f6 224B     		ldr	r3, .L17
 252 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 253 00fa 002B     		cmp	r3, #0
 254 00fc F6D1     		bne	.L12
 191:../Generated_Code/IFsh1.c ****       Result = IFsh1_CmdResult;
 255              		.loc 1 191 0
 256 00fe 294B     		ldr	r3, .L17+36
 257 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 258 0102 FB83     		strh	r3, [r7, #30]	@ movhi
 259 0104 07E0     		b	.L13
 260              	.L11:
 192:../Generated_Code/IFsh1.c ****     } else {
 193:../Generated_Code/IFsh1.c ****       IFsh1_CmdPending = FALSE;        /* Command parameter error */
 261              		.loc 1 193 0
 262 0106 1E4B     		ldr	r3, .L17
 263 0108 0022     		movs	r2, #0
 264 010a 1A70     		strb	r2, [r3]
 194:../Generated_Code/IFsh1.c ****       if (Result == ERR_PARAM_ADDRESS) {
 265              		.loc 1 194 0
 266 010c FB8B     		ldrh	r3, [r7, #30]
 267 010e 892B     		cmp	r3, #137
 268 0110 01D1     		bne	.L13
 195:../Generated_Code/IFsh1.c ****         Result = ERR_RANGE;
 269              		.loc 1 195 0
 270 0112 0223     		movs	r3, #2
 271 0114 FB83     		strh	r3, [r7, #30]	@ movhi
 272              	.L13:
 196:../Generated_Code/IFsh1.c ****       }
 197:../Generated_Code/IFsh1.c ****     }
 198:../Generated_Code/IFsh1.c ****     return (byte)Result;
 273              		.loc 1 198 0
 274 0116 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 275 0118 DBB2     		uxtb	r3, r3
 276 011a 2CE0     		b	.L3
 277              	.L8:
 199:../Generated_Code/IFsh1.c ****   }
 200:../Generated_Code/IFsh1.c ****   IFsh1_RemainingDataSize = 0U;
 278              		.loc 1 200 0
 279 011c 1F4B     		ldr	r3, .L17+28
 280 011e 0022     		movs	r2, #0
 281 0120 1A60     		str	r2, [r3]
 201:../Generated_Code/IFsh1.c ****   IFsh1_CurrentCommand = IFsh1_CMD_WRITE;
 282              		.loc 1 201 0
 283 0122 194B     		ldr	r3, .L17+8
 284 0124 0522     		movs	r2, #5
 285 0126 1A60     		str	r2, [r3]
 202:../Generated_Code/IFsh1.c ****   IFsh1_CmdPending = TRUE;
 286              		.loc 1 202 0
 287 0128 154B     		ldr	r3, .L17
 288 012a 0122     		movs	r2, #1
 289 012c 1A70     		strb	r2, [r3]
 203:../Generated_Code/IFsh1.c ****   Result = IntFlashLdd1_Write(IntFlashLdd1_DevDataPtr, (LDD_TData *)Src, Dst, (LDD_FLASH_TDataSize)
 290              		.loc 1 203 0
 291 012e 1C4B     		ldr	r3, .L17+32
 292 0130 1A68     		ldr	r2, [r3]
 293 0132 FB88     		ldrh	r3, [r7, #6]
 294 0134 1046     		mov	r0, r2
 295 0136 F968     		ldr	r1, [r7, #12]
 296 0138 BA68     		ldr	r2, [r7, #8]
 297 013a FFF7FEFF 		bl	IntFlashLdd1_Write
 298 013e 0346     		mov	r3, r0
 299 0140 FB83     		strh	r3, [r7, #30]	@ movhi
 204:../Generated_Code/IFsh1.c ****   if (Result == ERR_OK) {
 300              		.loc 1 204 0
 301 0142 FB8B     		ldrh	r3, [r7, #30]
 302 0144 002B     		cmp	r3, #0
 303 0146 0CD1     		bne	.L14
 304              	.L15:
 205:../Generated_Code/IFsh1.c ****     do {
 206:../Generated_Code/IFsh1.c ****       IntFlashLdd1_Main(IntFlashLdd1_DevDataPtr);
 305              		.loc 1 206 0 discriminator 1
 306 0148 154B     		ldr	r3, .L17+32
 307 014a 1B68     		ldr	r3, [r3]
 308 014c 1846     		mov	r0, r3
 309 014e FFF7FEFF 		bl	IntFlashLdd1_Main
 207:../Generated_Code/IFsh1.c ****     } while (IFsh1_CmdPending);
 310              		.loc 1 207 0 discriminator 1
 311 0152 0B4B     		ldr	r3, .L17
 312 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 0156 002B     		cmp	r3, #0
 314 0158 F6D1     		bne	.L15
 208:../Generated_Code/IFsh1.c ****     Result = IFsh1_CmdResult;
 315              		.loc 1 208 0
 316 015a 124B     		ldr	r3, .L17+36
 317 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 318 015e FB83     		strh	r3, [r7, #30]	@ movhi
 319 0160 07E0     		b	.L16
 320              	.L14:
 209:../Generated_Code/IFsh1.c ****   } else {
 210:../Generated_Code/IFsh1.c ****     IFsh1_CmdPending = FALSE;          /* Command parameter error */
 321              		.loc 1 210 0
 322 0162 074B     		ldr	r3, .L17
 323 0164 0022     		movs	r2, #0
 324 0166 1A70     		strb	r2, [r3]
 211:../Generated_Code/IFsh1.c ****     if (Result == ERR_PARAM_ADDRESS) {
 325              		.loc 1 211 0
 326 0168 FB8B     		ldrh	r3, [r7, #30]
 327 016a 892B     		cmp	r3, #137
 328 016c 01D1     		bne	.L16
 212:../Generated_Code/IFsh1.c ****       Result = ERR_RANGE;
 329              		.loc 1 212 0
 330 016e 0223     		movs	r3, #2
 331 0170 FB83     		strh	r3, [r7, #30]	@ movhi
 332              	.L16:
 213:../Generated_Code/IFsh1.c ****     }
 214:../Generated_Code/IFsh1.c ****   }
 215:../Generated_Code/IFsh1.c ****   return (byte)Result;
 333              		.loc 1 215 0
 334 0172 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 335 0174 DBB2     		uxtb	r3, r3
 336              	.L3:
 216:../Generated_Code/IFsh1.c **** }
 337              		.loc 1 216 0
 338 0176 1846     		mov	r0, r3
 339 0178 2037     		adds	r7, r7, #32
 340 017a BD46     		mov	sp, r7
 341              		@ sp needed
 342 017c 80BD     		pop	{r7, pc}
 343              	.L18:
 344 017e 00BF     		.align	2
 345              	.L17:
 346 0180 00000000 		.word	IFsh1_CmdPending
 347 0184 00000000 		.word	tmpSector
 348 0188 00000000 		.word	IFsh1_CurrentCommand
 349 018c 00000000 		.word	IFsh1_CurrentDataAddress
 350 0190 00000000 		.word	IFsh1_CurrentDataSize
 351 0194 00000000 		.word	IFsh1_FlashAddress
 352 0198 00000000 		.word	IFsh1_NextSrcDataAddress
 353 019c 00000000 		.word	IFsh1_RemainingDataSize
 354 01a0 00000000 		.word	IntFlashLdd1_DevDataPtr
 355 01a4 00000000 		.word	IFsh1_CmdResult
 356              		.cfi_endproc
 357              	.LFE0:
 359              		.section	.text.IFsh1_Init,"ax",%progbits
 360              		.align	2
 361              		.global	IFsh1_Init
 362              		.thumb
 363              		.thumb_func
 365              	IFsh1_Init:
 366              	.LFB1:
 217:../Generated_Code/IFsh1.c **** 
 218:../Generated_Code/IFsh1.c **** /*
 219:../Generated_Code/IFsh1.c **** ** ===================================================================
 220:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_Init (component IntFLASH)
 221:../Generated_Code/IFsh1.c **** **
 222:../Generated_Code/IFsh1.c **** **     Description :
 223:../Generated_Code/IFsh1.c **** **         This method is internal. It is used by Processor Expert only.
 224:../Generated_Code/IFsh1.c **** ** ===================================================================
 225:../Generated_Code/IFsh1.c **** */
 226:../Generated_Code/IFsh1.c **** void IFsh1_Init(void)
 227:../Generated_Code/IFsh1.c **** {
 367              		.loc 1 227 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 1, uses_anonymous_args = 0
 371 0000 80B5     		push	{r7, lr}
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 7, -8
 374              		.cfi_offset 14, -4
 375 0002 00AF     		add	r7, sp, #0
 376              		.cfi_def_cfa_register 7
 228:../Generated_Code/IFsh1.c ****   IntFlashLdd1_DevDataPtr = IntFlashLdd1_Init(NULL);
 377              		.loc 1 228 0
 378 0004 0020     		movs	r0, #0
 379 0006 FFF7FEFF 		bl	IntFlashLdd1_Init
 380 000a 0246     		mov	r2, r0
 381 000c 044B     		ldr	r3, .L20
 382 000e 1A60     		str	r2, [r3]
 229:../Generated_Code/IFsh1.c ****   IFsh1_CmdPending = FALSE;
 383              		.loc 1 229 0
 384 0010 044B     		ldr	r3, .L20+4
 385 0012 0022     		movs	r2, #0
 386 0014 1A70     		strb	r2, [r3]
 230:../Generated_Code/IFsh1.c ****   IFsh1_EnEvent = TRUE;                /* Remember events state */
 387              		.loc 1 230 0
 388 0016 044B     		ldr	r3, .L20+8
 389 0018 0122     		movs	r2, #1
 390 001a 1A70     		strb	r2, [r3]
 231:../Generated_Code/IFsh1.c **** }
 391              		.loc 1 231 0
 392 001c 80BD     		pop	{r7, pc}
 393              	.L21:
 394 001e 00BF     		.align	2
 395              	.L20:
 396 0020 00000000 		.word	IntFlashLdd1_DevDataPtr
 397 0024 00000000 		.word	IFsh1_CmdPending
 398 0028 00000000 		.word	IFsh1_EnEvent
 399              		.cfi_endproc
 400              	.LFE1:
 402              		.section	.text.IFsh1_DisableEvent,"ax",%progbits
 403              		.align	2
 404              		.global	IFsh1_DisableEvent
 405              		.thumb
 406              		.thumb_func
 408              	IFsh1_DisableEvent:
 409              	.LFB2:
 232:../Generated_Code/IFsh1.c **** 
 233:../Generated_Code/IFsh1.c **** /*
 234:../Generated_Code/IFsh1.c **** ** ===================================================================
 235:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_DisableEvent (component IntFLASH)
 236:../Generated_Code/IFsh1.c **** */
 237:../Generated_Code/IFsh1.c **** /*!
 238:../Generated_Code/IFsh1.c **** **     @brief
 239:../Generated_Code/IFsh1.c **** **         This method disables all the events except [OnSaveBuffer],
 240:../Generated_Code/IFsh1.c **** **         [OnRestoreBuffer] and [OnEraseError]. The method is
 241:../Generated_Code/IFsh1.c **** **         available only if any event is enabled.
 242:../Generated_Code/IFsh1.c **** **     @return
 243:../Generated_Code/IFsh1.c **** **                         - Error code, possible codes: 
 244:../Generated_Code/IFsh1.c **** **                           - ERR_OK - OK 
 245:../Generated_Code/IFsh1.c **** **                           - ERR_SPEED - This device does not work in
 246:../Generated_Code/IFsh1.c **** **                           the active speed mode
 247:../Generated_Code/IFsh1.c **** */
 248:../Generated_Code/IFsh1.c **** /* ===================================================================*/
 249:../Generated_Code/IFsh1.c **** byte IFsh1_DisableEvent(void)
 250:../Generated_Code/IFsh1.c **** {
 410              		.loc 1 250 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 1, uses_anonymous_args = 0
 414              		@ link register save eliminated.
 415 0000 80B4     		push	{r7}
 416              		.cfi_def_cfa_offset 4
 417              		.cfi_offset 7, -4
 418 0002 00AF     		add	r7, sp, #0
 419              		.cfi_def_cfa_register 7
 251:../Generated_Code/IFsh1.c ****   IFsh1_EnEvent = FALSE;
 420              		.loc 1 251 0
 421 0004 044B     		ldr	r3, .L24
 422 0006 0022     		movs	r2, #0
 423 0008 1A70     		strb	r2, [r3]
 252:../Generated_Code/IFsh1.c ****   return ERR_OK;
 424              		.loc 1 252 0
 425 000a 0023     		movs	r3, #0
 253:../Generated_Code/IFsh1.c **** }
 426              		.loc 1 253 0
 427 000c 1846     		mov	r0, r3
 428 000e BD46     		mov	sp, r7
 429              		@ sp needed
 430 0010 5DF8047B 		ldr	r7, [sp], #4
 431 0014 7047     		bx	lr
 432              	.L25:
 433 0016 00BF     		.align	2
 434              	.L24:
 435 0018 00000000 		.word	IFsh1_EnEvent
 436              		.cfi_endproc
 437              	.LFE2:
 439              		.section	.text.IFsh1_EnableEvent,"ax",%progbits
 440              		.align	2
 441              		.global	IFsh1_EnableEvent
 442              		.thumb
 443              		.thumb_func
 445              	IFsh1_EnableEvent:
 446              	.LFB3:
 254:../Generated_Code/IFsh1.c **** 
 255:../Generated_Code/IFsh1.c **** /*
 256:../Generated_Code/IFsh1.c **** ** ===================================================================
 257:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_EnableEvent (component IntFLASH)
 258:../Generated_Code/IFsh1.c **** */
 259:../Generated_Code/IFsh1.c **** /*!
 260:../Generated_Code/IFsh1.c **** **     @brief
 261:../Generated_Code/IFsh1.c **** **         This method enables all the events except [OnSaveBuffer],
 262:../Generated_Code/IFsh1.c **** **         [OnRestoreBuffer] and [OnEraseError]. The method is
 263:../Generated_Code/IFsh1.c **** **         available only if any event is enabled.
 264:../Generated_Code/IFsh1.c **** **     @return
 265:../Generated_Code/IFsh1.c **** **                         - Error code, possible codes: 
 266:../Generated_Code/IFsh1.c **** **                           - ERR_OK - OK 
 267:../Generated_Code/IFsh1.c **** **                           - ERR_SPEED - This device does not work in
 268:../Generated_Code/IFsh1.c **** **                           the active speed mode
 269:../Generated_Code/IFsh1.c **** */
 270:../Generated_Code/IFsh1.c **** /* ===================================================================*/
 271:../Generated_Code/IFsh1.c **** byte IFsh1_EnableEvent(void)
 272:../Generated_Code/IFsh1.c **** {
 447              		.loc 1 272 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452 0000 80B4     		push	{r7}
 453              		.cfi_def_cfa_offset 4
 454              		.cfi_offset 7, -4
 455 0002 00AF     		add	r7, sp, #0
 456              		.cfi_def_cfa_register 7
 273:../Generated_Code/IFsh1.c ****   IFsh1_EnEvent = TRUE;
 457              		.loc 1 273 0
 458 0004 044B     		ldr	r3, .L28
 459 0006 0122     		movs	r2, #1
 460 0008 1A70     		strb	r2, [r3]
 274:../Generated_Code/IFsh1.c ****   return ERR_OK;
 461              		.loc 1 274 0
 462 000a 0023     		movs	r3, #0
 275:../Generated_Code/IFsh1.c **** }
 463              		.loc 1 275 0
 464 000c 1846     		mov	r0, r3
 465 000e BD46     		mov	sp, r7
 466              		@ sp needed
 467 0010 5DF8047B 		ldr	r7, [sp], #4
 468 0014 7047     		bx	lr
 469              	.L29:
 470 0016 00BF     		.align	2
 471              	.L28:
 472 0018 00000000 		.word	IFsh1_EnEvent
 473              		.cfi_endproc
 474              	.LFE3:
 476              		.section	.text.IFsh1_SetByteFlash,"ax",%progbits
 477              		.align	2
 478              		.global	IFsh1_SetByteFlash
 479              		.thumb
 480              		.thumb_func
 482              	IFsh1_SetByteFlash:
 483              	.LFB4:
 276:../Generated_Code/IFsh1.c **** 
 277:../Generated_Code/IFsh1.c **** /*
 278:../Generated_Code/IFsh1.c **** ** ===================================================================
 279:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_SetByteFlash (component IntFLASH)
 280:../Generated_Code/IFsh1.c **** */
 281:../Generated_Code/IFsh1.c **** /*!
 282:../Generated_Code/IFsh1.c **** **     @brief
 283:../Generated_Code/IFsh1.c **** **         Writes a byte to an address in FLASH. The operation of this
 284:../Generated_Code/IFsh1.c **** **         method depends on the "Write method" property and state of
 285:../Generated_Code/IFsh1.c **** **         the flash. Please see more details on general info page of
 286:../Generated_Code/IFsh1.c **** **         the help.
 287:../Generated_Code/IFsh1.c **** **     @param
 288:../Generated_Code/IFsh1.c **** **         Addr            - Address to FLASH.
 289:../Generated_Code/IFsh1.c **** **     @param
 290:../Generated_Code/IFsh1.c **** **         Data            - Data to write.
 291:../Generated_Code/IFsh1.c **** **     @return
 292:../Generated_Code/IFsh1.c **** **                         - Error code, possible codes: 
 293:../Generated_Code/IFsh1.c **** **                           - ERR_OK - OK 
 294:../Generated_Code/IFsh1.c **** **                           - ERR_NOTAVAIL - Desired program/erase
 295:../Generated_Code/IFsh1.c **** **                           operation is not available 
 296:../Generated_Code/IFsh1.c **** **                           - ERR_RANGE - Address is out of range 
 297:../Generated_Code/IFsh1.c **** **                           - ERR_VALUE - Read value is not equal to
 298:../Generated_Code/IFsh1.c **** **                           written value 
 299:../Generated_Code/IFsh1.c **** **                           - ERR_SPEED - This device does not work in
 300:../Generated_Code/IFsh1.c **** **                           the active speed mode 
 301:../Generated_Code/IFsh1.c **** **                           - ERR_BUSY - Device is busy 
 302:../Generated_Code/IFsh1.c **** **                           - ERR_PROTECT - Flash is write protect
 303:../Generated_Code/IFsh1.c **** */
 304:../Generated_Code/IFsh1.c **** /* ===================================================================*/
 305:../Generated_Code/IFsh1.c **** byte IFsh1_SetByteFlash(IFsh1_TAddress Addr, byte Data)
 306:../Generated_Code/IFsh1.c **** {
 484              		.loc 1 306 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 8
 487              		@ frame_needed = 1, uses_anonymous_args = 0
 488 0000 80B5     		push	{r7, lr}
 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 7, -8
 491              		.cfi_offset 14, -4
 492 0002 82B0     		sub	sp, sp, #8
 493              		.cfi_def_cfa_offset 16
 494 0004 00AF     		add	r7, sp, #0
 495              		.cfi_def_cfa_register 7
 496 0006 7860     		str	r0, [r7, #4]
 497 0008 0B46     		mov	r3, r1
 498 000a FB70     		strb	r3, [r7, #3]
 307:../Generated_Code/IFsh1.c ****   return IFsh1_SetFlash((IFsh1_TDataAddress)(void*)&Data, Addr,1U);
 499              		.loc 1 307 0
 500 000c FB1C     		adds	r3, r7, #3
 501 000e 1846     		mov	r0, r3
 502 0010 7968     		ldr	r1, [r7, #4]
 503 0012 0122     		movs	r2, #1
 504 0014 FFF7FEFF 		bl	IFsh1_SetFlash
 505 0018 0346     		mov	r3, r0
 308:../Generated_Code/IFsh1.c **** }
 506              		.loc 1 308 0
 507 001a 1846     		mov	r0, r3
 508 001c 0837     		adds	r7, r7, #8
 509 001e BD46     		mov	sp, r7
 510              		@ sp needed
 511 0020 80BD     		pop	{r7, pc}
 512              		.cfi_endproc
 513              	.LFE4:
 515 0022 00BF     		.section	.text.IFsh1_SetWordFlash,"ax",%progbits
 516              		.align	2
 517              		.global	IFsh1_SetWordFlash
 518              		.thumb
 519              		.thumb_func
 521              	IFsh1_SetWordFlash:
 522              	.LFB5:
 309:../Generated_Code/IFsh1.c **** 
 310:../Generated_Code/IFsh1.c **** /*
 311:../Generated_Code/IFsh1.c **** ** ===================================================================
 312:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_SetWordFlash (component IntFLASH)
 313:../Generated_Code/IFsh1.c **** */
 314:../Generated_Code/IFsh1.c **** /*!
 315:../Generated_Code/IFsh1.c **** **     @brief
 316:../Generated_Code/IFsh1.c **** **         Writes a word to an address in FLASH. The operation of this
 317:../Generated_Code/IFsh1.c **** **         method depends on the "Write method" property and state of
 318:../Generated_Code/IFsh1.c **** **         the flash. Please see more details on general info page of
 319:../Generated_Code/IFsh1.c **** **         the help.
 320:../Generated_Code/IFsh1.c **** **     @param
 321:../Generated_Code/IFsh1.c **** **         Addr            - Address to FLASH.
 322:../Generated_Code/IFsh1.c **** **     @param
 323:../Generated_Code/IFsh1.c **** **         Data            - Data to write.
 324:../Generated_Code/IFsh1.c **** **     @return
 325:../Generated_Code/IFsh1.c **** **                         - Error code, possible codes: 
 326:../Generated_Code/IFsh1.c **** **                           - ERR_OK - OK 
 327:../Generated_Code/IFsh1.c **** **                           - ERR_NOTAVAIL - Desired program/erase
 328:../Generated_Code/IFsh1.c **** **                           operation is not available 
 329:../Generated_Code/IFsh1.c **** **                           - ERR_RANGE - Address is out of range 
 330:../Generated_Code/IFsh1.c **** **                           - ERR_VALUE - Read value is not equal to
 331:../Generated_Code/IFsh1.c **** **                           written value 
 332:../Generated_Code/IFsh1.c **** **                           - ERR_SPEED - This device does not work in
 333:../Generated_Code/IFsh1.c **** **                           the active speed mode 
 334:../Generated_Code/IFsh1.c **** **                           - ERR_BUSY - Device is busy 
 335:../Generated_Code/IFsh1.c **** **                           - ERR_PROTECT - Flash is write protect
 336:../Generated_Code/IFsh1.c **** */
 337:../Generated_Code/IFsh1.c **** /* ===================================================================*/
 338:../Generated_Code/IFsh1.c **** byte IFsh1_SetWordFlash(IFsh1_TAddress Addr, word Data)
 339:../Generated_Code/IFsh1.c **** {
 523              		.loc 1 339 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 8
 526              		@ frame_needed = 1, uses_anonymous_args = 0
 527 0000 80B5     		push	{r7, lr}
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 7, -8
 530              		.cfi_offset 14, -4
 531 0002 82B0     		sub	sp, sp, #8
 532              		.cfi_def_cfa_offset 16
 533 0004 00AF     		add	r7, sp, #0
 534              		.cfi_def_cfa_register 7
 535 0006 7860     		str	r0, [r7, #4]
 536 0008 0B46     		mov	r3, r1
 537 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 340:../Generated_Code/IFsh1.c ****   return IFsh1_SetFlash((IFsh1_TDataAddress)(void*)&Data, Addr, 2U);
 538              		.loc 1 340 0
 539 000c BB1C     		adds	r3, r7, #2
 540 000e 1846     		mov	r0, r3
 541 0010 7968     		ldr	r1, [r7, #4]
 542 0012 0222     		movs	r2, #2
 543 0014 FFF7FEFF 		bl	IFsh1_SetFlash
 544 0018 0346     		mov	r3, r0
 341:../Generated_Code/IFsh1.c **** }
 545              		.loc 1 341 0
 546 001a 1846     		mov	r0, r3
 547 001c 0837     		adds	r7, r7, #8
 548 001e BD46     		mov	sp, r7
 549              		@ sp needed
 550 0020 80BD     		pop	{r7, pc}
 551              		.cfi_endproc
 552              	.LFE5:
 554 0022 00BF     		.section	.text.IFsh1_SetBlockFlash,"ax",%progbits
 555              		.align	2
 556              		.global	IFsh1_SetBlockFlash
 557              		.thumb
 558              		.thumb_func
 560              	IFsh1_SetBlockFlash:
 561              	.LFB6:
 342:../Generated_Code/IFsh1.c **** 
 343:../Generated_Code/IFsh1.c **** /*
 344:../Generated_Code/IFsh1.c **** ** ===================================================================
 345:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_SetBlockFlash (component IntFLASH)
 346:../Generated_Code/IFsh1.c **** */
 347:../Generated_Code/IFsh1.c **** /*!
 348:../Generated_Code/IFsh1.c **** **     @brief
 349:../Generated_Code/IFsh1.c **** **         Writes data to FLASH. The operation of this method depends
 350:../Generated_Code/IFsh1.c **** **         on the "Write method" property and state of the flash.
 351:../Generated_Code/IFsh1.c **** **         Please see more details on general info page of the help.
 352:../Generated_Code/IFsh1.c **** **     @param
 353:../Generated_Code/IFsh1.c **** **         Source          - Source address of the data.
 354:../Generated_Code/IFsh1.c **** **     @param
 355:../Generated_Code/IFsh1.c **** **         Dest            - Destination address in FLASH.
 356:../Generated_Code/IFsh1.c **** **     @param
 357:../Generated_Code/IFsh1.c **** **         Count           - Count of the data fields (in the
 358:../Generated_Code/IFsh1.c **** **                           smallest addressable units).
 359:../Generated_Code/IFsh1.c **** **     @return
 360:../Generated_Code/IFsh1.c **** **                         - Error code, possible codes: 
 361:../Generated_Code/IFsh1.c **** **                           - ERR_OK - OK 
 362:../Generated_Code/IFsh1.c **** **                           - ERR_NOTAVAIL - Desired program/erase
 363:../Generated_Code/IFsh1.c **** **                           operation is not available 
 364:../Generated_Code/IFsh1.c **** **                           - ERR_RANGE - The address is out of range 
 365:../Generated_Code/IFsh1.c **** **                           - ERR_BUSY - Device is busy 
 366:../Generated_Code/IFsh1.c **** **                           - ERR_SPEED - This device does not work in
 367:../Generated_Code/IFsh1.c **** **                           the active speed mode 
 368:../Generated_Code/IFsh1.c **** **                           - ERR_PROTECT - Flash is write protect 
 369:../Generated_Code/IFsh1.c **** **                           - ERR_VALUE - Read value is not equal to
 370:../Generated_Code/IFsh1.c **** **                           written value
 371:../Generated_Code/IFsh1.c **** */
 372:../Generated_Code/IFsh1.c **** /* ===================================================================*/
 373:../Generated_Code/IFsh1.c **** byte IFsh1_SetBlockFlash(IFsh1_TDataAddress Source, IFsh1_TAddress Dest, word Count)
 374:../Generated_Code/IFsh1.c **** {
 562              		.loc 1 374 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 16
 565              		@ frame_needed = 1, uses_anonymous_args = 0
 566 0000 80B5     		push	{r7, lr}
 567              		.cfi_def_cfa_offset 8
 568              		.cfi_offset 7, -8
 569              		.cfi_offset 14, -4
 570 0002 84B0     		sub	sp, sp, #16
 571              		.cfi_def_cfa_offset 24
 572 0004 00AF     		add	r7, sp, #0
 573              		.cfi_def_cfa_register 7
 574 0006 F860     		str	r0, [r7, #12]
 575 0008 B960     		str	r1, [r7, #8]
 576 000a 1346     		mov	r3, r2
 577 000c FB80     		strh	r3, [r7, #6]	@ movhi
 375:../Generated_Code/IFsh1.c ****   return IFsh1_SetFlash(Source, Dest, Count);
 578              		.loc 1 375 0
 579 000e FB88     		ldrh	r3, [r7, #6]
 580 0010 F868     		ldr	r0, [r7, #12]
 581 0012 B968     		ldr	r1, [r7, #8]
 582 0014 1A46     		mov	r2, r3
 583 0016 FFF7FEFF 		bl	IFsh1_SetFlash
 584 001a 0346     		mov	r3, r0
 376:../Generated_Code/IFsh1.c **** }
 585              		.loc 1 376 0
 586 001c 1846     		mov	r0, r3
 587 001e 1037     		adds	r7, r7, #16
 588 0020 BD46     		mov	sp, r7
 589              		@ sp needed
 590 0022 80BD     		pop	{r7, pc}
 591              		.cfi_endproc
 592              	.LFE6:
 594              		.section	.text.IFsh1_GetBlockFlash,"ax",%progbits
 595              		.align	2
 596              		.global	IFsh1_GetBlockFlash
 597              		.thumb
 598              		.thumb_func
 600              	IFsh1_GetBlockFlash:
 601              	.LFB7:
 377:../Generated_Code/IFsh1.c **** 
 378:../Generated_Code/IFsh1.c **** /*
 379:../Generated_Code/IFsh1.c **** ** ===================================================================
 380:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_GetBlockFlash (component IntFLASH)
 381:../Generated_Code/IFsh1.c **** */
 382:../Generated_Code/IFsh1.c **** /*!
 383:../Generated_Code/IFsh1.c **** **     @brief
 384:../Generated_Code/IFsh1.c **** **         Reads data from FLASH.
 385:../Generated_Code/IFsh1.c **** **     @param
 386:../Generated_Code/IFsh1.c **** **         Source          - Destination address in FLASH.
 387:../Generated_Code/IFsh1.c **** **     @param
 388:../Generated_Code/IFsh1.c **** **         Dest            - Source address of the data.
 389:../Generated_Code/IFsh1.c **** **     @param
 390:../Generated_Code/IFsh1.c **** **         Count           - Count of the data fields (in the
 391:../Generated_Code/IFsh1.c **** **                           smallest addressable units).
 392:../Generated_Code/IFsh1.c **** **     @return
 393:../Generated_Code/IFsh1.c **** **                         - Error code, possible codes: 
 394:../Generated_Code/IFsh1.c **** **                           - ERR_OK - OK 
 395:../Generated_Code/IFsh1.c **** **                           - ERR_NOTAVAIL - Desired program/erase
 396:../Generated_Code/IFsh1.c **** **                           operation is not available 
 397:../Generated_Code/IFsh1.c **** **                           - ERR_RANGE - The address is out of range 
 398:../Generated_Code/IFsh1.c **** **                           - ERR_BUSY - Device is busy
 399:../Generated_Code/IFsh1.c **** */
 400:../Generated_Code/IFsh1.c **** /* ===================================================================*/
 401:../Generated_Code/IFsh1.c **** byte IFsh1_GetBlockFlash(IFsh1_TAddress Source, IFsh1_TDataAddress Dest, word Count)
 402:../Generated_Code/IFsh1.c **** {
 602              		.loc 1 402 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 24
 605              		@ frame_needed = 1, uses_anonymous_args = 0
 606 0000 80B5     		push	{r7, lr}
 607              		.cfi_def_cfa_offset 8
 608              		.cfi_offset 7, -8
 609              		.cfi_offset 14, -4
 610 0002 86B0     		sub	sp, sp, #24
 611              		.cfi_def_cfa_offset 32
 612 0004 00AF     		add	r7, sp, #0
 613              		.cfi_def_cfa_register 7
 614 0006 F860     		str	r0, [r7, #12]
 615 0008 B960     		str	r1, [r7, #8]
 616 000a 1346     		mov	r3, r2
 617 000c FB80     		strh	r3, [r7, #6]	@ movhi
 403:../Generated_Code/IFsh1.c ****   LDD_TError                 Result;
 404:../Generated_Code/IFsh1.c ****   
 405:../Generated_Code/IFsh1.c ****   if (IFsh1_CmdPending) {
 618              		.loc 1 405 0
 619 000e 1A4B     		ldr	r3, .L42
 620 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 621 0012 002B     		cmp	r3, #0
 622 0014 01D0     		beq	.L37
 406:../Generated_Code/IFsh1.c ****     return ERR_BUSY;
 623              		.loc 1 406 0
 624 0016 0823     		movs	r3, #8
 625 0018 29E0     		b	.L38
 626              	.L37:
 407:../Generated_Code/IFsh1.c ****   }
 408:../Generated_Code/IFsh1.c ****   IFsh1_CurrentCommand = IFsh1_CMD_READ;
 627              		.loc 1 408 0
 628 001a 184B     		ldr	r3, .L42+4
 629 001c 0122     		movs	r2, #1
 630 001e 1A60     		str	r2, [r3]
 409:../Generated_Code/IFsh1.c ****   IFsh1_CmdPending = TRUE;
 631              		.loc 1 409 0
 632 0020 154B     		ldr	r3, .L42
 633 0022 0122     		movs	r2, #1
 634 0024 1A70     		strb	r2, [r3]
 410:../Generated_Code/IFsh1.c ****   Result = IntFlashLdd1_Read(IntFlashLdd1_DevDataPtr, (LDD_FLASH_TAddress)Source, (LDD_TData*)Dest,
 635              		.loc 1 410 0
 636 0026 164B     		ldr	r3, .L42+8
 637 0028 1A68     		ldr	r2, [r3]
 638 002a FB88     		ldrh	r3, [r7, #6]
 639 002c 1046     		mov	r0, r2
 640 002e F968     		ldr	r1, [r7, #12]
 641 0030 BA68     		ldr	r2, [r7, #8]
 642 0032 FFF7FEFF 		bl	IntFlashLdd1_Read
 643 0036 0346     		mov	r3, r0
 644 0038 FB82     		strh	r3, [r7, #22]	@ movhi
 411:../Generated_Code/IFsh1.c ****   if (Result == ERR_OK) {              /* Command accepted? */
 645              		.loc 1 411 0
 646 003a FB8A     		ldrh	r3, [r7, #22]
 647 003c 002B     		cmp	r3, #0
 648 003e 0CD1     		bne	.L39
 649              	.L40:
 412:../Generated_Code/IFsh1.c ****     do {
 413:../Generated_Code/IFsh1.c ****       IntFlashLdd1_Main(IntFlashLdd1_DevDataPtr);
 650              		.loc 1 413 0 discriminator 1
 651 0040 0F4B     		ldr	r3, .L42+8
 652 0042 1B68     		ldr	r3, [r3]
 653 0044 1846     		mov	r0, r3
 654 0046 FFF7FEFF 		bl	IntFlashLdd1_Main
 414:../Generated_Code/IFsh1.c ****     } while (IFsh1_CmdPending);
 655              		.loc 1 414 0 discriminator 1
 656 004a 0B4B     		ldr	r3, .L42
 657 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 658 004e 002B     		cmp	r3, #0
 659 0050 F6D1     		bne	.L40
 415:../Generated_Code/IFsh1.c ****     Result = IFsh1_CmdResult;
 660              		.loc 1 415 0
 661 0052 0C4B     		ldr	r3, .L42+12
 662 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 663 0056 FB82     		strh	r3, [r7, #22]	@ movhi
 664 0058 07E0     		b	.L41
 665              	.L39:
 416:../Generated_Code/IFsh1.c ****   } else if (Result == ERR_PARAM_ADDRESS) {
 666              		.loc 1 416 0
 667 005a FB8A     		ldrh	r3, [r7, #22]
 668 005c 892B     		cmp	r3, #137
 669 005e 04D1     		bne	.L41
 417:../Generated_Code/IFsh1.c ****     IFsh1_CmdPending = FALSE;
 670              		.loc 1 417 0
 671 0060 054B     		ldr	r3, .L42
 672 0062 0022     		movs	r2, #0
 673 0064 1A70     		strb	r2, [r3]
 418:../Generated_Code/IFsh1.c ****     Result = ERR_RANGE;
 674              		.loc 1 418 0
 675 0066 0223     		movs	r3, #2
 676 0068 FB82     		strh	r3, [r7, #22]	@ movhi
 677              	.L41:
 419:../Generated_Code/IFsh1.c ****   } else {
 420:../Generated_Code/IFsh1.c ****   }
 421:../Generated_Code/IFsh1.c ****   return (byte)Result;
 678              		.loc 1 421 0
 679 006a FB8A     		ldrh	r3, [r7, #22]	@ movhi
 680 006c DBB2     		uxtb	r3, r3
 681              	.L38:
 422:../Generated_Code/IFsh1.c **** }
 682              		.loc 1 422 0
 683 006e 1846     		mov	r0, r3
 684 0070 1837     		adds	r7, r7, #24
 685 0072 BD46     		mov	sp, r7
 686              		@ sp needed
 687 0074 80BD     		pop	{r7, pc}
 688              	.L43:
 689 0076 00BF     		.align	2
 690              	.L42:
 691 0078 00000000 		.word	IFsh1_CmdPending
 692 007c 00000000 		.word	IFsh1_CurrentCommand
 693 0080 00000000 		.word	IntFlashLdd1_DevDataPtr
 694 0084 00000000 		.word	IFsh1_CmdResult
 695              		.cfi_endproc
 696              	.LFE7:
 698              		.section	.text.IntFlashLdd1_OnOperationComplete,"ax",%progbits
 699              		.align	2
 700              		.global	IntFlashLdd1_OnOperationComplete
 701              		.thumb
 702              		.thumb_func
 704              	IntFlashLdd1_OnOperationComplete:
 705              	.LFB8:
 423:../Generated_Code/IFsh1.c **** 
 424:../Generated_Code/IFsh1.c **** /*
 425:../Generated_Code/IFsh1.c **** ** ===================================================================
 426:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_OnOperationComplete (component IntFLASH)
 427:../Generated_Code/IFsh1.c **** **
 428:../Generated_Code/IFsh1.c **** **     Description :
 429:../Generated_Code/IFsh1.c **** **         This method is internal. It is used by Processor Expert only.
 430:../Generated_Code/IFsh1.c **** ** ===================================================================
 431:../Generated_Code/IFsh1.c **** */
 432:../Generated_Code/IFsh1.c **** void IntFlashLdd1_OnOperationComplete(LDD_TUserData *UserDataPtr)
 433:../Generated_Code/IFsh1.c **** {
 706              		.loc 1 433 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 16
 709              		@ frame_needed = 1, uses_anonymous_args = 0
 710 0000 80B5     		push	{r7, lr}
 711              		.cfi_def_cfa_offset 8
 712              		.cfi_offset 7, -8
 713              		.cfi_offset 14, -4
 714 0002 84B0     		sub	sp, sp, #16
 715              		.cfi_def_cfa_offset 24
 716 0004 00AF     		add	r7, sp, #0
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 434:../Generated_Code/IFsh1.c ****   uint32_t  x;
 435:../Generated_Code/IFsh1.c ****   
 436:../Generated_Code/IFsh1.c ****   (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning *
 437:../Generated_Code/IFsh1.c ****   IFsh1_CmdResult = ERR_OK;            /* No error appears */
 719              		.loc 1 437 0
 720 0008 574B     		ldr	r3, .L61
 721 000a 0022     		movs	r2, #0
 722 000c 1A70     		strb	r2, [r3]
 438:../Generated_Code/IFsh1.c ****   switch (IFsh1_CurrentCommand) {
 723              		.loc 1 438 0
 724 000e 574B     		ldr	r3, .L61+4
 725 0010 1B68     		ldr	r3, [r3]
 726 0012 052B     		cmp	r3, #5
 727 0014 03D0     		beq	.L46
 728 0016 062B     		cmp	r3, #6
 729 0018 00F08480 		beq	.L47
 730 001c 9CE0     		b	.L60
 731              	.L46:
 439:../Generated_Code/IFsh1.c ****     case IFsh1_CMD_WRITE:
 440:../Generated_Code/IFsh1.c ****       if (IFsh1_RemainingDataSize != 0U) {
 732              		.loc 1 440 0
 733 001e 544B     		ldr	r3, .L61+8
 734 0020 1B68     		ldr	r3, [r3]
 735 0022 002B     		cmp	r3, #0
 736 0024 7AD0     		beq	.L48
 441:../Generated_Code/IFsh1.c ****         IFsh1_CurrentDataAddress = IFsh1_NextSrcDataAddress;
 737              		.loc 1 441 0
 738 0026 534B     		ldr	r3, .L61+12
 739 0028 1A68     		ldr	r2, [r3]
 740 002a 534B     		ldr	r3, .L61+16
 741 002c 1A60     		str	r2, [r3]
 442:../Generated_Code/IFsh1.c ****         IFsh1_FlashAddress += IFsh1_CurrentDataSize;
 742              		.loc 1 442 0
 743 002e 534B     		ldr	r3, .L61+20
 744 0030 1A68     		ldr	r2, [r3]
 745 0032 534B     		ldr	r3, .L61+24
 746 0034 1B68     		ldr	r3, [r3]
 747 0036 1A44     		add	r2, r2, r3
 748 0038 504B     		ldr	r3, .L61+20
 749 003a 1A60     		str	r2, [r3]
 443:../Generated_Code/IFsh1.c ****         if (IFsh1_RemainingDataSize % IntFlashLdd1_ERASABLE_UNIT_SIZE) {
 750              		.loc 1 443 0
 751 003c 4C4B     		ldr	r3, .L61+8
 752 003e 1B68     		ldr	r3, [r3]
 753 0040 C3F30B03 		ubfx	r3, r3, #0, #12
 754 0044 002B     		cmp	r3, #0
 755 0046 47D0     		beq	.L49
 444:../Generated_Code/IFsh1.c ****           /* Remaining data size is NOT multiple of sector size */
 445:../Generated_Code/IFsh1.c ****           if (IFsh1_RemainingDataSize < IntFlashLdd1_ERASABLE_UNIT_SIZE) { /* Last sector? */
 756              		.loc 1 445 0
 757 0048 494B     		ldr	r3, .L61+8
 758 004a 1B68     		ldr	r3, [r3]
 759 004c B3F5805F 		cmp	r3, #4096
 760 0050 2CD2     		bcs	.L50
 446:../Generated_Code/IFsh1.c ****             for (x=0U; x<IntFlashLdd1_ERASABLE_UNIT_SIZE;x++) {
 761              		.loc 1 446 0
 762 0052 0023     		movs	r3, #0
 763 0054 FB60     		str	r3, [r7, #12]
 764 0056 1AE0     		b	.L51
 765              	.L54:
 447:../Generated_Code/IFsh1.c ****               if (x<IFsh1_RemainingDataSize) {
 766              		.loc 1 447 0
 767 0058 454B     		ldr	r3, .L61+8
 768 005a 1B68     		ldr	r3, [r3]
 769 005c FA68     		ldr	r2, [r7, #12]
 770 005e 9A42     		cmp	r2, r3
 771 0060 09D2     		bcs	.L52
 448:../Generated_Code/IFsh1.c ****                 ((uint8_t*)(void*)&tmpSector)[x] = ((uint8_t*)(void*)IFsh1_NextSrcDataAddress)[x];
 772              		.loc 1 448 0
 773 0062 FA68     		ldr	r2, [r7, #12]
 774 0064 474B     		ldr	r3, .L61+28
 775 0066 1344     		add	r3, r3, r2
 776 0068 424A     		ldr	r2, .L61+12
 777 006a 1168     		ldr	r1, [r2]
 778 006c FA68     		ldr	r2, [r7, #12]
 779 006e 0A44     		add	r2, r2, r1
 780 0070 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 781 0072 1A70     		strb	r2, [r3]
 782 0074 08E0     		b	.L53
 783              	.L52:
 449:../Generated_Code/IFsh1.c ****               } else {
 450:../Generated_Code/IFsh1.c ****                 ((uint8_t*)(void*)&tmpSector)[x] = ((uint8_t*)(void*)IFsh1_FlashAddress)[x];
 784              		.loc 1 450 0
 785 0076 FA68     		ldr	r2, [r7, #12]
 786 0078 424B     		ldr	r3, .L61+28
 787 007a 1344     		add	r3, r3, r2
 788 007c 3F4A     		ldr	r2, .L61+20
 789 007e 1168     		ldr	r1, [r2]
 790 0080 FA68     		ldr	r2, [r7, #12]
 791 0082 0A44     		add	r2, r2, r1
 792 0084 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 793 0086 1A70     		strb	r2, [r3]
 794              	.L53:
 446:../Generated_Code/IFsh1.c ****             for (x=0U; x<IntFlashLdd1_ERASABLE_UNIT_SIZE;x++) {
 795              		.loc 1 446 0
 796 0088 FB68     		ldr	r3, [r7, #12]
 797 008a 0133     		adds	r3, r3, #1
 798 008c FB60     		str	r3, [r7, #12]
 799              	.L51:
 446:../Generated_Code/IFsh1.c ****             for (x=0U; x<IntFlashLdd1_ERASABLE_UNIT_SIZE;x++) {
 800              		.loc 1 446 0 is_stmt 0 discriminator 1
 801 008e FB68     		ldr	r3, [r7, #12]
 802 0090 B3F5805F 		cmp	r3, #4096
 803 0094 E0D3     		bcc	.L54
 451:../Generated_Code/IFsh1.c ****               }
 452:../Generated_Code/IFsh1.c ****             }
 453:../Generated_Code/IFsh1.c ****             IFsh1_CurrentDataAddress = &tmpSector;
 804              		.loc 1 453 0 is_stmt 1
 805 0096 384B     		ldr	r3, .L61+16
 806 0098 3A4A     		ldr	r2, .L61+28
 807 009a 1A60     		str	r2, [r3]
 454:../Generated_Code/IFsh1.c ****             IFsh1_CurrentDataSize = IntFlashLdd1_ERASABLE_UNIT_SIZE;
 808              		.loc 1 454 0
 809 009c 384B     		ldr	r3, .L61+24
 810 009e 4FF48052 		mov	r2, #4096
 811 00a2 1A60     		str	r2, [r3]
 455:../Generated_Code/IFsh1.c ****             IFsh1_RemainingDataSize = 0U;
 812              		.loc 1 455 0
 813 00a4 324B     		ldr	r3, .L61+8
 814 00a6 0022     		movs	r2, #0
 815 00a8 1A60     		str	r2, [r3]
 816 00aa 1CE0     		b	.L56
 817              	.L50:
 456:../Generated_Code/IFsh1.c ****           } else {
 457:../Generated_Code/IFsh1.c ****             IFsh1_CurrentDataSize = (IFsh1_RemainingDataSize / IntFlashLdd1_ERASABLE_UNIT_SIZE)*Int
 818              		.loc 1 457 0
 819 00ac 304B     		ldr	r3, .L61+8
 820 00ae 1B68     		ldr	r3, [r3]
 821 00b0 1B0B     		lsrs	r3, r3, #12
 822 00b2 1A03     		lsls	r2, r3, #12
 823 00b4 324B     		ldr	r3, .L61+24
 824 00b6 1A60     		str	r2, [r3]
 458:../Generated_Code/IFsh1.c ****             IFsh1_RemainingDataSize = IFsh1_RemainingDataSize % IntFlashLdd1_ERASABLE_UNIT_SIZE;
 825              		.loc 1 458 0
 826 00b8 2D4B     		ldr	r3, .L61+8
 827 00ba 1B68     		ldr	r3, [r3]
 828 00bc C3F30B02 		ubfx	r2, r3, #0, #12
 829 00c0 2B4B     		ldr	r3, .L61+8
 830 00c2 1A60     		str	r2, [r3]
 459:../Generated_Code/IFsh1.c ****             IFsh1_NextSrcDataAddress = (IFsh1_TDataAddress)((uint32_t)IFsh1_NextSrcDataAddress + IF
 831              		.loc 1 459 0
 832 00c4 2B4B     		ldr	r3, .L61+12
 833 00c6 1B68     		ldr	r3, [r3]
 834 00c8 1A46     		mov	r2, r3
 835 00ca 2D4B     		ldr	r3, .L61+24
 836 00cc 1B68     		ldr	r3, [r3]
 837 00ce 1344     		add	r3, r3, r2
 838 00d0 1A46     		mov	r2, r3
 839 00d2 284B     		ldr	r3, .L61+12
 840 00d4 1A60     		str	r2, [r3]
 841 00d6 06E0     		b	.L56
 842              	.L49:
 460:../Generated_Code/IFsh1.c ****           }
 461:../Generated_Code/IFsh1.c ****         } else {
 462:../Generated_Code/IFsh1.c ****           /* Remaining data size is multiple of sector size */
 463:../Generated_Code/IFsh1.c ****           IFsh1_CurrentDataSize = IFsh1_RemainingDataSize;
 843              		.loc 1 463 0
 844 00d8 254B     		ldr	r3, .L61+8
 845 00da 1A68     		ldr	r2, [r3]
 846 00dc 284B     		ldr	r3, .L61+24
 847 00de 1A60     		str	r2, [r3]
 464:../Generated_Code/IFsh1.c ****           IFsh1_RemainingDataSize = 0U;
 848              		.loc 1 464 0
 849 00e0 234B     		ldr	r3, .L61+8
 850 00e2 0022     		movs	r2, #0
 851 00e4 1A60     		str	r2, [r3]
 852              	.L56:
 465:../Generated_Code/IFsh1.c ****         }
 466:../Generated_Code/IFsh1.c ****         IFsh1_CurrentCommand = IFsh1_CMD_WRITE_ERASE;
 853              		.loc 1 466 0
 854 00e6 214B     		ldr	r3, .L61+4
 855 00e8 0622     		movs	r2, #6
 856 00ea 1A60     		str	r2, [r3]
 467:../Generated_Code/IFsh1.c ****         IFsh1_CmdResult = (byte)IntFlashLdd1_Erase(IntFlashLdd1_DevDataPtr, IFsh1_FlashAddress, IFs
 857              		.loc 1 467 0
 858 00ec 264B     		ldr	r3, .L61+32
 859 00ee 1968     		ldr	r1, [r3]
 860 00f0 224B     		ldr	r3, .L61+20
 861 00f2 1A68     		ldr	r2, [r3]
 862 00f4 224B     		ldr	r3, .L61+24
 863 00f6 1B68     		ldr	r3, [r3]
 864 00f8 0846     		mov	r0, r1
 865 00fa 1146     		mov	r1, r2
 866 00fc 1A46     		mov	r2, r3
 867 00fe FFF7FEFF 		bl	IntFlashLdd1_Erase
 868 0102 0346     		mov	r3, r0
 869 0104 DAB2     		uxtb	r2, r3
 870 0106 184B     		ldr	r3, .L61
 871 0108 1A70     		strb	r2, [r3]
 468:../Generated_Code/IFsh1.c ****         if (IFsh1_CmdResult != ERR_OK) { /* Erase command error? */
 872              		.loc 1 468 0
 873 010a 174B     		ldr	r3, .L61
 874 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 875 010e 002B     		cmp	r3, #0
 876 0110 03D0     		beq	.L57
 469:../Generated_Code/IFsh1.c ****           IFsh1_CmdPending = FALSE;    /* Command is finished */
 877              		.loc 1 469 0
 878 0112 1E4B     		ldr	r3, .L61+36
 879 0114 0022     		movs	r2, #0
 880 0116 1A70     		strb	r2, [r3]
 470:../Generated_Code/IFsh1.c ****         }
 471:../Generated_Code/IFsh1.c ****         return;
 881              		.loc 1 471 0
 882 0118 22E0     		b	.L44
 883              	.L57:
 884 011a 21E0     		b	.L44
 885              	.L48:
 472:../Generated_Code/IFsh1.c ****       } else {
 473:../Generated_Code/IFsh1.c ****         IFsh1_CmdPending = FALSE;      /* Command is finished */
 886              		.loc 1 473 0
 887 011c 1B4B     		ldr	r3, .L61+36
 888 011e 0022     		movs	r2, #0
 889 0120 1A70     		strb	r2, [r3]
 474:../Generated_Code/IFsh1.c ****       }
 475:../Generated_Code/IFsh1.c ****       break;
 890              		.loc 1 475 0
 891 0122 1DE0     		b	.L44
 892              	.L47:
 476:../Generated_Code/IFsh1.c ****     case IFsh1_CMD_WRITE_ERASE:
 477:../Generated_Code/IFsh1.c ****       IFsh1_CurrentCommand = IFsh1_CMD_WRITE;
 893              		.loc 1 477 0
 894 0124 114B     		ldr	r3, .L61+4
 895 0126 0522     		movs	r2, #5
 896 0128 1A60     		str	r2, [r3]
 478:../Generated_Code/IFsh1.c ****       IFsh1_CmdResult = (byte)IntFlashLdd1_Write(IntFlashLdd1_DevDataPtr, IFsh1_CurrentDataAddress,
 897              		.loc 1 478 0
 898 012a 174B     		ldr	r3, .L61+32
 899 012c 1868     		ldr	r0, [r3]
 900 012e 124B     		ldr	r3, .L61+16
 901 0130 1968     		ldr	r1, [r3]
 902 0132 124B     		ldr	r3, .L61+20
 903 0134 1A68     		ldr	r2, [r3]
 904 0136 124B     		ldr	r3, .L61+24
 905 0138 1B68     		ldr	r3, [r3]
 906 013a FFF7FEFF 		bl	IntFlashLdd1_Write
 907 013e 0346     		mov	r3, r0
 908 0140 DAB2     		uxtb	r2, r3
 909 0142 094B     		ldr	r3, .L61
 910 0144 1A70     		strb	r2, [r3]
 479:../Generated_Code/IFsh1.c ****       if (IFsh1_CmdResult != ERR_OK) { /* Write command error? */
 911              		.loc 1 479 0
 912 0146 084B     		ldr	r3, .L61
 913 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 914 014a 002B     		cmp	r3, #0
 915 014c 03D0     		beq	.L59
 480:../Generated_Code/IFsh1.c ****         IFsh1_CmdPending = FALSE;      /* Command is finished */
 916              		.loc 1 480 0
 917 014e 0F4B     		ldr	r3, .L61+36
 918 0150 0022     		movs	r2, #0
 919 0152 1A70     		strb	r2, [r3]
 481:../Generated_Code/IFsh1.c ****       }
 482:../Generated_Code/IFsh1.c ****       return;
 920              		.loc 1 482 0
 921 0154 04E0     		b	.L44
 922              	.L59:
 923 0156 03E0     		b	.L44
 924              	.L60:
 483:../Generated_Code/IFsh1.c ****     default:
 484:../Generated_Code/IFsh1.c ****       IFsh1_CmdPending = FALSE;        /* Command is finished */
 925              		.loc 1 484 0
 926 0158 0C4B     		ldr	r3, .L61+36
 927 015a 0022     		movs	r2, #0
 928 015c 1A70     		strb	r2, [r3]
 485:../Generated_Code/IFsh1.c ****       return;
 929              		.loc 1 485 0
 930 015e 00BF     		nop
 931              	.L44:
 486:../Generated_Code/IFsh1.c ****   }
 487:../Generated_Code/IFsh1.c **** }
 932              		.loc 1 487 0
 933 0160 1037     		adds	r7, r7, #16
 934 0162 BD46     		mov	sp, r7
 935              		@ sp needed
 936 0164 80BD     		pop	{r7, pc}
 937              	.L62:
 938 0166 00BF     		.align	2
 939              	.L61:
 940 0168 00000000 		.word	IFsh1_CmdResult
 941 016c 00000000 		.word	IFsh1_CurrentCommand
 942 0170 00000000 		.word	IFsh1_RemainingDataSize
 943 0174 00000000 		.word	IFsh1_NextSrcDataAddress
 944 0178 00000000 		.word	IFsh1_CurrentDataAddress
 945 017c 00000000 		.word	IFsh1_FlashAddress
 946 0180 00000000 		.word	IFsh1_CurrentDataSize
 947 0184 00000000 		.word	tmpSector
 948 0188 00000000 		.word	IntFlashLdd1_DevDataPtr
 949 018c 00000000 		.word	IFsh1_CmdPending
 950              		.cfi_endproc
 951              	.LFE8:
 953              		.section	.text.IntFlashLdd1_OnError,"ax",%progbits
 954              		.align	2
 955              		.global	IntFlashLdd1_OnError
 956              		.thumb
 957              		.thumb_func
 959              	IntFlashLdd1_OnError:
 960              	.LFB9:
 488:../Generated_Code/IFsh1.c **** 
 489:../Generated_Code/IFsh1.c **** /*
 490:../Generated_Code/IFsh1.c **** ** ===================================================================
 491:../Generated_Code/IFsh1.c **** **     Method      :  IFsh1_OnError (component IntFLASH)
 492:../Generated_Code/IFsh1.c **** **
 493:../Generated_Code/IFsh1.c **** **     Description :
 494:../Generated_Code/IFsh1.c **** **         This method is internal. It is used by Processor Expert only.
 495:../Generated_Code/IFsh1.c **** ** ===================================================================
 496:../Generated_Code/IFsh1.c **** */
 497:../Generated_Code/IFsh1.c **** void IntFlashLdd1_OnError(LDD_TUserData *UserDataPtr)
 498:../Generated_Code/IFsh1.c **** {
 961              		.loc 1 498 0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 24
 964              		@ frame_needed = 1, uses_anonymous_args = 0
 965 0000 80B5     		push	{r7, lr}
 966              		.cfi_def_cfa_offset 8
 967              		.cfi_offset 7, -8
 968              		.cfi_offset 14, -4
 969 0002 86B0     		sub	sp, sp, #24
 970              		.cfi_def_cfa_offset 32
 971 0004 00AF     		add	r7, sp, #0
 972              		.cfi_def_cfa_register 7
 973 0006 7860     		str	r0, [r7, #4]
 499:../Generated_Code/IFsh1.c ****   LDD_FLASH_TErrorStatus FLASH_LDD_ErrorStatus;
 500:../Generated_Code/IFsh1.c **** 
 501:../Generated_Code/IFsh1.c ****   (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning *
 502:../Generated_Code/IFsh1.c ****   IFsh1_CmdPending = FALSE;
 974              		.loc 1 502 0
 975 0008 0E4B     		ldr	r3, .L66
 976 000a 0022     		movs	r2, #0
 977 000c 1A70     		strb	r2, [r3]
 503:../Generated_Code/IFsh1.c ****   IFsh1_CurrentCommand = IFsh1_CMD_NONE;
 978              		.loc 1 503 0
 979 000e 0E4B     		ldr	r3, .L66+4
 980 0010 0022     		movs	r2, #0
 981 0012 1A60     		str	r2, [r3]
 504:../Generated_Code/IFsh1.c ****   IntFlashLdd1_GetError(IntFlashLdd1_DevDataPtr, &FLASH_LDD_ErrorStatus);
 982              		.loc 1 504 0
 983 0014 0D4B     		ldr	r3, .L66+8
 984 0016 1A68     		ldr	r2, [r3]
 985 0018 07F10803 		add	r3, r7, #8
 986 001c 1046     		mov	r0, r2
 987 001e 1946     		mov	r1, r3
 988 0020 FFF7FEFF 		bl	IntFlashLdd1_GetError
 505:../Generated_Code/IFsh1.c ****   if (FLASH_LDD_ErrorStatus.CurrentErrorFlags & LDD_FLASH_PROTECTION_VIOLATION) {
 989              		.loc 1 505 0
 990 0024 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 991 0026 03F01003 		and	r3, r3, #16
 992 002a 002B     		cmp	r3, #0
 993 002c 03D0     		beq	.L64
 506:../Generated_Code/IFsh1.c ****     IFsh1_CmdResult = ERR_PROTECT;     /* Protection violation */
 994              		.loc 1 506 0
 995 002e 084B     		ldr	r3, .L66+12
 996 0030 1622     		movs	r2, #22
 997 0032 1A70     		strb	r2, [r3]
 998 0034 02E0     		b	.L63
 999              	.L64:
 507:../Generated_Code/IFsh1.c ****   } else {
 508:../Generated_Code/IFsh1.c ****     IFsh1_CmdResult = ERR_VALUE;       /* Access error or Read collision error */
 1000              		.loc 1 508 0
 1001 0036 064B     		ldr	r3, .L66+12
 1002 0038 0322     		movs	r2, #3
 1003 003a 1A70     		strb	r2, [r3]
 1004              	.L63:
 509:../Generated_Code/IFsh1.c ****   }
 510:../Generated_Code/IFsh1.c **** }
 1005              		.loc 1 510 0
 1006 003c 1837     		adds	r7, r7, #24
 1007 003e BD46     		mov	sp, r7
 1008              		@ sp needed
 1009 0040 80BD     		pop	{r7, pc}
 1010              	.L67:
 1011 0042 00BF     		.align	2
 1012              	.L66:
 1013 0044 00000000 		.word	IFsh1_CmdPending
 1014 0048 00000000 		.word	IFsh1_CurrentCommand
 1015 004c 00000000 		.word	IntFlashLdd1_DevDataPtr
 1016 0050 00000000 		.word	IFsh1_CmdResult
 1017              		.cfi_endproc
 1018              	.LFE9:
 1020              		.text
 1021              	.Letext0:
 1022              		.file 2 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1023              		.file 3 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\stdint.h"
 1024              		.file 4 "../Generated_Code/PE_Types.h"
 1025              		.file 5 "../Generated_Code/IFsh1.h"
DEFINED SYMBOLS
                            *ABS*:00000000 IFsh1.c
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:21     .bss.IFsh1_CurrentCommand:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:24     .bss.IFsh1_CurrentCommand:00000000 IFsh1_CurrentCommand
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:29     .bss.IFsh1_CmdResult:00000000 IFsh1_CmdResult
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:30     .bss.IFsh1_CmdResult:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:34     .bss.IFsh1_CmdPending:00000000 IFsh1_CmdPending
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:35     .bss.IFsh1_CmdPending:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:39     .bss.IFsh1_EnEvent:00000000 IFsh1_EnEvent
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:40     .bss.IFsh1_EnEvent:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:42     .bss.IntFlashLdd1_DevDataPtr:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:45     .bss.IntFlashLdd1_DevDataPtr:00000000 IntFlashLdd1_DevDataPtr
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:48     .bss.IFsh1_CurrentDataAddress:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:51     .bss.IFsh1_CurrentDataAddress:00000000 IFsh1_CurrentDataAddress
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:54     .bss.IFsh1_CurrentDataSize:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:57     .bss.IFsh1_CurrentDataSize:00000000 IFsh1_CurrentDataSize
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:60     .bss.IFsh1_FlashAddress:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:63     .bss.IFsh1_FlashAddress:00000000 IFsh1_FlashAddress
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:66     .bss.IFsh1_NextSrcDataAddress:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:69     .bss.IFsh1_NextSrcDataAddress:00000000 IFsh1_NextSrcDataAddress
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:72     .bss.IFsh1_RemainingDataSize:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:75     .bss.IFsh1_RemainingDataSize:00000000 IFsh1_RemainingDataSize
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:78     .bss.tmpSector:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:81     .bss.tmpSector:00000000 tmpSector
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:84     .text.IFsh1_SetFlash:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:89     .text.IFsh1_SetFlash:00000000 IFsh1_SetFlash
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:346    .text.IFsh1_SetFlash:00000180 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:360    .text.IFsh1_Init:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:365    .text.IFsh1_Init:00000000 IFsh1_Init
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:396    .text.IFsh1_Init:00000020 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:403    .text.IFsh1_DisableEvent:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:408    .text.IFsh1_DisableEvent:00000000 IFsh1_DisableEvent
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:435    .text.IFsh1_DisableEvent:00000018 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:440    .text.IFsh1_EnableEvent:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:445    .text.IFsh1_EnableEvent:00000000 IFsh1_EnableEvent
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:472    .text.IFsh1_EnableEvent:00000018 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:477    .text.IFsh1_SetByteFlash:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:482    .text.IFsh1_SetByteFlash:00000000 IFsh1_SetByteFlash
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:516    .text.IFsh1_SetWordFlash:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:521    .text.IFsh1_SetWordFlash:00000000 IFsh1_SetWordFlash
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:555    .text.IFsh1_SetBlockFlash:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:560    .text.IFsh1_SetBlockFlash:00000000 IFsh1_SetBlockFlash
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:595    .text.IFsh1_GetBlockFlash:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:600    .text.IFsh1_GetBlockFlash:00000000 IFsh1_GetBlockFlash
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:691    .text.IFsh1_GetBlockFlash:00000078 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:699    .text.IntFlashLdd1_OnOperationComplete:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:704    .text.IntFlashLdd1_OnOperationComplete:00000000 IntFlashLdd1_OnOperationComplete
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:940    .text.IntFlashLdd1_OnOperationComplete:00000168 $d
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:954    .text.IntFlashLdd1_OnError:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:959    .text.IntFlashLdd1_OnError:00000000 IntFlashLdd1_OnError
C:\Users\Aron\AppData\Local\Temp\ccJQeUjr.s:1013   .text.IntFlashLdd1_OnError:00000044 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22dcf9ce9babd46e5ea858ea4400d115
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.PE_Types.h.68.de7a315b6e4c635a9a7a45ae6ec20b08
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.60.44eca2ca2a72148441f11b3e43b344a9
                           .group:00000000 wm4.MK22F12.h.59.83dcc0895f45d7d67f2182a38aa7f04f
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.FTFE_PDD.h.51.eb57e3c46f91013d6db57cd5bceae4af
                           .group:00000000 wm4.FMC_PDD.h.9.181464bd332af8d36f15c072c1936de8
                           .group:00000000 wm4.Cpu.h.66.9574a96471c5a4e92ddf5418cbdcf9a5
                           .group:00000000 wm4.IntFlashLdd1.h.119.6ef6fcca95541f24b629003abfa3038e
                           .group:00000000 wm4.IFsh1.h.121.c87d7033c18812659e3ae9b3118ceeb7

UNDEFINED SYMBOLS
memcpy
IntFlashLdd1_Erase
IntFlashLdd1_Main
IntFlashLdd1_Write
IntFlashLdd1_Init
IntFlashLdd1_Read
IntFlashLdd1_GetError
