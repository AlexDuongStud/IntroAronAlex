   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"ADC_Bat.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.rodata.ChannelToPin,"a",%progbits
  21              		.align	2
  24              	ChannelToPin:
  25 0000 13       		.byte	19
  26 0001 000000   		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  27              		.align	2
  30              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  31 0000 00000000 		.space	8
  31      00000000 
  32              		.section	.text.ADC_Bat_Init,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_Bat_Init
  35              		.thumb
  36              		.thumb_func
  38              	ADC_Bat_Init:
  39              	.LFB0:
  40              		.file 1 "../Generated_Code/ADC_Bat.c"
   1:../Generated_Code/ADC_Bat.c **** /* ###################################################################
   2:../Generated_Code/ADC_Bat.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/ADC_Bat.c **** **     Filename    : ADC_Bat.c
   4:../Generated_Code/ADC_Bat.c **** **     Project     : TEAM_Robot
   5:../Generated_Code/ADC_Bat.c **** **     Processor   : MK22FX512VLK12
   6:../Generated_Code/ADC_Bat.c **** **     Component   : ADC_LDD
   7:../Generated_Code/ADC_Bat.c **** **     Version     : Component 01.183, Driver 01.08, CPU db: 3.00.000
   8:../Generated_Code/ADC_Bat.c **** **     Repository  : Kinetis
   9:../Generated_Code/ADC_Bat.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/ADC_Bat.c **** **     Date/Time   : 2018-09-28, 15:03, # CodeGen: 0
  11:../Generated_Code/ADC_Bat.c **** **     Abstract    :
  12:../Generated_Code/ADC_Bat.c **** **         This device "ADC_LDD" implements an A/D converter,
  13:../Generated_Code/ADC_Bat.c **** **         its control methods and interrupt/event handling procedure.
  14:../Generated_Code/ADC_Bat.c **** **     Settings    :
  15:../Generated_Code/ADC_Bat.c **** **          Component name                                 : ADC_Bat
  16:../Generated_Code/ADC_Bat.c **** **          A/D converter                                  : ADC1
  17:../Generated_Code/ADC_Bat.c **** **          Discontinuous mode                             : no
  18:../Generated_Code/ADC_Bat.c **** **          Interrupt service/event                        : Disabled
  19:../Generated_Code/ADC_Bat.c **** **          DMA                                            : Disabled
  20:../Generated_Code/ADC_Bat.c **** **          A/D channel list                               : 1
  21:../Generated_Code/ADC_Bat.c **** **            Channel 0                                    : 
  22:../Generated_Code/ADC_Bat.c **** **              Channel mode                               : Single Ended
  23:../Generated_Code/ADC_Bat.c **** **                Input                                    : 
  24:../Generated_Code/ADC_Bat.c **** **                  A/D channel (pin)                      : ADC1_DM0/ADC0_DM3
  25:../Generated_Code/ADC_Bat.c **** **                  A/D channel (pin) signal               : ADC_Battery
  26:../Generated_Code/ADC_Bat.c **** **          Static sample groups                           : Disabled
  27:../Generated_Code/ADC_Bat.c **** **          Max. samples                                   : 8
  28:../Generated_Code/ADC_Bat.c **** **          A/D resolution                                 : Autoselect
  29:../Generated_Code/ADC_Bat.c **** **          Low-power mode                                 : Disabled
  30:../Generated_Code/ADC_Bat.c **** **          High-speed conversion mode                     : Disabled
  31:../Generated_Code/ADC_Bat.c **** **          Asynchro clock output                          : Disabled
  32:../Generated_Code/ADC_Bat.c **** **          Sample time                                    : 24 clock periods
  33:../Generated_Code/ADC_Bat.c **** **          Number of conversions                          : 8
  34:../Generated_Code/ADC_Bat.c **** **          Conversion time                                : 48 µs
  35:../Generated_Code/ADC_Bat.c **** **          ADC clock                                      : 7.5 MHz (133.333 ns)
  36:../Generated_Code/ADC_Bat.c **** **          Single conversion time - Single-ended          : 48.483 us
  37:../Generated_Code/ADC_Bat.c **** **          Single conversion time - Differential          : 58.083 us
  38:../Generated_Code/ADC_Bat.c **** **          Additional conversion time - Single-ended      : 48 us
  39:../Generated_Code/ADC_Bat.c **** **          Additional conversion time - Differential      : 57.6 us
  40:../Generated_Code/ADC_Bat.c **** **          Result type                                    : unsigned 16 bits, right justified
  41:../Generated_Code/ADC_Bat.c **** **          Trigger                                        : Disabled
  42:../Generated_Code/ADC_Bat.c **** **          Voltage reference                              : 
  43:../Generated_Code/ADC_Bat.c **** **            High voltage reference                       : 
  44:../Generated_Code/ADC_Bat.c **** **              Volt. ref. pin                             : VREFH
  45:../Generated_Code/ADC_Bat.c **** **              Volt. ref pin signal                       : 
  46:../Generated_Code/ADC_Bat.c **** **            Low voltage reference                        : 
  47:../Generated_Code/ADC_Bat.c **** **              Volt. ref. pin                             : VREFL
  48:../Generated_Code/ADC_Bat.c **** **              Volt. ref pin signal                       : 
  49:../Generated_Code/ADC_Bat.c **** **          Initialization                                 : 
  50:../Generated_Code/ADC_Bat.c **** **            Enabled in init. code                        : yes
  51:../Generated_Code/ADC_Bat.c **** **            Auto initialization                          : yes
  52:../Generated_Code/ADC_Bat.c **** **            Event mask                                   : 
  53:../Generated_Code/ADC_Bat.c **** **              OnMeasurementComplete                      : Disabled
  54:../Generated_Code/ADC_Bat.c **** **              OnError                                    : Disabled
  55:../Generated_Code/ADC_Bat.c **** **          CPU clock/configuration selection              : 
  56:../Generated_Code/ADC_Bat.c **** **            Clock configuration 0                        : This component enabled
  57:../Generated_Code/ADC_Bat.c **** **            Clock configuration 1                        : This component disabled
  58:../Generated_Code/ADC_Bat.c **** **            Clock configuration 2                        : This component disabled
  59:../Generated_Code/ADC_Bat.c **** **            Clock configuration 3                        : This component disabled
  60:../Generated_Code/ADC_Bat.c **** **            Clock configuration 4                        : This component disabled
  61:../Generated_Code/ADC_Bat.c **** **            Clock configuration 5                        : This component disabled
  62:../Generated_Code/ADC_Bat.c **** **            Clock configuration 6                        : This component disabled
  63:../Generated_Code/ADC_Bat.c **** **            Clock configuration 7                        : This component disabled
  64:../Generated_Code/ADC_Bat.c **** **     Contents    :
  65:../Generated_Code/ADC_Bat.c **** **         Init                         - LDD_TDeviceData* ADC_Bat_Init(LDD_TUserData *UserDataPtr)
  66:../Generated_Code/ADC_Bat.c **** **         StartSingleMeasurement       - LDD_TError ADC_Bat_StartSingleMeasurement(LDD_TDeviceData
  67:../Generated_Code/ADC_Bat.c **** **         GetMeasuredValues            - LDD_TError ADC_Bat_GetMeasuredValues(LDD_TDeviceData *Dev
  68:../Generated_Code/ADC_Bat.c **** **         CreateSampleGroup            - LDD_TError ADC_Bat_CreateSampleGroup(LDD_TDeviceData *Dev
  69:../Generated_Code/ADC_Bat.c **** **         GetMeasurementCompleteStatus - bool ADC_Bat_GetMeasurementCompleteStatus(LDD_TDeviceData
  70:../Generated_Code/ADC_Bat.c **** **
  71:../Generated_Code/ADC_Bat.c **** **     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
  72:../Generated_Code/ADC_Bat.c **** **     All Rights Reserved.
  73:../Generated_Code/ADC_Bat.c **** **     
  74:../Generated_Code/ADC_Bat.c **** **     Redistribution and use in source and binary forms, with or without modification,
  75:../Generated_Code/ADC_Bat.c **** **     are permitted provided that the following conditions are met:
  76:../Generated_Code/ADC_Bat.c **** **     
  77:../Generated_Code/ADC_Bat.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  78:../Generated_Code/ADC_Bat.c **** **       of conditions and the following disclaimer.
  79:../Generated_Code/ADC_Bat.c **** **     
  80:../Generated_Code/ADC_Bat.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  81:../Generated_Code/ADC_Bat.c **** **       list of conditions and the following disclaimer in the documentation and/or
  82:../Generated_Code/ADC_Bat.c **** **       other materials provided with the distribution.
  83:../Generated_Code/ADC_Bat.c **** **     
  84:../Generated_Code/ADC_Bat.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  85:../Generated_Code/ADC_Bat.c **** **       contributors may be used to endorse or promote products derived from this
  86:../Generated_Code/ADC_Bat.c **** **       software without specific prior written permission.
  87:../Generated_Code/ADC_Bat.c **** **     
  88:../Generated_Code/ADC_Bat.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  89:../Generated_Code/ADC_Bat.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  90:../Generated_Code/ADC_Bat.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  91:../Generated_Code/ADC_Bat.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  92:../Generated_Code/ADC_Bat.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  93:../Generated_Code/ADC_Bat.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  94:../Generated_Code/ADC_Bat.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  95:../Generated_Code/ADC_Bat.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  96:../Generated_Code/ADC_Bat.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  97:../Generated_Code/ADC_Bat.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  98:../Generated_Code/ADC_Bat.c **** **     
  99:../Generated_Code/ADC_Bat.c **** **     http: www.freescale.com
 100:../Generated_Code/ADC_Bat.c **** **     mail: support@freescale.com
 101:../Generated_Code/ADC_Bat.c **** ** ###################################################################*/
 102:../Generated_Code/ADC_Bat.c **** /*!
 103:../Generated_Code/ADC_Bat.c **** ** @file ADC_Bat.c
 104:../Generated_Code/ADC_Bat.c **** ** @version 01.08
 105:../Generated_Code/ADC_Bat.c **** ** @brief
 106:../Generated_Code/ADC_Bat.c **** **         This device "ADC_LDD" implements an A/D converter,
 107:../Generated_Code/ADC_Bat.c **** **         its control methods and interrupt/event handling procedure.
 108:../Generated_Code/ADC_Bat.c **** */         
 109:../Generated_Code/ADC_Bat.c **** /*!
 110:../Generated_Code/ADC_Bat.c **** **  @addtogroup ADC_Bat_module ADC_Bat module documentation
 111:../Generated_Code/ADC_Bat.c **** **  @{
 112:../Generated_Code/ADC_Bat.c **** */         
 113:../Generated_Code/ADC_Bat.c **** 
 114:../Generated_Code/ADC_Bat.c **** /* MODULE ADC_Bat. */
 115:../Generated_Code/ADC_Bat.c **** 
 116:../Generated_Code/ADC_Bat.c **** #include "ADC_Bat.h"
 117:../Generated_Code/ADC_Bat.c **** /* {Default RTOS Adapter} No RTOS includes */
 118:../Generated_Code/ADC_Bat.c **** 
 119:../Generated_Code/ADC_Bat.c **** #ifdef __cplusplus
 120:../Generated_Code/ADC_Bat.c **** extern "C" { 
 121:../Generated_Code/ADC_Bat.c **** #endif
 122:../Generated_Code/ADC_Bat.c **** 
 123:../Generated_Code/ADC_Bat.c **** #define ADC_Bat_AVAILABLE_CHANNEL0_31_PIN_MASK (LDD_ADC_CHANNEL_0_PIN) /*!< Mask of all allocated c
 124:../Generated_Code/ADC_Bat.c **** #define ADC_Bat_AVAILABLE_CHANNEL32_63_PIN_MASK 0x00U /*!< Mask of all allocated channel pins from 
 125:../Generated_Code/ADC_Bat.c **** #define ADC_Bat_AVAILABLE_TRIGGER_PIN_MASK 0x00U /*!< Mask of all allocated trigger pins */
 126:../Generated_Code/ADC_Bat.c **** #define ADC_Bat_AVAILABLE_VOLT_REF_PIN_MASK (LDD_ADC_LOW_VOLT_REF_PIN | LDD_ADC_HIGH_VOLT_REF_PIN) 
 127:../Generated_Code/ADC_Bat.c **** 
 128:../Generated_Code/ADC_Bat.c **** static const uint8_t ChannelToPin[] = { /* Channel to pin conversion table */
 129:../Generated_Code/ADC_Bat.c ****   /* ADC1_SC1A: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 130:../Generated_Code/ADC_Bat.c ****   0x13U                                /* Status and control register value */
 131:../Generated_Code/ADC_Bat.c **** };
 132:../Generated_Code/ADC_Bat.c **** 
 133:../Generated_Code/ADC_Bat.c **** typedef struct {
 134:../Generated_Code/ADC_Bat.c ****   uint8_t SampleCount;                 /* Number of samples in the last selected/created sample gro
 135:../Generated_Code/ADC_Bat.c ****   uint8_t FirstSample;                 /* First sample of group store */
 136:../Generated_Code/ADC_Bat.c ****   LDD_TUserData *UserData;             /* RTOS device data structure */
 137:../Generated_Code/ADC_Bat.c **** } ADC_Bat_TDeviceData;                 /* Device data structure type */
 138:../Generated_Code/ADC_Bat.c **** 
 139:../Generated_Code/ADC_Bat.c **** typedef ADC_Bat_TDeviceData* ADC_Bat_TDeviceDataPtr ; /* Pointer to the device data structure. */
 140:../Generated_Code/ADC_Bat.c **** 
 141:../Generated_Code/ADC_Bat.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 142:../Generated_Code/ADC_Bat.c **** static ADC_Bat_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 143:../Generated_Code/ADC_Bat.c **** /*
 144:../Generated_Code/ADC_Bat.c **** ** ===================================================================
 145:../Generated_Code/ADC_Bat.c **** **     Method      :  ADC_Bat_Init (component ADC_LDD)
 146:../Generated_Code/ADC_Bat.c **** */
 147:../Generated_Code/ADC_Bat.c **** /*!
 148:../Generated_Code/ADC_Bat.c **** **     @brief
 149:../Generated_Code/ADC_Bat.c **** **         Initializes the device. Allocates memory for the device data
 150:../Generated_Code/ADC_Bat.c **** **         structure, allocates interrupt vectors and sets interrupt
 151:../Generated_Code/ADC_Bat.c **** **         priority, sets pin routing, sets timing, etc.
 152:../Generated_Code/ADC_Bat.c **** **         If the "Enable in init. code" is set to "yes" value then the
 153:../Generated_Code/ADC_Bat.c **** **         device is also enabled(see the description of the Enable()
 154:../Generated_Code/ADC_Bat.c **** **         method). In this case the Enable() method is not necessary
 155:../Generated_Code/ADC_Bat.c **** **         and needn't to be generated. 
 156:../Generated_Code/ADC_Bat.c **** **         This method can be called only once. Before the second call
 157:../Generated_Code/ADC_Bat.c **** **         of Init() the Deinit() must be called first.
 158:../Generated_Code/ADC_Bat.c **** **     @param
 159:../Generated_Code/ADC_Bat.c **** **         UserDataPtr     - Pointer to the user or
 160:../Generated_Code/ADC_Bat.c **** **                           RTOS specific data. This pointer will be
 161:../Generated_Code/ADC_Bat.c **** **                           passed as an event or callback parameter.
 162:../Generated_Code/ADC_Bat.c **** **     @return
 163:../Generated_Code/ADC_Bat.c **** **                         - Device data structure pointer.
 164:../Generated_Code/ADC_Bat.c **** */
 165:../Generated_Code/ADC_Bat.c **** /* ===================================================================*/
 166:../Generated_Code/ADC_Bat.c **** LDD_TDeviceData* ADC_Bat_Init(LDD_TUserData *UserDataPtr)
 167:../Generated_Code/ADC_Bat.c **** {
  41              		.loc 1 167 0
  42              		.cfi_startproc
  43              		@ args = 0, pretend = 0, frame = 16
  44              		@ frame_needed = 1, uses_anonymous_args = 0
  45              		@ link register save eliminated.
  46 0000 80B4     		push	{r7}
  47              		.cfi_def_cfa_offset 4
  48              		.cfi_offset 7, -4
  49 0002 85B0     		sub	sp, sp, #20
  50              		.cfi_def_cfa_offset 24
  51 0004 00AF     		add	r7, sp, #0
  52              		.cfi_def_cfa_register 7
  53 0006 7860     		str	r0, [r7, #4]
 168:../Generated_Code/ADC_Bat.c ****   /* Allocate LDD device structure */
 169:../Generated_Code/ADC_Bat.c ****   ADC_Bat_TDeviceDataPtr DeviceDataPrv;
 170:../Generated_Code/ADC_Bat.c **** 
 171:../Generated_Code/ADC_Bat.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 172:../Generated_Code/ADC_Bat.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  54              		.loc 1 172 0
  55 0008 164B     		ldr	r3, .L3
  56 000a FB60     		str	r3, [r7, #12]
 173:../Generated_Code/ADC_Bat.c ****   DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
  57              		.loc 1 173 0
  58 000c FB68     		ldr	r3, [r7, #12]
  59 000e 7A68     		ldr	r2, [r7, #4]
  60 0010 5A60     		str	r2, [r3, #4]
 174:../Generated_Code/ADC_Bat.c ****   DeviceDataPrv->SampleCount = 0U;     /* Initializing SampleCount for right access of some methods
  61              		.loc 1 174 0
  62 0012 FB68     		ldr	r3, [r7, #12]
  63 0014 0022     		movs	r2, #0
  64 0016 1A70     		strb	r2, [r3]
 175:../Generated_Code/ADC_Bat.c ****   /* SIM_SCGC3: ADC1=1 */
 176:../Generated_Code/ADC_Bat.c ****   SIM_SCGC3 |= SIM_SCGC3_ADC1_MASK;
  65              		.loc 1 176 0
  66 0018 1349     		ldr	r1, .L3+4
  67 001a 134B     		ldr	r3, .L3+4
  68 001c 03F58153 		add	r3, r3, #4128
  69 0020 1033     		adds	r3, r3, #16
  70 0022 1B68     		ldr	r3, [r3]
  71 0024 43F00062 		orr	r2, r3, #134217728
  72 0028 01F58153 		add	r3, r1, #4128
  73 002c 1033     		adds	r3, r3, #16
  74 002e 1A60     		str	r2, [r3]
 177:../Generated_Code/ADC_Bat.c ****   /* ADC1_CFG1: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 178:../Generated_Code/ADC_Bat.c ****   ADC1_CFG1 = ADC_CFG1_ADIV(0x03) |
  75              		.loc 1 178 0
  76 0030 0E4B     		ldr	r3, .L3+8
  77 0032 7C22     		movs	r2, #124
  78 0034 9A60     		str	r2, [r3, #8]
 179:../Generated_Code/ADC_Bat.c ****               ADC_CFG1_ADLSMP_MASK |
 180:../Generated_Code/ADC_Bat.c ****               ADC_CFG1_MODE(0x03) |
 181:../Generated_Code/ADC_Bat.c ****               ADC_CFG1_ADICLK(0x00);
 182:../Generated_Code/ADC_Bat.c **** 
 183:../Generated_Code/ADC_Bat.c ****   /* ADC1_CFG2: ADACKEN=0,ADHSC=0,ADLSTS=0 */
 184:../Generated_Code/ADC_Bat.c ****   ADC1_CFG2 &= (uint32_t)~(uint32_t)(
  79              		.loc 1 184 0
  80 0036 0D4B     		ldr	r3, .L3+8
  81 0038 0C4A     		ldr	r2, .L3+8
  82 003a D268     		ldr	r2, [r2, #12]
  83 003c 22F00F02 		bic	r2, r2, #15
  84 0040 DA60     		str	r2, [r3, #12]
 185:../Generated_Code/ADC_Bat.c ****                 ADC_CFG2_ADACKEN_MASK |
 186:../Generated_Code/ADC_Bat.c ****                 ADC_CFG2_ADHSC_MASK |
 187:../Generated_Code/ADC_Bat.c ****                 ADC_CFG2_ADLSTS(0x03)
 188:../Generated_Code/ADC_Bat.c ****                );
 189:../Generated_Code/ADC_Bat.c ****   /* ADC1_SC2: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 190:../Generated_Code/ADC_Bat.c ****   ADC1_SC2 = ADC_SC2_REFSEL(0x00);
  85              		.loc 1 190 0
  86 0042 0A4B     		ldr	r3, .L3+8
  87 0044 0022     		movs	r2, #0
  88 0046 1A62     		str	r2, [r3, #32]
 191:../Generated_Code/ADC_Bat.c ****   /* ADC1_SC3: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 192:../Generated_Code/ADC_Bat.c ****   ADC1_SC3 = (ADC_SC3_CALF_MASK | ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(0x01));
  89              		.loc 1 192 0
  90 0048 084B     		ldr	r3, .L3+8
  91 004a 4522     		movs	r2, #69
  92 004c 5A62     		str	r2, [r3, #36]
 193:../Generated_Code/ADC_Bat.c ****   /* Registration of the device structure */
 194:../Generated_Code/ADC_Bat.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_ADC_Bat_ID,DeviceDataPrv);
  93              		.loc 1 194 0
  94 004e 084B     		ldr	r3, .L3+12
  95 0050 FA68     		ldr	r2, [r7, #12]
  96 0052 1A66     		str	r2, [r3, #96]
 195:../Generated_Code/ADC_Bat.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
  97              		.loc 1 195 0
  98 0054 FB68     		ldr	r3, [r7, #12]
 196:../Generated_Code/ADC_Bat.c **** }
  99              		.loc 1 196 0
 100 0056 1846     		mov	r0, r3
 101 0058 1437     		adds	r7, r7, #20
 102 005a BD46     		mov	sp, r7
 103              		@ sp needed
 104 005c 5DF8047B 		ldr	r7, [sp], #4
 105 0060 7047     		bx	lr
 106              	.L4:
 107 0062 00BF     		.align	2
 108              	.L3:
 109 0064 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 110 0068 00700440 		.word	1074032640
 111 006c 00B00B40 		.word	1074507776
 112 0070 00000000 		.word	PE_LDD_DeviceDataList
 113              		.cfi_endproc
 114              	.LFE0:
 116              		.section	.text.ADC_Bat_StartSingleMeasurement,"ax",%progbits
 117              		.align	2
 118              		.global	ADC_Bat_StartSingleMeasurement
 119              		.thumb
 120              		.thumb_func
 122              	ADC_Bat_StartSingleMeasurement:
 123              	.LFB1:
 197:../Generated_Code/ADC_Bat.c **** 
 198:../Generated_Code/ADC_Bat.c **** /*
 199:../Generated_Code/ADC_Bat.c **** ** ===================================================================
 200:../Generated_Code/ADC_Bat.c **** **     Method      :  ADC_Bat_StartSingleMeasurement (component ADC_LDD)
 201:../Generated_Code/ADC_Bat.c **** */
 202:../Generated_Code/ADC_Bat.c **** /*!
 203:../Generated_Code/ADC_Bat.c **** **     @brief
 204:../Generated_Code/ADC_Bat.c **** **         This method starts one measurement of the selected group of
 205:../Generated_Code/ADC_Bat.c **** **         samples and exits immediately. This is ADC SW trigger method.
 206:../Generated_Code/ADC_Bat.c **** **         The group of samples for measurement is specified by
 207:../Generated_Code/ADC_Bat.c **** **         preceding call to [SelectSampleGroup()] or
 208:../Generated_Code/ADC_Bat.c **** **         [CreateSampleGroup] method. 
 209:../Generated_Code/ADC_Bat.c **** **         DMA disabled: The [OnMeasurementComplete() ] event is
 210:../Generated_Code/ADC_Bat.c **** **         invoked after the measurement is done and if the event is
 211:../Generated_Code/ADC_Bat.c **** **         enabled. Results of the measurement can be read by the
 212:../Generated_Code/ADC_Bat.c **** **         [GetMeasuredValues()] method. 
 213:../Generated_Code/ADC_Bat.c **** **         DMA enabled: DMA request from configured ADC is enabled
 214:../Generated_Code/ADC_Bat.c **** **         automatically. The [OnMeasurementComplete() ] event is
 215:../Generated_Code/ADC_Bat.c **** **         invoked after the requested number of results are
 216:../Generated_Code/ADC_Bat.c **** **         transferred to destination buffer by DMA and if the event is
 217:../Generated_Code/ADC_Bat.c **** **         enabled. [GetMeasuredValues()] method is not available if
 218:../Generated_Code/ADC_Bat.c **** **         DMA mode is enabled. If the DMA transfer was completed
 219:../Generated_Code/ADC_Bat.c **** **         before and DMA is not recofingured, DMA error can occur. See
 220:../Generated_Code/ADC_Bat.c **** **         also [SetBuffer()] method. 
 221:../Generated_Code/ADC_Bat.c **** **         The state of the measurement can be also polled by the
 222:../Generated_Code/ADC_Bat.c **** **         [GetMeasurementCompleteStatus()] method. The [Discontinuous
 223:../Generated_Code/ADC_Bat.c **** **         mode] doesn't support this method.
 224:../Generated_Code/ADC_Bat.c **** **     @param
 225:../Generated_Code/ADC_Bat.c **** **         DeviceDataPtr   - Device data structure
 226:../Generated_Code/ADC_Bat.c **** **                           pointer returned by [Init] method.
 227:../Generated_Code/ADC_Bat.c **** **     @return
 228:../Generated_Code/ADC_Bat.c **** **                         - Error code, possible codes:
 229:../Generated_Code/ADC_Bat.c **** **                           ERR_OK - OK
 230:../Generated_Code/ADC_Bat.c **** **                           ERR_SPEED - The device doesn't work in the
 231:../Generated_Code/ADC_Bat.c **** **                           active clock configuration
 232:../Generated_Code/ADC_Bat.c **** **                           ERR_DISABLED - Component is disabled
 233:../Generated_Code/ADC_Bat.c **** **                           ERR_BUSY - A measurement is in progress 
 234:../Generated_Code/ADC_Bat.c **** */
 235:../Generated_Code/ADC_Bat.c **** /* ===================================================================*/
 236:../Generated_Code/ADC_Bat.c **** LDD_TError ADC_Bat_StartSingleMeasurement(LDD_TDeviceData *DeviceDataPtr)
 237:../Generated_Code/ADC_Bat.c **** {
 124              		.loc 1 237 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 8
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129 0000 80B4     		push	{r7}
 130              		.cfi_def_cfa_offset 4
 131              		.cfi_offset 7, -4
 132 0002 83B0     		sub	sp, sp, #12
 133              		.cfi_def_cfa_offset 16
 134 0004 00AF     		add	r7, sp, #0
 135              		.cfi_def_cfa_register 7
 136 0006 7860     		str	r0, [r7, #4]
 238:../Generated_Code/ADC_Bat.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 239:../Generated_Code/ADC_Bat.c ****   if (ADC_PDD_GetConversionActiveFlag(ADC1_BASE_PTR) != 0U) { /* Last measurement still pending? */
 137              		.loc 1 239 0
 138 0008 0F4B     		ldr	r3, .L8
 139 000a 1B6A     		ldr	r3, [r3, #32]
 140 000c 03F08003 		and	r3, r3, #128
 141 0010 002B     		cmp	r3, #0
 142 0012 01D0     		beq	.L6
 240:../Generated_Code/ADC_Bat.c ****     return ERR_BUSY;                   /* Yes, return ERR_BUSY */
 143              		.loc 1 240 0
 144 0014 0823     		movs	r3, #8
 145 0016 10E0     		b	.L7
 146              	.L6:
 241:../Generated_Code/ADC_Bat.c ****   }
 242:../Generated_Code/ADC_Bat.c ****   ADC_PDD_SetContinuousMode(ADC1_BASE_PTR, ADC_PDD_ONE_CONVERSION); /* Set one conversion mode */
 147              		.loc 1 242 0
 148 0018 0B4B     		ldr	r3, .L8
 149 001a 0B4A     		ldr	r2, .L8
 150 001c 526A     		ldr	r2, [r2, #36]
 151 001e 22F04802 		bic	r2, r2, #72
 152 0022 5A62     		str	r2, [r3, #36]
 243:../Generated_Code/ADC_Bat.c ****   ADC_PDD_SetConversionTriggerType(ADC1_BASE_PTR, ADC_PDD_SW_TRIGGER); /* Select SW triggering */
 153              		.loc 1 243 0
 154 0024 084B     		ldr	r3, .L8
 155 0026 084A     		ldr	r2, .L8
 156 0028 126A     		ldr	r2, [r2, #32]
 157 002a 22F04002 		bic	r2, r2, #64
 158 002e 1A62     		str	r2, [r3, #32]
 244:../Generated_Code/ADC_Bat.c ****   ADC_PDD_WriteStatusControl1Reg(ADC1_BASE_PTR, 0U, ((ADC_Bat_TDeviceDataPtr)DeviceDataPtr)->FirstS
 159              		.loc 1 244 0
 160 0030 054B     		ldr	r3, .L8
 161 0032 7A68     		ldr	r2, [r7, #4]
 162 0034 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 163 0036 1A60     		str	r2, [r3]
 245:../Generated_Code/ADC_Bat.c ****   return ERR_OK;                       /* OK */
 164              		.loc 1 245 0
 165 0038 0023     		movs	r3, #0
 166              	.L7:
 246:../Generated_Code/ADC_Bat.c **** }
 167              		.loc 1 246 0
 168 003a 1846     		mov	r0, r3
 169 003c 0C37     		adds	r7, r7, #12
 170 003e BD46     		mov	sp, r7
 171              		@ sp needed
 172 0040 5DF8047B 		ldr	r7, [sp], #4
 173 0044 7047     		bx	lr
 174              	.L9:
 175 0046 00BF     		.align	2
 176              	.L8:
 177 0048 00B00B40 		.word	1074507776
 178              		.cfi_endproc
 179              	.LFE1:
 181              		.section	.text.ADC_Bat_CreateSampleGroup,"ax",%progbits
 182              		.align	2
 183              		.global	ADC_Bat_CreateSampleGroup
 184              		.thumb
 185              		.thumb_func
 187              	ADC_Bat_CreateSampleGroup:
 188              	.LFB2:
 247:../Generated_Code/ADC_Bat.c **** 
 248:../Generated_Code/ADC_Bat.c **** /*
 249:../Generated_Code/ADC_Bat.c **** ** ===================================================================
 250:../Generated_Code/ADC_Bat.c **** **     Method      :  ADC_Bat_CreateSampleGroup (component ADC_LDD)
 251:../Generated_Code/ADC_Bat.c **** */
 252:../Generated_Code/ADC_Bat.c **** /*!
 253:../Generated_Code/ADC_Bat.c **** **     @brief
 254:../Generated_Code/ADC_Bat.c **** **         This method prepares HW for next measurement according to
 255:../Generated_Code/ADC_Bat.c **** **         array of samples defined during run-time. The array of
 256:../Generated_Code/ADC_Bat.c **** **         samples should be prepared prior to calling this method.
 257:../Generated_Code/ADC_Bat.c **** **         Pointer to the array is passed into this method in parameter
 258:../Generated_Code/ADC_Bat.c **** **         SampleGroupPtr. The number of samples is defined by
 259:../Generated_Code/ADC_Bat.c **** **         parameter SampleCount. Once any group is prepared, the
 260:../Generated_Code/ADC_Bat.c **** **         measurement can be started multiple times. Note: This method
 261:../Generated_Code/ADC_Bat.c **** **         works only with the sample groups defined during run-time.
 262:../Generated_Code/ADC_Bat.c **** **         For design-time defined groups use [SelectSampleGroup()]
 263:../Generated_Code/ADC_Bat.c **** **         method.
 264:../Generated_Code/ADC_Bat.c **** **     @param
 265:../Generated_Code/ADC_Bat.c **** **         DeviceDataPtr   - Device data structure
 266:../Generated_Code/ADC_Bat.c **** **                           pointer returned by [Init] method.
 267:../Generated_Code/ADC_Bat.c **** **     @param
 268:../Generated_Code/ADC_Bat.c **** **         SampleGroupPtr  - Pointer to the
 269:../Generated_Code/ADC_Bat.c **** **                           sample definition array. This array can be
 270:../Generated_Code/ADC_Bat.c **** **                           released as soon as the method ends.
 271:../Generated_Code/ADC_Bat.c **** **     @param
 272:../Generated_Code/ADC_Bat.c **** **         SampleCount     - Number of items in the
 273:../Generated_Code/ADC_Bat.c **** **                           sample definition array. Must be less than
 274:../Generated_Code/ADC_Bat.c **** **                           or equal to
 275:../Generated_Code/ADC_Bat.c **** **                           ComponentName_MAX_HW_SAMPLE_COUNT.
 276:../Generated_Code/ADC_Bat.c **** **     @return
 277:../Generated_Code/ADC_Bat.c **** **                         - Error code, possible codes:
 278:../Generated_Code/ADC_Bat.c **** **                           ERR_OK - OK
 279:../Generated_Code/ADC_Bat.c **** **                           ERR_SPEED - The device doesn't work in the
 280:../Generated_Code/ADC_Bat.c **** **                           active clock configuration
 281:../Generated_Code/ADC_Bat.c **** **                           ERR_DISABLED - Component is disabled
 282:../Generated_Code/ADC_Bat.c **** **                           ERR_PARAM_INDEX - Channel index in
 283:../Generated_Code/ADC_Bat.c **** **                           SampleGroup structure is out of range
 284:../Generated_Code/ADC_Bat.c **** **                           ERR_PARAM_SAMPLE_COUNT - SampleCount
 285:../Generated_Code/ADC_Bat.c **** **                           variable value is out of range
 286:../Generated_Code/ADC_Bat.c **** **                           ERR_BUSY - Measurement is in progress 
 287:../Generated_Code/ADC_Bat.c **** */
 288:../Generated_Code/ADC_Bat.c **** /* ===================================================================*/
 289:../Generated_Code/ADC_Bat.c **** LDD_TError ADC_Bat_CreateSampleGroup(LDD_TDeviceData *DeviceDataPtr, LDD_ADC_TSample *SampleGroupPt
 290:../Generated_Code/ADC_Bat.c **** {
 189              		.loc 1 290 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 24
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194 0000 80B4     		push	{r7}
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 7, -4
 197 0002 87B0     		sub	sp, sp, #28
 198              		.cfi_def_cfa_offset 32
 199 0004 00AF     		add	r7, sp, #0
 200              		.cfi_def_cfa_register 7
 201 0006 F860     		str	r0, [r7, #12]
 202 0008 B960     		str	r1, [r7, #8]
 203 000a 1346     		mov	r3, r2
 204 000c FB71     		strb	r3, [r7, #7]
 291:../Generated_Code/ADC_Bat.c ****   ADC_Bat_TDeviceDataPtr DeviceDataPrv = (ADC_Bat_TDeviceDataPtr)DeviceDataPtr;
 205              		.loc 1 291 0
 206 000e FB68     		ldr	r3, [r7, #12]
 207 0010 7B61     		str	r3, [r7, #20]
 292:../Generated_Code/ADC_Bat.c **** 
 293:../Generated_Code/ADC_Bat.c ****   /* Sample count test - this test can be disabled by setting the "Ignore range checking"
 294:../Generated_Code/ADC_Bat.c ****      property to the "yes" value in the "Configuration inspector" */
 295:../Generated_Code/ADC_Bat.c ****   if ((SampleCount > ADC_Bat_MAX_HW_SAMPLE_COUNT) || (SampleCount == 0U)) { /* Is number of sample 
 208              		.loc 1 295 0
 209 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 210 0014 012B     		cmp	r3, #1
 211 0016 02D8     		bhi	.L11
 212              		.loc 1 295 0 is_stmt 0 discriminator 1
 213 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 214 001a 002B     		cmp	r3, #0
 215 001c 01D1     		bne	.L12
 216              	.L11:
 296:../Generated_Code/ADC_Bat.c ****     return ERR_PARAM_SAMPLE_COUNT;     /* Yes, return ERR_PARAM_SAMPLE_COUNT */
 217              		.loc 1 296 0 is_stmt 1
 218 001e 9623     		movs	r3, #150
 219 0020 14E0     		b	.L13
 220              	.L12:
 297:../Generated_Code/ADC_Bat.c ****   }
 298:../Generated_Code/ADC_Bat.c ****   if (ADC_PDD_GetConversionActiveFlag(ADC1_BASE_PTR) != 0U) { /* Last measurement still pending? */
 221              		.loc 1 298 0
 222 0022 0D4B     		ldr	r3, .L16
 223 0024 1B6A     		ldr	r3, [r3, #32]
 224 0026 03F08003 		and	r3, r3, #128
 225 002a 002B     		cmp	r3, #0
 226 002c 01D0     		beq	.L14
 299:../Generated_Code/ADC_Bat.c ****     return ERR_BUSY;                   /* Yes, return ERR_BUSY */
 227              		.loc 1 299 0
 228 002e 0823     		movs	r3, #8
 229 0030 0CE0     		b	.L13
 230              	.L14:
 300:../Generated_Code/ADC_Bat.c ****   }
 301:../Generated_Code/ADC_Bat.c ****   DeviceDataPrv->SampleCount = SampleCount; /* Remember sample count */
 231              		.loc 1 301 0
 232 0032 7B69     		ldr	r3, [r7, #20]
 233 0034 FA79     		ldrb	r2, [r7, #7]
 234 0036 1A70     		strb	r2, [r3]
 302:../Generated_Code/ADC_Bat.c ****   /* Channel index test - this test can be disabled by setting the "Ignore range checking"
 303:../Generated_Code/ADC_Bat.c ****      property to the "yes" value in the "Configuration inspector" */
 304:../Generated_Code/ADC_Bat.c ****   if (SampleGroupPtr[0].ChannelIdx >= ADC_Bat_CHANNEL_COUNT) { /* Is channel index out of range? */
 235              		.loc 1 304 0
 236 0038 BB68     		ldr	r3, [r7, #8]
 237 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 238 003c 002B     		cmp	r3, #0
 239 003e 01D0     		beq	.L15
 305:../Generated_Code/ADC_Bat.c ****     return ERR_PARAM_INDEX;            /* Yes, return ERR_PARAM_INDEX */
 240              		.loc 1 305 0
 241 0040 8223     		movs	r3, #130
 242 0042 03E0     		b	.L13
 243              	.L15:
 306:../Generated_Code/ADC_Bat.c ****   }
 307:../Generated_Code/ADC_Bat.c ****   DeviceDataPrv->FirstSample = ChannelToPin[SampleGroupPtr[0].ChannelIdx]; /* Remember first sample
 244              		.loc 1 307 0
 245 0044 1322     		movs	r2, #19
 246 0046 7B69     		ldr	r3, [r7, #20]
 247 0048 5A70     		strb	r2, [r3, #1]
 308:../Generated_Code/ADC_Bat.c ****   return ERR_OK;                       /* OK */
 248              		.loc 1 308 0
 249 004a 0023     		movs	r3, #0
 250              	.L13:
 309:../Generated_Code/ADC_Bat.c **** }
 251              		.loc 1 309 0
 252 004c 1846     		mov	r0, r3
 253 004e 1C37     		adds	r7, r7, #28
 254 0050 BD46     		mov	sp, r7
 255              		@ sp needed
 256 0052 5DF8047B 		ldr	r7, [sp], #4
 257 0056 7047     		bx	lr
 258              	.L17:
 259              		.align	2
 260              	.L16:
 261 0058 00B00B40 		.word	1074507776
 262              		.cfi_endproc
 263              	.LFE2:
 265              		.section	.text.ADC_Bat_GetMeasuredValues,"ax",%progbits
 266              		.align	2
 267              		.global	ADC_Bat_GetMeasuredValues
 268              		.thumb
 269              		.thumb_func
 271              	ADC_Bat_GetMeasuredValues:
 272              	.LFB3:
 310:../Generated_Code/ADC_Bat.c **** 
 311:../Generated_Code/ADC_Bat.c **** /*
 312:../Generated_Code/ADC_Bat.c **** ** ===================================================================
 313:../Generated_Code/ADC_Bat.c **** **     Method      :  ADC_Bat_GetMeasuredValues (component ADC_LDD)
 314:../Generated_Code/ADC_Bat.c **** */
 315:../Generated_Code/ADC_Bat.c **** /*!
 316:../Generated_Code/ADC_Bat.c **** **     @brief
 317:../Generated_Code/ADC_Bat.c **** **         This method copies results of the last measurement to the
 318:../Generated_Code/ADC_Bat.c **** **         user supplied buffer. Data size depends on the size of
 319:../Generated_Code/ADC_Bat.c **** **         measured sample group (see [SelectSampleGroup()] or
 320:../Generated_Code/ADC_Bat.c **** **         [CreateSampleGroup()] method). Data representation is
 321:../Generated_Code/ADC_Bat.c **** **         defined by the [Result type] property. Typically this method
 322:../Generated_Code/ADC_Bat.c **** **         is called from [OnMeasurementComplete] event to get results
 323:../Generated_Code/ADC_Bat.c **** **         of the last measurement. This method is not available if DMA
 324:../Generated_Code/ADC_Bat.c **** **         is enabled.
 325:../Generated_Code/ADC_Bat.c **** **     @param
 326:../Generated_Code/ADC_Bat.c **** **         DeviceDataPtr   - Device data structure
 327:../Generated_Code/ADC_Bat.c **** **                           pointer returned by [Init] method.
 328:../Generated_Code/ADC_Bat.c **** **     @param
 329:../Generated_Code/ADC_Bat.c **** **         BufferPtr       - Pointer to the start of the
 330:../Generated_Code/ADC_Bat.c **** **                           buffer for new results. Count of stored
 331:../Generated_Code/ADC_Bat.c **** **                           measured values equals to the count of the
 332:../Generated_Code/ADC_Bat.c **** **                           samples in the active sample group. It is
 333:../Generated_Code/ADC_Bat.c **** **                           in the user responsibility to provide
 334:../Generated_Code/ADC_Bat.c **** **                           buffer with appropriate size.
 335:../Generated_Code/ADC_Bat.c **** **     @return
 336:../Generated_Code/ADC_Bat.c **** **                         - Error code, possible codes:
 337:../Generated_Code/ADC_Bat.c **** **                           ERR_OK - OK
 338:../Generated_Code/ADC_Bat.c **** **                           ERR_SPEED - The device doesn't work in the
 339:../Generated_Code/ADC_Bat.c **** **                           active clock configuration
 340:../Generated_Code/ADC_Bat.c **** **                           ERR_DISABLED - Component is disabled
 341:../Generated_Code/ADC_Bat.c **** */
 342:../Generated_Code/ADC_Bat.c **** /* ===================================================================*/
 343:../Generated_Code/ADC_Bat.c **** LDD_TError ADC_Bat_GetMeasuredValues(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr)
 344:../Generated_Code/ADC_Bat.c **** {
 273              		.loc 1 344 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 16
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278 0000 80B4     		push	{r7}
 279              		.cfi_def_cfa_offset 4
 280              		.cfi_offset 7, -4
 281 0002 85B0     		sub	sp, sp, #20
 282              		.cfi_def_cfa_offset 24
 283 0004 00AF     		add	r7, sp, #0
 284              		.cfi_def_cfa_register 7
 285 0006 7860     		str	r0, [r7, #4]
 286 0008 3960     		str	r1, [r7]
 345:../Generated_Code/ADC_Bat.c ****   uint8_t Sample;
 346:../Generated_Code/ADC_Bat.c ****   ADC_Bat_TResultData *pBuffer = (ADC_Bat_TResultData *)BufferPtr;
 287              		.loc 1 346 0
 288 000a 3B68     		ldr	r3, [r7]
 289 000c BB60     		str	r3, [r7, #8]
 347:../Generated_Code/ADC_Bat.c **** 
 348:../Generated_Code/ADC_Bat.c ****   /* Copy values from result registers defined in the active sample
 349:../Generated_Code/ADC_Bat.c ****      group to the user supplied buffer */
 350:../Generated_Code/ADC_Bat.c ****   for (Sample = 0U; Sample < ((ADC_Bat_TDeviceDataPtr)DeviceDataPtr)->SampleCount; Sample++) {
 290              		.loc 1 350 0
 291 000e 0023     		movs	r3, #0
 292 0010 FB73     		strb	r3, [r7, #15]
 293 0012 0DE0     		b	.L19
 294              	.L20:
 351:../Generated_Code/ADC_Bat.c ****     pBuffer[Sample] =(uint16_t)(ADC_PDD_GetResultValueRaw(ADC1_BASE_PTR, Sample));
 295              		.loc 1 351 0 discriminator 2
 296 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 297 0016 5B00     		lsls	r3, r3, #1
 298 0018 BA68     		ldr	r2, [r7, #8]
 299 001a 1344     		add	r3, r3, r2
 300 001c 0A4A     		ldr	r2, .L22
 301 001e F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 302 0020 0431     		adds	r1, r1, #4
 303 0022 52F82120 		ldr	r2, [r2, r1, lsl #2]
 304 0026 92B2     		uxth	r2, r2
 305 0028 1A80     		strh	r2, [r3]	@ movhi
 350:../Generated_Code/ADC_Bat.c ****   for (Sample = 0U; Sample < ((ADC_Bat_TDeviceDataPtr)DeviceDataPtr)->SampleCount; Sample++) {
 306              		.loc 1 350 0 discriminator 2
 307 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 308 002c 0133     		adds	r3, r3, #1
 309 002e FB73     		strb	r3, [r7, #15]
 310              	.L19:
 350:../Generated_Code/ADC_Bat.c ****   for (Sample = 0U; Sample < ((ADC_Bat_TDeviceDataPtr)DeviceDataPtr)->SampleCount; Sample++) {
 311              		.loc 1 350 0 is_stmt 0 discriminator 1
 312 0030 7B68     		ldr	r3, [r7, #4]
 313 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 314 0034 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 315 0036 9A42     		cmp	r2, r3
 316 0038 ECD3     		bcc	.L20
 352:../Generated_Code/ADC_Bat.c ****   }
 353:../Generated_Code/ADC_Bat.c ****   return ERR_OK;                       /* OK */
 317              		.loc 1 353 0 is_stmt 1
 318 003a 0023     		movs	r3, #0
 354:../Generated_Code/ADC_Bat.c **** }
 319              		.loc 1 354 0
 320 003c 1846     		mov	r0, r3
 321 003e 1437     		adds	r7, r7, #20
 322 0040 BD46     		mov	sp, r7
 323              		@ sp needed
 324 0042 5DF8047B 		ldr	r7, [sp], #4
 325 0046 7047     		bx	lr
 326              	.L23:
 327              		.align	2
 328              	.L22:
 329 0048 00B00B40 		.word	1074507776
 330              		.cfi_endproc
 331              	.LFE3:
 333              		.section	.text.ADC_Bat_GetMeasurementCompleteStatus,"ax",%progbits
 334              		.align	2
 335              		.global	ADC_Bat_GetMeasurementCompleteStatus
 336              		.thumb
 337              		.thumb_func
 339              	ADC_Bat_GetMeasurementCompleteStatus:
 340              	.LFB4:
 355:../Generated_Code/ADC_Bat.c **** 
 356:../Generated_Code/ADC_Bat.c **** /*
 357:../Generated_Code/ADC_Bat.c **** ** ===================================================================
 358:../Generated_Code/ADC_Bat.c **** **     Method      :  ADC_Bat_GetMeasurementCompleteStatus (component ADC_LDD)
 359:../Generated_Code/ADC_Bat.c **** */
 360:../Generated_Code/ADC_Bat.c **** /*!
 361:../Generated_Code/ADC_Bat.c **** **     @brief
 362:../Generated_Code/ADC_Bat.c **** **         Returns whether the measurement is done and the results can
 363:../Generated_Code/ADC_Bat.c **** **         be read by the user. It can be used to poll the state of
 364:../Generated_Code/ADC_Bat.c **** **         measurement if [Interrupt service/event] is disabled or if
 365:../Generated_Code/ADC_Bat.c **** **         [OnMeasurementComplete] event is disabled by the
 366:../Generated_Code/ADC_Bat.c **** **         [SetEventMask()] methods.
 367:../Generated_Code/ADC_Bat.c **** **     @param
 368:../Generated_Code/ADC_Bat.c **** **         DeviceDataPtr   - Device data structure
 369:../Generated_Code/ADC_Bat.c **** **                           pointer returned by [Init] method.
 370:../Generated_Code/ADC_Bat.c **** **     @return
 371:../Generated_Code/ADC_Bat.c **** **                         - Error code
 372:../Generated_Code/ADC_Bat.c **** **                           true - Measurement is done
 373:../Generated_Code/ADC_Bat.c **** **                           false - Measurement is in progress
 374:../Generated_Code/ADC_Bat.c **** */
 375:../Generated_Code/ADC_Bat.c **** /* ===================================================================*/
 376:../Generated_Code/ADC_Bat.c **** bool ADC_Bat_GetMeasurementCompleteStatus(LDD_TDeviceData *DeviceDataPtr)
 377:../Generated_Code/ADC_Bat.c **** {
 341              		.loc 1 377 0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 16
 344              		@ frame_needed = 1, uses_anonymous_args = 0
 345              		@ link register save eliminated.
 346 0000 80B4     		push	{r7}
 347              		.cfi_def_cfa_offset 4
 348              		.cfi_offset 7, -4
 349 0002 85B0     		sub	sp, sp, #20
 350              		.cfi_def_cfa_offset 24
 351 0004 00AF     		add	r7, sp, #0
 352              		.cfi_def_cfa_register 7
 353 0006 7860     		str	r0, [r7, #4]
 378:../Generated_Code/ADC_Bat.c ****   uint32_t Status;
 379:../Generated_Code/ADC_Bat.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 380:../Generated_Code/ADC_Bat.c ****   Status = ADC_PDD_GetConversionCompleteFlag(ADC1_BASE_PTR, 0U); /* Get conversion complete flag fr
 354              		.loc 1 380 0
 355 0008 094B     		ldr	r3, .L27
 356 000a 1B68     		ldr	r3, [r3]
 357 000c 03F08003 		and	r3, r3, #128
 358 0010 FB60     		str	r3, [r7, #12]
 381:../Generated_Code/ADC_Bat.c ****   if (Status) {
 359              		.loc 1 381 0
 360 0012 FB68     		ldr	r3, [r7, #12]
 361 0014 002B     		cmp	r3, #0
 362 0016 03D0     		beq	.L25
 382:../Generated_Code/ADC_Bat.c ****     (void)ADC_PDD_GetResultValueRaw(ADC1_BASE_PTR, 0U); /* Clear conversion complete flag */
 363              		.loc 1 382 0
 364 0018 054B     		ldr	r3, .L27
 365 001a 1B69     		ldr	r3, [r3, #16]
 383:../Generated_Code/ADC_Bat.c ****     return (bool)(TRUE);               /* Return TRUE if measurement has been done */
 366              		.loc 1 383 0
 367 001c 0123     		movs	r3, #1
 368 001e 00E0     		b	.L26
 369              	.L25:
 384:../Generated_Code/ADC_Bat.c ****   }
 385:../Generated_Code/ADC_Bat.c ****   return (bool)(FALSE);                /* Return FALSE if measurement has not been done */
 370              		.loc 1 385 0
 371 0020 0023     		movs	r3, #0
 372              	.L26:
 386:../Generated_Code/ADC_Bat.c **** }
 373              		.loc 1 386 0
 374 0022 1846     		mov	r0, r3
 375 0024 1437     		adds	r7, r7, #20
 376 0026 BD46     		mov	sp, r7
 377              		@ sp needed
 378 0028 5DF8047B 		ldr	r7, [sp], #4
 379 002c 7047     		bx	lr
 380              	.L28:
 381 002e 00BF     		.align	2
 382              	.L27:
 383 0030 00B00B40 		.word	1074507776
 384              		.cfi_endproc
 385              	.LFE4:
 387              		.text
 388              	.Letext0:
 389              		.file 2 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 390              		.file 3 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\stdint.h"
 391              		.file 4 "../Generated_Code/PE_Types.h"
 392              		.file 5 "C:/INTRO_HS18/IntroAronAlex/TEAM_Robot/Static_Code/IO_Map/MK22F12.h"
 393              		.file 6 "../Generated_Code/ADC_Bat.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ADC_Bat.c
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:21     .rodata.ChannelToPin:00000000 $d
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:24     .rodata.ChannelToPin:00000000 ChannelToPin
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:27     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:30     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:33     .text.ADC_Bat_Init:00000000 $t
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:38     .text.ADC_Bat_Init:00000000 ADC_Bat_Init
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:109    .text.ADC_Bat_Init:00000064 $d
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:117    .text.ADC_Bat_StartSingleMeasurement:00000000 $t
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:122    .text.ADC_Bat_StartSingleMeasurement:00000000 ADC_Bat_StartSingleMeasurement
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:177    .text.ADC_Bat_StartSingleMeasurement:00000048 $d
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:182    .text.ADC_Bat_CreateSampleGroup:00000000 $t
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:187    .text.ADC_Bat_CreateSampleGroup:00000000 ADC_Bat_CreateSampleGroup
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:261    .text.ADC_Bat_CreateSampleGroup:00000058 $d
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:266    .text.ADC_Bat_GetMeasuredValues:00000000 $t
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:271    .text.ADC_Bat_GetMeasuredValues:00000000 ADC_Bat_GetMeasuredValues
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:329    .text.ADC_Bat_GetMeasuredValues:00000048 $d
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:334    .text.ADC_Bat_GetMeasurementCompleteStatus:00000000 $t
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:339    .text.ADC_Bat_GetMeasurementCompleteStatus:00000000 ADC_Bat_GetMeasurementCompleteStatus
C:\Users\Aron\AppData\Local\Temp\cclEmVw2.s:383    .text.ADC_Bat_GetMeasurementCompleteStatus:00000030 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22dcf9ce9babd46e5ea858ea4400d115
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.PE_Types.h.68.de7a315b6e4c635a9a7a45ae6ec20b08
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.60.44eca2ca2a72148441f11b3e43b344a9
                           .group:00000000 wm4.MK22F12.h.59.83dcc0895f45d7d67f2182a38aa7f04f
                           .group:00000000 wm4.Cpu.h.66.9574a96471c5a4e92ddf5418cbdcf9a5
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.ADC_PDD.h.202.c79e70715ef9ac4b18a1724b20050ffa
                           .group:00000000 wm4.ADC_Bat.h.137.a84b4e3a144db38a435c2634c7d72458

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
