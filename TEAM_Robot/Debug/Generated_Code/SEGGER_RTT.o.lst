   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"SEGGER_RTT.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.data._aTerminalId,"aw",%progbits
  21              		.align	2
  24              	_aTerminalId:
  25 0000 30       		.byte	48
  26 0001 31       		.byte	49
  27 0002 32       		.byte	50
  28 0003 33       		.byte	51
  29 0004 34       		.byte	52
  30 0005 35       		.byte	53
  31 0006 36       		.byte	54
  32 0007 37       		.byte	55
  33 0008 38       		.byte	56
  34 0009 39       		.byte	57
  35 000a 41       		.byte	65
  36 000b 42       		.byte	66
  37 000c 43       		.byte	67
  38 000d 44       		.byte	68
  39 000e 45       		.byte	69
  40 000f 46       		.byte	70
  41              		.comm	_SEGGER_RTT,168,4
  42              		.section	.bss._acUpBuffer,"aw",%nobits
  43              		.align	2
  46              	_acUpBuffer:
  47 0000 00000000 		.space	512
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.section	.bss._acDownBuffer,"aw",%nobits
  49              		.align	2
  52              	_acDownBuffer:
  53 0000 00000000 		.space	64
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.section	.bss._ActiveTerminal,"aw",%nobits
  57              	_ActiveTerminal:
  58 0000 00       		.space	1
  59              		.section	.rodata
  60              		.align	2
  61              	.LC0:
  62 0000 5465726D 		.ascii	"Terminal\000"
  62      696E616C 
  62      00
  63 0009 000000   		.align	2
  64              	.LC1:
  65 000c 52545400 		.ascii	"RTT\000"
  66              		.align	2
  67              	.LC2:
  68 0010 53454747 		.ascii	"SEGGER\000"
  68      455200
  69 0017 00       		.section	.text._DoInit,"ax",%progbits
  70              		.align	2
  71              		.thumb
  72              		.thumb_func
  74              	_DoInit:
  75              	.LFB0:
  76              		.file 1 "../Generated_Code/SEGGER_RTT.c"
   1:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
   2:../Generated_Code/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:../Generated_Code/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
   5:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
   6:../Generated_Code/SEGGER_RTT.c **** *            (c) 1995 - 2018 SEGGER Microcontroller GmbH             *
   7:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
   8:../Generated_Code/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  10:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
  11:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  12:../Generated_Code/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  14:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
  15:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  16:../Generated_Code/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  18:../Generated_Code/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:../Generated_Code/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:../Generated_Code/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  22:../Generated_Code/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:../Generated_Code/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:../Generated_Code/SEGGER_RTT.c **** * conditions are met:                                                *
  25:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  26:../Generated_Code/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:../Generated_Code/SEGGER_RTT.c **** *   notice, this list of conditions and the following disclaimer.    *
  28:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  29:../Generated_Code/SEGGER_RTT.c **** * o Redistributions in binary form must reproduce the above          *
  30:../Generated_Code/SEGGER_RTT.c **** *   copyright notice, this list of conditions and the following      *
  31:../Generated_Code/SEGGER_RTT.c **** *   disclaimer in the documentation and/or other materials provided  *
  32:../Generated_Code/SEGGER_RTT.c **** *   with the distribution.                                           *
  33:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  34:../Generated_Code/SEGGER_RTT.c **** * o Neither the name of SEGGER Microcontroller GmbH         *
  35:../Generated_Code/SEGGER_RTT.c **** *   nor the names of its contributors may be used to endorse or      *
  36:../Generated_Code/SEGGER_RTT.c **** *   promote products derived from this software without specific     *
  37:../Generated_Code/SEGGER_RTT.c **** *   prior written permission.                                        *
  38:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  39:../Generated_Code/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  40:../Generated_Code/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  41:../Generated_Code/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  42:../Generated_Code/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  43:../Generated_Code/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  44:../Generated_Code/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  45:../Generated_Code/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  46:../Generated_Code/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  47:../Generated_Code/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  48:../Generated_Code/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  49:../Generated_Code/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  50:../Generated_Code/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  51:../Generated_Code/SEGGER_RTT.c **** * DAMAGE.                                                            *
  52:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  53:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
  54:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  55:../Generated_Code/SEGGER_RTT.c **** *       RTT version: 6.32b                                           *
  56:../Generated_Code/SEGGER_RTT.c **** *                                                                    *
  57:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
  58:../Generated_Code/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  59:../Generated_Code/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  60:../Generated_Code/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  61:../Generated_Code/SEGGER_RTT.c ****           allows real-time communication on targets which support
  62:../Generated_Code/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  63:../Generated_Code/SEGGER_RTT.c **** Revision: $Rev: 10887 $
  64:../Generated_Code/SEGGER_RTT.c **** 
  65:../Generated_Code/SEGGER_RTT.c **** Additional information:
  66:../Generated_Code/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  67:../Generated_Code/SEGGER_RTT.c ****           H->T    Host to target communication
  68:../Generated_Code/SEGGER_RTT.c ****           T->H    Target to host communication
  69:../Generated_Code/SEGGER_RTT.c **** 
  70:../Generated_Code/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  71:../Generated_Code/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  72:../Generated_Code/SEGGER_RTT.c **** 
  73:../Generated_Code/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  74:../Generated_Code/SEGGER_RTT.c **** 
  75:../Generated_Code/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  76:../Generated_Code/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  77:../Generated_Code/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  78:../Generated_Code/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  79:../Generated_Code/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  80:../Generated_Code/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  81:../Generated_Code/SEGGER_RTT.c **** 
  82:../Generated_Code/SEGGER_RTT.c **** 
  83:../Generated_Code/SEGGER_RTT.c **** ----------------------------------------------------------------------
  84:../Generated_Code/SEGGER_RTT.c **** */
  85:../Generated_Code/SEGGER_RTT.c **** 
  86:../Generated_Code/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  87:../Generated_Code/SEGGER_RTT.c **** 
  88:../Generated_Code/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  89:../Generated_Code/SEGGER_RTT.c **** 
  90:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
  91:../Generated_Code/SEGGER_RTT.c **** *
  92:../Generated_Code/SEGGER_RTT.c **** *       Configuration, default values
  93:../Generated_Code/SEGGER_RTT.c **** *
  94:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
  95:../Generated_Code/SEGGER_RTT.c **** */
  96:../Generated_Code/SEGGER_RTT.c **** 
  97:../Generated_Code/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
  98:../Generated_Code/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
  99:../Generated_Code/SEGGER_RTT.c **** #endif
 100:../Generated_Code/SEGGER_RTT.c **** 
 101:../Generated_Code/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 102:../Generated_Code/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 103:../Generated_Code/SEGGER_RTT.c **** #endif
 104:../Generated_Code/SEGGER_RTT.c **** 
 105:../Generated_Code/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 106:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 107:../Generated_Code/SEGGER_RTT.c **** #endif
 108:../Generated_Code/SEGGER_RTT.c **** 
 109:../Generated_Code/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 110:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 111:../Generated_Code/SEGGER_RTT.c **** #endif
 112:../Generated_Code/SEGGER_RTT.c **** 
 113:../Generated_Code/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 114:../Generated_Code/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 115:../Generated_Code/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 116:../Generated_Code/SEGGER_RTT.c ****   #endif
 117:../Generated_Code/SEGGER_RTT.c **** #endif
 118:../Generated_Code/SEGGER_RTT.c **** 
 119:../Generated_Code/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 120:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            0
 121:../Generated_Code/SEGGER_RTT.c **** #endif
 122:../Generated_Code/SEGGER_RTT.c **** 
 123:../Generated_Code/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 124:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     0
 125:../Generated_Code/SEGGER_RTT.c **** #endif
 126:../Generated_Code/SEGGER_RTT.c **** 
 127:../Generated_Code/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 128:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 129:../Generated_Code/SEGGER_RTT.c **** #endif
 130:../Generated_Code/SEGGER_RTT.c **** 
 131:../Generated_Code/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 132:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 133:../Generated_Code/SEGGER_RTT.c **** #endif
 134:../Generated_Code/SEGGER_RTT.c **** 
 135:../Generated_Code/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 136:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 137:../Generated_Code/SEGGER_RTT.c **** #endif
 138:../Generated_Code/SEGGER_RTT.c **** 
 139:../Generated_Code/SEGGER_RTT.c **** #ifndef   STRLEN
 140:../Generated_Code/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 141:../Generated_Code/SEGGER_RTT.c **** #endif
 142:../Generated_Code/SEGGER_RTT.c **** 
 143:../Generated_Code/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 144:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 145:../Generated_Code/SEGGER_RTT.c **** #endif
 146:../Generated_Code/SEGGER_RTT.c **** 
 147:../Generated_Code/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 148:../Generated_Code/SEGGER_RTT.c ****   #ifdef  MEMCPY
 149:../Generated_Code/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 150:../Generated_Code/SEGGER_RTT.c ****   #else
 151:../Generated_Code/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 152:../Generated_Code/SEGGER_RTT.c ****   #endif
 153:../Generated_Code/SEGGER_RTT.c **** #endif
 154:../Generated_Code/SEGGER_RTT.c **** 
 155:../Generated_Code/SEGGER_RTT.c **** #ifndef   MIN
 156:../Generated_Code/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 157:../Generated_Code/SEGGER_RTT.c **** #endif
 158:../Generated_Code/SEGGER_RTT.c **** 
 159:../Generated_Code/SEGGER_RTT.c **** #ifndef   MAX
 160:../Generated_Code/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 161:../Generated_Code/SEGGER_RTT.c **** #endif
 162:../Generated_Code/SEGGER_RTT.c **** //
 163:../Generated_Code/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 164:../Generated_Code/SEGGER_RTT.c **** //
 165:../Generated_Code/SEGGER_RTT.c **** #ifndef NULL
 166:../Generated_Code/SEGGER_RTT.c ****   #define NULL 0
 167:../Generated_Code/SEGGER_RTT.c **** #endif
 168:../Generated_Code/SEGGER_RTT.c **** 
 169:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 170:../Generated_Code/SEGGER_RTT.c **** *
 171:../Generated_Code/SEGGER_RTT.c **** *       Defines, fixed
 172:../Generated_Code/SEGGER_RTT.c **** *
 173:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
 174:../Generated_Code/SEGGER_RTT.c **** */
 175:../Generated_Code/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 176:../Generated_Code/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 177:../Generated_Code/SEGGER_RTT.c **** #endif
 178:../Generated_Code/SEGGER_RTT.c **** 
 179:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 180:../Generated_Code/SEGGER_RTT.c ****   #if (defined __GNUC__)
 181:../Generated_Code/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 182:../Generated_Code/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 183:../Generated_Code/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 184:../Generated_Code/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 185:../Generated_Code/SEGGER_RTT.c ****                                   Var
 186:../Generated_Code/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 187:../Generated_Code/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 188:../Generated_Code/SEGGER_RTT.c ****   #else
 189:../Generated_Code/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 190:../Generated_Code/SEGGER_RTT.c ****   #endif
 191:../Generated_Code/SEGGER_RTT.c **** #else
 192:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 193:../Generated_Code/SEGGER_RTT.c **** #endif
 194:../Generated_Code/SEGGER_RTT.c **** 
 195:../Generated_Code/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 196:../Generated_Code/SEGGER_RTT.c ****   #if (defined __GNUC__)
 197:../Generated_Code/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 198:../Generated_Code/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 199:../Generated_Code/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 200:../Generated_Code/SEGGER_RTT.c ****                                         Var
 201:../Generated_Code/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 202:../Generated_Code/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 203:../Generated_Code/SEGGER_RTT.c ****   #else
 204:../Generated_Code/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 205:../Generated_Code/SEGGER_RTT.c ****   #endif
 206:../Generated_Code/SEGGER_RTT.c **** #else
 207:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 208:../Generated_Code/SEGGER_RTT.c **** #endif
 209:../Generated_Code/SEGGER_RTT.c **** 
 210:../Generated_Code/SEGGER_RTT.c **** 
 211:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 212:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 213:../Generated_Code/SEGGER_RTT.c **** #else
 214:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 215:../Generated_Code/SEGGER_RTT.c **** #endif
 216:../Generated_Code/SEGGER_RTT.c **** 
 217:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 218:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 219:../Generated_Code/SEGGER_RTT.c **** #else
 220:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 221:../Generated_Code/SEGGER_RTT.c **** #endif
 222:../Generated_Code/SEGGER_RTT.c **** 
 223:../Generated_Code/SEGGER_RTT.c **** 
 224:../Generated_Code/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 225:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 226:../Generated_Code/SEGGER_RTT.c **** #else
 227:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 228:../Generated_Code/SEGGER_RTT.c **** #endif
 229:../Generated_Code/SEGGER_RTT.c **** 
 230:../Generated_Code/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 231:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 232:../Generated_Code/SEGGER_RTT.c **** #else
 233:../Generated_Code/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 234:../Generated_Code/SEGGER_RTT.c **** #endif
 235:../Generated_Code/SEGGER_RTT.c **** 
 236:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 237:../Generated_Code/SEGGER_RTT.c **** *
 238:../Generated_Code/SEGGER_RTT.c **** *       Static const data
 239:../Generated_Code/SEGGER_RTT.c **** *
 240:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
 241:../Generated_Code/SEGGER_RTT.c **** */
 242:../Generated_Code/SEGGER_RTT.c **** 
 243:../Generated_Code/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 244:../Generated_Code/SEGGER_RTT.c **** 
 245:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 246:../Generated_Code/SEGGER_RTT.c **** *
 247:../Generated_Code/SEGGER_RTT.c **** *       Static data
 248:../Generated_Code/SEGGER_RTT.c **** *
 249:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
 250:../Generated_Code/SEGGER_RTT.c **** */
 251:../Generated_Code/SEGGER_RTT.c **** //
 252:../Generated_Code/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 253:../Generated_Code/SEGGER_RTT.c **** //
 254:../Generated_Code/SEGGER_RTT.c **** SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 255:../Generated_Code/SEGGER_RTT.c **** 
 256:../Generated_Code/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]));
 257:../Generated_Code/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]))
 258:../Generated_Code/SEGGER_RTT.c **** 
 259:../Generated_Code/SEGGER_RTT.c **** static char _ActiveTerminal;
 260:../Generated_Code/SEGGER_RTT.c **** 
 261:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 262:../Generated_Code/SEGGER_RTT.c **** *
 263:../Generated_Code/SEGGER_RTT.c **** *       Static functions
 264:../Generated_Code/SEGGER_RTT.c **** *
 265:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
 266:../Generated_Code/SEGGER_RTT.c **** */
 267:../Generated_Code/SEGGER_RTT.c **** 
 268:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 269:../Generated_Code/SEGGER_RTT.c **** *
 270:../Generated_Code/SEGGER_RTT.c **** *       _DoInit()
 271:../Generated_Code/SEGGER_RTT.c **** *
 272:../Generated_Code/SEGGER_RTT.c **** *  Function description
 273:../Generated_Code/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 274:../Generated_Code/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 275:../Generated_Code/SEGGER_RTT.c **** *
 276:../Generated_Code/SEGGER_RTT.c **** */
 277:../Generated_Code/SEGGER_RTT.c **** #define INIT()  do {                                            \
 278:../Generated_Code/SEGGER_RTT.c ****                   if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
 279:../Generated_Code/SEGGER_RTT.c ****                 } while (0)
 280:../Generated_Code/SEGGER_RTT.c **** static void _DoInit(void) {
  77              		.loc 1 280 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 8
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              		.cfi_def_cfa_offset 4
  84              		.cfi_offset 7, -4
  85 0002 83B0     		sub	sp, sp, #12
  86              		.cfi_def_cfa_offset 16
  87 0004 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
 281:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 282:../Generated_Code/SEGGER_RTT.c ****   //
 283:../Generated_Code/SEGGER_RTT.c ****   // Initialize control block
 284:../Generated_Code/SEGGER_RTT.c ****   //
 285:../Generated_Code/SEGGER_RTT.c ****   p = &_SEGGER_RTT;
  89              		.loc 1 285 0
  90 0006 214B     		ldr	r3, .L2
  91 0008 7B60     		str	r3, [r7, #4]
 286:../Generated_Code/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
  92              		.loc 1 286 0
  93 000a 7B68     		ldr	r3, [r7, #4]
  94 000c 0322     		movs	r2, #3
  95 000e 1A61     		str	r2, [r3, #16]
 287:../Generated_Code/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  96              		.loc 1 287 0
  97 0010 7B68     		ldr	r3, [r7, #4]
  98 0012 0322     		movs	r2, #3
  99 0014 5A61     		str	r2, [r3, #20]
 288:../Generated_Code/SEGGER_RTT.c ****   //
 289:../Generated_Code/SEGGER_RTT.c ****   // Initialize up buffer 0
 290:../Generated_Code/SEGGER_RTT.c ****   //
 291:../Generated_Code/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 100              		.loc 1 291 0
 101 0016 7B68     		ldr	r3, [r7, #4]
 102 0018 1D4A     		ldr	r2, .L2+4
 103 001a 9A61     		str	r2, [r3, #24]
 292:../Generated_Code/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 104              		.loc 1 292 0
 105 001c 7B68     		ldr	r3, [r7, #4]
 106 001e 1D4A     		ldr	r2, .L2+8
 107 0020 DA61     		str	r2, [r3, #28]
 293:../Generated_Code/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 108              		.loc 1 293 0
 109 0022 7B68     		ldr	r3, [r7, #4]
 110 0024 4FF40072 		mov	r2, #512
 111 0028 1A62     		str	r2, [r3, #32]
 294:../Generated_Code/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 112              		.loc 1 294 0
 113 002a 7B68     		ldr	r3, [r7, #4]
 114 002c 0022     		movs	r2, #0
 115 002e 9A62     		str	r2, [r3, #40]
 295:../Generated_Code/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 116              		.loc 1 295 0
 117 0030 7B68     		ldr	r3, [r7, #4]
 118 0032 0022     		movs	r2, #0
 119 0034 5A62     		str	r2, [r3, #36]
 296:../Generated_Code/SEGGER_RTT.c **** #if 1 /* << EST */
 297:../Generated_Code/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_CHANNEL_0_MODE_UP;
 120              		.loc 1 297 0
 121 0036 7B68     		ldr	r3, [r7, #4]
 122 0038 0022     		movs	r2, #0
 123 003a DA62     		str	r2, [r3, #44]
 298:../Generated_Code/SEGGER_RTT.c **** #else
 299:../Generated_Code/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 300:../Generated_Code/SEGGER_RTT.c **** #endif
 301:../Generated_Code/SEGGER_RTT.c ****   //
 302:../Generated_Code/SEGGER_RTT.c ****   // Initialize down buffer 0
 303:../Generated_Code/SEGGER_RTT.c ****   //
 304:../Generated_Code/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 124              		.loc 1 304 0
 125 003c 7B68     		ldr	r3, [r7, #4]
 126 003e 144A     		ldr	r2, .L2+4
 127 0040 1A66     		str	r2, [r3, #96]
 305:../Generated_Code/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 128              		.loc 1 305 0
 129 0042 7B68     		ldr	r3, [r7, #4]
 130 0044 144A     		ldr	r2, .L2+12
 131 0046 5A66     		str	r2, [r3, #100]
 306:../Generated_Code/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 132              		.loc 1 306 0
 133 0048 7B68     		ldr	r3, [r7, #4]
 134 004a 4022     		movs	r2, #64
 135 004c 9A66     		str	r2, [r3, #104]
 307:../Generated_Code/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 136              		.loc 1 307 0
 137 004e 7B68     		ldr	r3, [r7, #4]
 138 0050 0022     		movs	r2, #0
 139 0052 1A67     		str	r2, [r3, #112]
 308:../Generated_Code/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 140              		.loc 1 308 0
 141 0054 7B68     		ldr	r3, [r7, #4]
 142 0056 0022     		movs	r2, #0
 143 0058 DA66     		str	r2, [r3, #108]
 309:../Generated_Code/SEGGER_RTT.c **** #if 1 /* << EST */
 310:../Generated_Code/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_CHANNEL_0_MODE_DOWN;
 144              		.loc 1 310 0
 145 005a 7B68     		ldr	r3, [r7, #4]
 146 005c 0022     		movs	r2, #0
 147 005e 5A67     		str	r2, [r3, #116]
 311:../Generated_Code/SEGGER_RTT.c **** #else
 312:../Generated_Code/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 313:../Generated_Code/SEGGER_RTT.c **** #endif
 314:../Generated_Code/SEGGER_RTT.c ****   //
 315:../Generated_Code/SEGGER_RTT.c ****   // Finish initialization of the control block.
 316:../Generated_Code/SEGGER_RTT.c ****   // Copy Id string in three steps to make sure "SEGGER RTT" is not found
 317:../Generated_Code/SEGGER_RTT.c ****   // in initializer memory (usually flash) by J-Link
 318:../Generated_Code/SEGGER_RTT.c ****   //
 319:../Generated_Code/SEGGER_RTT.c ****   strcpy(&p->acID[7], "RTT");
 148              		.loc 1 319 0
 149 0060 7B68     		ldr	r3, [r7, #4]
 150 0062 0733     		adds	r3, r3, #7
 151 0064 0D4A     		ldr	r2, .L2+16
 152 0066 1068     		ldr	r0, [r2]	@ unaligned
 153 0068 1860     		str	r0, [r3]	@ unaligned
 320:../Generated_Code/SEGGER_RTT.c ****   strcpy(&p->acID[0], "SEGGER");
 154              		.loc 1 320 0
 155 006a 7B68     		ldr	r3, [r7, #4]
 156 006c 0C4A     		ldr	r2, .L2+20
 157 006e 1068     		ldr	r0, [r2]	@ unaligned
 158 0070 1860     		str	r0, [r3]	@ unaligned
 159 0072 9188     		ldrh	r1, [r2, #4]	@ unaligned
 160 0074 9279     		ldrb	r2, [r2, #6]
 161 0076 9980     		strh	r1, [r3, #4]	@ unaligned
 162 0078 9A71     		strb	r2, [r3, #6]
 321:../Generated_Code/SEGGER_RTT.c ****   p->acID[6] = ' ';
 163              		.loc 1 321 0
 164 007a 7B68     		ldr	r3, [r7, #4]
 165 007c 2022     		movs	r2, #32
 166 007e 9A71     		strb	r2, [r3, #6]
 322:../Generated_Code/SEGGER_RTT.c **** }
 167              		.loc 1 322 0
 168 0080 0C37     		adds	r7, r7, #12
 169 0082 BD46     		mov	sp, r7
 170              		@ sp needed
 171 0084 5DF8047B 		ldr	r7, [sp], #4
 172 0088 7047     		bx	lr
 173              	.L3:
 174 008a 00BF     		.align	2
 175              	.L2:
 176 008c 00000000 		.word	_SEGGER_RTT
 177 0090 00000000 		.word	.LC0
 178 0094 00000000 		.word	_acUpBuffer
 179 0098 00000000 		.word	_acDownBuffer
 180 009c 0C000000 		.word	.LC1
 181 00a0 10000000 		.word	.LC2
 182              		.cfi_endproc
 183              	.LFE0:
 185              		.section	.text._WriteBlocking,"ax",%progbits
 186              		.align	2
 187              		.thumb
 188              		.thumb_func
 190              	_WriteBlocking:
 191              	.LFB1:
 323:../Generated_Code/SEGGER_RTT.c **** 
 324:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 325:../Generated_Code/SEGGER_RTT.c **** *
 326:../Generated_Code/SEGGER_RTT.c **** *       _WriteBlocking()
 327:../Generated_Code/SEGGER_RTT.c **** *
 328:../Generated_Code/SEGGER_RTT.c **** *  Function description
 329:../Generated_Code/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 330:../Generated_Code/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 331:../Generated_Code/SEGGER_RTT.c **** *    read by the host.
 332:../Generated_Code/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 333:../Generated_Code/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 334:../Generated_Code/SEGGER_RTT.c **** *
 335:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 336:../Generated_Code/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 337:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 338:../Generated_Code/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 339:../Generated_Code/SEGGER_RTT.c **** *
 340:../Generated_Code/SEGGER_RTT.c **** *  Return value
 341:../Generated_Code/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 342:../Generated_Code/SEGGER_RTT.c **** */
 343:../Generated_Code/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 192              		.loc 1 343 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 32
 195              		@ frame_needed = 1, uses_anonymous_args = 0
 196 0000 80B5     		push	{r7, lr}
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 7, -8
 199              		.cfi_offset 14, -4
 200 0002 88B0     		sub	sp, sp, #32
 201              		.cfi_def_cfa_offset 40
 202 0004 00AF     		add	r7, sp, #0
 203              		.cfi_def_cfa_register 7
 204 0006 F860     		str	r0, [r7, #12]
 205 0008 B960     		str	r1, [r7, #8]
 206 000a 7A60     		str	r2, [r7, #4]
 344:../Generated_Code/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 345:../Generated_Code/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 346:../Generated_Code/SEGGER_RTT.c ****   unsigned RdOff;
 347:../Generated_Code/SEGGER_RTT.c ****   unsigned WrOff;
 348:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 349:../Generated_Code/SEGGER_RTT.c ****   char*    pDst;
 350:../Generated_Code/SEGGER_RTT.c **** #endif
 351:../Generated_Code/SEGGER_RTT.c ****   //
 352:../Generated_Code/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 353:../Generated_Code/SEGGER_RTT.c ****   //
 354:../Generated_Code/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 207              		.loc 1 354 0
 208 000c 0023     		movs	r3, #0
 209 000e BB61     		str	r3, [r7, #24]
 355:../Generated_Code/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 210              		.loc 1 355 0
 211 0010 FB68     		ldr	r3, [r7, #12]
 212 0012 DB68     		ldr	r3, [r3, #12]
 213 0014 7B61     		str	r3, [r7, #20]
 214              	.L8:
 356:../Generated_Code/SEGGER_RTT.c ****   do {
 357:../Generated_Code/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 215              		.loc 1 357 0
 216 0016 FB68     		ldr	r3, [r7, #12]
 217 0018 1B69     		ldr	r3, [r3, #16]
 218 001a 3B61     		str	r3, [r7, #16]
 358:../Generated_Code/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 219              		.loc 1 358 0
 220 001c 3A69     		ldr	r2, [r7, #16]
 221 001e 7B69     		ldr	r3, [r7, #20]
 222 0020 9A42     		cmp	r2, r3
 223 0022 05D9     		bls	.L5
 359:../Generated_Code/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 224              		.loc 1 359 0
 225 0024 3A69     		ldr	r2, [r7, #16]
 226 0026 7B69     		ldr	r3, [r7, #20]
 227 0028 D31A     		subs	r3, r2, r3
 228 002a 013B     		subs	r3, r3, #1
 229 002c FB61     		str	r3, [r7, #28]
 230 002e 07E0     		b	.L6
 231              	.L5:
 360:../Generated_Code/SEGGER_RTT.c ****     } else {
 361:../Generated_Code/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 232              		.loc 1 361 0
 233 0030 FB68     		ldr	r3, [r7, #12]
 234 0032 9A68     		ldr	r2, [r3, #8]
 235 0034 3969     		ldr	r1, [r7, #16]
 236 0036 7B69     		ldr	r3, [r7, #20]
 237 0038 CB1A     		subs	r3, r1, r3
 238 003a 1344     		add	r3, r3, r2
 239 003c 013B     		subs	r3, r3, #1
 240 003e FB61     		str	r3, [r7, #28]
 241              	.L6:
 362:../Generated_Code/SEGGER_RTT.c ****     }
 363:../Generated_Code/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 242              		.loc 1 363 0
 243 0040 FB68     		ldr	r3, [r7, #12]
 244 0042 9A68     		ldr	r2, [r3, #8]
 245 0044 7B69     		ldr	r3, [r7, #20]
 246 0046 D31A     		subs	r3, r2, r3
 247 0048 FA69     		ldr	r2, [r7, #28]
 248 004a 9A42     		cmp	r2, r3
 249 004c 38BF     		it	cc
 250 004e 1346     		movcc	r3, r2
 251 0050 FB61     		str	r3, [r7, #28]
 364:../Generated_Code/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 252              		.loc 1 364 0
 253 0052 FA69     		ldr	r2, [r7, #28]
 254 0054 7B68     		ldr	r3, [r7, #4]
 255 0056 9A42     		cmp	r2, r3
 256 0058 38BF     		it	cc
 257 005a 1346     		movcc	r3, r2
 258 005c FB61     		str	r3, [r7, #28]
 365:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 366:../Generated_Code/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 367:../Generated_Code/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 368:../Generated_Code/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 369:../Generated_Code/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 370:../Generated_Code/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 371:../Generated_Code/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 372:../Generated_Code/SEGGER_RTT.c ****     };
 373:../Generated_Code/SEGGER_RTT.c **** #else
 374:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 259              		.loc 1 374 0
 260 005e FB68     		ldr	r3, [r7, #12]
 261 0060 5A68     		ldr	r2, [r3, #4]
 262 0062 7B69     		ldr	r3, [r7, #20]
 263 0064 1344     		add	r3, r3, r2
 264 0066 1846     		mov	r0, r3
 265 0068 B968     		ldr	r1, [r7, #8]
 266 006a FA69     		ldr	r2, [r7, #28]
 267 006c FFF7FEFF 		bl	memcpy
 375:../Generated_Code/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 268              		.loc 1 375 0
 269 0070 BA69     		ldr	r2, [r7, #24]
 270 0072 FB69     		ldr	r3, [r7, #28]
 271 0074 1344     		add	r3, r3, r2
 272 0076 BB61     		str	r3, [r7, #24]
 376:../Generated_Code/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 273              		.loc 1 376 0
 274 0078 BA68     		ldr	r2, [r7, #8]
 275 007a FB69     		ldr	r3, [r7, #28]
 276 007c 1344     		add	r3, r3, r2
 277 007e BB60     		str	r3, [r7, #8]
 377:../Generated_Code/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 278              		.loc 1 377 0
 279 0080 7A68     		ldr	r2, [r7, #4]
 280 0082 FB69     		ldr	r3, [r7, #28]
 281 0084 D31A     		subs	r3, r2, r3
 282 0086 7B60     		str	r3, [r7, #4]
 378:../Generated_Code/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 283              		.loc 1 378 0
 284 0088 7A69     		ldr	r2, [r7, #20]
 285 008a FB69     		ldr	r3, [r7, #28]
 286 008c 1344     		add	r3, r3, r2
 287 008e 7B61     		str	r3, [r7, #20]
 379:../Generated_Code/SEGGER_RTT.c **** #endif
 380:../Generated_Code/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 288              		.loc 1 380 0
 289 0090 FB68     		ldr	r3, [r7, #12]
 290 0092 9A68     		ldr	r2, [r3, #8]
 291 0094 7B69     		ldr	r3, [r7, #20]
 292 0096 9A42     		cmp	r2, r3
 293 0098 01D1     		bne	.L7
 381:../Generated_Code/SEGGER_RTT.c ****       WrOff = 0u;
 294              		.loc 1 381 0
 295 009a 0023     		movs	r3, #0
 296 009c 7B61     		str	r3, [r7, #20]
 297              	.L7:
 382:../Generated_Code/SEGGER_RTT.c ****     }
 383:../Generated_Code/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 298              		.loc 1 383 0
 299 009e FB68     		ldr	r3, [r7, #12]
 300 00a0 7A69     		ldr	r2, [r7, #20]
 301 00a2 DA60     		str	r2, [r3, #12]
 384:../Generated_Code/SEGGER_RTT.c ****   } while (NumBytes);
 302              		.loc 1 384 0
 303 00a4 7B68     		ldr	r3, [r7, #4]
 304 00a6 002B     		cmp	r3, #0
 305 00a8 B5D1     		bne	.L8
 385:../Generated_Code/SEGGER_RTT.c ****   //
 386:../Generated_Code/SEGGER_RTT.c ****   return NumBytesWritten;
 306              		.loc 1 386 0
 307 00aa BB69     		ldr	r3, [r7, #24]
 387:../Generated_Code/SEGGER_RTT.c **** }
 308              		.loc 1 387 0
 309 00ac 1846     		mov	r0, r3
 310 00ae 2037     		adds	r7, r7, #32
 311 00b0 BD46     		mov	sp, r7
 312              		@ sp needed
 313 00b2 80BD     		pop	{r7, pc}
 314              		.cfi_endproc
 315              	.LFE1:
 317              		.section	.text._WriteNoCheck,"ax",%progbits
 318              		.align	2
 319              		.thumb
 320              		.thumb_func
 322              	_WriteNoCheck:
 323              	.LFB2:
 388:../Generated_Code/SEGGER_RTT.c **** 
 389:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 390:../Generated_Code/SEGGER_RTT.c **** *
 391:../Generated_Code/SEGGER_RTT.c **** *       _WriteNoCheck()
 392:../Generated_Code/SEGGER_RTT.c **** *
 393:../Generated_Code/SEGGER_RTT.c **** *  Function description
 394:../Generated_Code/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 395:../Generated_Code/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 396:../Generated_Code/SEGGER_RTT.c **** *    read by the host.
 397:../Generated_Code/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 398:../Generated_Code/SEGGER_RTT.c **** *
 399:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 400:../Generated_Code/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 401:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 402:../Generated_Code/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 403:../Generated_Code/SEGGER_RTT.c **** *
 404:../Generated_Code/SEGGER_RTT.c **** *  Notes
 405:../Generated_Code/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 406:../Generated_Code/SEGGER_RTT.c **** */
 407:../Generated_Code/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 324              		.loc 1 407 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 32
 327              		@ frame_needed = 1, uses_anonymous_args = 0
 328 0000 80B5     		push	{r7, lr}
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 7, -8
 331              		.cfi_offset 14, -4
 332 0002 88B0     		sub	sp, sp, #32
 333              		.cfi_def_cfa_offset 40
 334 0004 00AF     		add	r7, sp, #0
 335              		.cfi_def_cfa_register 7
 336 0006 F860     		str	r0, [r7, #12]
 337 0008 B960     		str	r1, [r7, #8]
 338 000a 7A60     		str	r2, [r7, #4]
 408:../Generated_Code/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 409:../Generated_Code/SEGGER_RTT.c ****   unsigned WrOff;
 410:../Generated_Code/SEGGER_RTT.c ****   unsigned Rem;
 411:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 412:../Generated_Code/SEGGER_RTT.c ****   char*    pDst;
 413:../Generated_Code/SEGGER_RTT.c **** #endif
 414:../Generated_Code/SEGGER_RTT.c **** 
 415:../Generated_Code/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 339              		.loc 1 415 0
 340 000c FB68     		ldr	r3, [r7, #12]
 341 000e DB68     		ldr	r3, [r3, #12]
 342 0010 FB61     		str	r3, [r7, #28]
 416:../Generated_Code/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 343              		.loc 1 416 0
 344 0012 FB68     		ldr	r3, [r7, #12]
 345 0014 9A68     		ldr	r2, [r3, #8]
 346 0016 FB69     		ldr	r3, [r7, #28]
 347 0018 D31A     		subs	r3, r2, r3
 348 001a BB61     		str	r3, [r7, #24]
 417:../Generated_Code/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 349              		.loc 1 417 0
 350 001c BA69     		ldr	r2, [r7, #24]
 351 001e 7B68     		ldr	r3, [r7, #4]
 352 0020 9A42     		cmp	r2, r3
 353 0022 0ED9     		bls	.L11
 418:../Generated_Code/SEGGER_RTT.c ****     //
 419:../Generated_Code/SEGGER_RTT.c ****     // All data fits before wrap around
 420:../Generated_Code/SEGGER_RTT.c ****     //
 421:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 422:../Generated_Code/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 423:../Generated_Code/SEGGER_RTT.c ****     WrOff += NumBytes;
 424:../Generated_Code/SEGGER_RTT.c ****     while (NumBytes--) {
 425:../Generated_Code/SEGGER_RTT.c ****       *pDst++ = *pData++;
 426:../Generated_Code/SEGGER_RTT.c ****     };
 427:../Generated_Code/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 428:../Generated_Code/SEGGER_RTT.c **** #else
 429:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 354              		.loc 1 429 0
 355 0024 FB68     		ldr	r3, [r7, #12]
 356 0026 5A68     		ldr	r2, [r3, #4]
 357 0028 FB69     		ldr	r3, [r7, #28]
 358 002a 1344     		add	r3, r3, r2
 359 002c 1846     		mov	r0, r3
 360 002e B968     		ldr	r1, [r7, #8]
 361 0030 7A68     		ldr	r2, [r7, #4]
 362 0032 FFF7FEFF 		bl	memcpy
 430:../Generated_Code/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 363              		.loc 1 430 0
 364 0036 FA69     		ldr	r2, [r7, #28]
 365 0038 7B68     		ldr	r3, [r7, #4]
 366 003a 1A44     		add	r2, r2, r3
 367 003c FB68     		ldr	r3, [r7, #12]
 368 003e DA60     		str	r2, [r3, #12]
 369 0040 1BE0     		b	.L10
 370              	.L11:
 431:../Generated_Code/SEGGER_RTT.c **** #endif
 432:../Generated_Code/SEGGER_RTT.c ****   } else {
 433:../Generated_Code/SEGGER_RTT.c ****     //
 434:../Generated_Code/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 435:../Generated_Code/SEGGER_RTT.c ****     //
 436:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 437:../Generated_Code/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 438:../Generated_Code/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 439:../Generated_Code/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 440:../Generated_Code/SEGGER_RTT.c ****       *pDst++ = *pData++;
 441:../Generated_Code/SEGGER_RTT.c ****     };
 442:../Generated_Code/SEGGER_RTT.c ****     pDst = pRing->pBuffer;
 443:../Generated_Code/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 444:../Generated_Code/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 445:../Generated_Code/SEGGER_RTT.c ****       *pDst++ = *pData++;
 446:../Generated_Code/SEGGER_RTT.c ****     };
 447:../Generated_Code/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 448:../Generated_Code/SEGGER_RTT.c **** #else
 449:../Generated_Code/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 371              		.loc 1 449 0
 372 0042 BB69     		ldr	r3, [r7, #24]
 373 0044 7B61     		str	r3, [r7, #20]
 450:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 374              		.loc 1 450 0
 375 0046 FB68     		ldr	r3, [r7, #12]
 376 0048 5A68     		ldr	r2, [r3, #4]
 377 004a FB69     		ldr	r3, [r7, #28]
 378 004c 1344     		add	r3, r3, r2
 379 004e 1846     		mov	r0, r3
 380 0050 B968     		ldr	r1, [r7, #8]
 381 0052 7A69     		ldr	r2, [r7, #20]
 382 0054 FFF7FEFF 		bl	memcpy
 451:../Generated_Code/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 383              		.loc 1 451 0
 384 0058 7A68     		ldr	r2, [r7, #4]
 385 005a BB69     		ldr	r3, [r7, #24]
 386 005c D31A     		subs	r3, r2, r3
 387 005e 7B61     		str	r3, [r7, #20]
 452:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 388              		.loc 1 452 0
 389 0060 FB68     		ldr	r3, [r7, #12]
 390 0062 5A68     		ldr	r2, [r3, #4]
 391 0064 B968     		ldr	r1, [r7, #8]
 392 0066 BB69     		ldr	r3, [r7, #24]
 393 0068 0B44     		add	r3, r3, r1
 394 006a 1046     		mov	r0, r2
 395 006c 1946     		mov	r1, r3
 396 006e 7A69     		ldr	r2, [r7, #20]
 397 0070 FFF7FEFF 		bl	memcpy
 453:../Generated_Code/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 398              		.loc 1 453 0
 399 0074 FB68     		ldr	r3, [r7, #12]
 400 0076 7A69     		ldr	r2, [r7, #20]
 401 0078 DA60     		str	r2, [r3, #12]
 402              	.L10:
 454:../Generated_Code/SEGGER_RTT.c **** #endif
 455:../Generated_Code/SEGGER_RTT.c ****   }
 456:../Generated_Code/SEGGER_RTT.c **** }
 403              		.loc 1 456 0
 404 007a 2037     		adds	r7, r7, #32
 405 007c BD46     		mov	sp, r7
 406              		@ sp needed
 407 007e 80BD     		pop	{r7, pc}
 408              		.cfi_endproc
 409              	.LFE2:
 411              		.section	.text._PostTerminalSwitch,"ax",%progbits
 412              		.align	2
 413              		.thumb
 414              		.thumb_func
 416              	_PostTerminalSwitch:
 417              	.LFB3:
 457:../Generated_Code/SEGGER_RTT.c **** 
 458:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 459:../Generated_Code/SEGGER_RTT.c **** *
 460:../Generated_Code/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 461:../Generated_Code/SEGGER_RTT.c **** *
 462:../Generated_Code/SEGGER_RTT.c **** *  Function description
 463:../Generated_Code/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 464:../Generated_Code/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 465:../Generated_Code/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 466:../Generated_Code/SEGGER_RTT.c **** *
 467:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 468:../Generated_Code/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 469:../Generated_Code/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 470:../Generated_Code/SEGGER_RTT.c **** */
 471:../Generated_Code/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 418              		.loc 1 471 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 16
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0000 80B5     		push	{r7, lr}
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 7, -8
 425              		.cfi_offset 14, -4
 426 0002 84B0     		sub	sp, sp, #16
 427              		.cfi_def_cfa_offset 24
 428 0004 00AF     		add	r7, sp, #0
 429              		.cfi_def_cfa_register 7
 430 0006 7860     		str	r0, [r7, #4]
 431 0008 0B46     		mov	r3, r1
 432 000a FB70     		strb	r3, [r7, #3]
 472:../Generated_Code/SEGGER_RTT.c ****   unsigned char ac[2];
 473:../Generated_Code/SEGGER_RTT.c **** 
 474:../Generated_Code/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 433              		.loc 1 474 0
 434 000c FF23     		movs	r3, #255
 435 000e 3B73     		strb	r3, [r7, #12]
 475:../Generated_Code/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 436              		.loc 1 475 0
 437 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 438 0012 064A     		ldr	r2, .L14
 439 0014 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 440 0016 7B73     		strb	r3, [r7, #13]
 476:../Generated_Code/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 441              		.loc 1 476 0
 442 0018 07F10C03 		add	r3, r7, #12
 443 001c 7868     		ldr	r0, [r7, #4]
 444 001e 1946     		mov	r1, r3
 445 0020 0222     		movs	r2, #2
 446 0022 FFF7FEFF 		bl	_WriteBlocking
 477:../Generated_Code/SEGGER_RTT.c **** }
 447              		.loc 1 477 0
 448 0026 1037     		adds	r7, r7, #16
 449 0028 BD46     		mov	sp, r7
 450              		@ sp needed
 451 002a 80BD     		pop	{r7, pc}
 452              	.L15:
 453              		.align	2
 454              	.L14:
 455 002c 00000000 		.word	_aTerminalId
 456              		.cfi_endproc
 457              	.LFE3:
 459              		.section	.text._GetAvailWriteSpace,"ax",%progbits
 460              		.align	2
 461              		.thumb
 462              		.thumb_func
 464              	_GetAvailWriteSpace:
 465              	.LFB4:
 478:../Generated_Code/SEGGER_RTT.c **** 
 479:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 480:../Generated_Code/SEGGER_RTT.c **** *
 481:../Generated_Code/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 482:../Generated_Code/SEGGER_RTT.c **** *
 483:../Generated_Code/SEGGER_RTT.c **** *  Function description
 484:../Generated_Code/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 485:../Generated_Code/SEGGER_RTT.c **** *    buffer without blocking.
 486:../Generated_Code/SEGGER_RTT.c **** *
 487:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 488:../Generated_Code/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 489:../Generated_Code/SEGGER_RTT.c **** *
 490:../Generated_Code/SEGGER_RTT.c **** *  Return value
 491:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 492:../Generated_Code/SEGGER_RTT.c **** */
 493:../Generated_Code/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 466              		.loc 1 493 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 24
 469              		@ frame_needed = 1, uses_anonymous_args = 0
 470              		@ link register save eliminated.
 471 0000 80B4     		push	{r7}
 472              		.cfi_def_cfa_offset 4
 473              		.cfi_offset 7, -4
 474 0002 87B0     		sub	sp, sp, #28
 475              		.cfi_def_cfa_offset 32
 476 0004 00AF     		add	r7, sp, #0
 477              		.cfi_def_cfa_register 7
 478 0006 7860     		str	r0, [r7, #4]
 494:../Generated_Code/SEGGER_RTT.c ****   unsigned RdOff;
 495:../Generated_Code/SEGGER_RTT.c ****   unsigned WrOff;
 496:../Generated_Code/SEGGER_RTT.c ****   unsigned r;
 497:../Generated_Code/SEGGER_RTT.c ****   //
 498:../Generated_Code/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 499:../Generated_Code/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 500:../Generated_Code/SEGGER_RTT.c ****   //
 501:../Generated_Code/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 479              		.loc 1 501 0
 480 0008 7B68     		ldr	r3, [r7, #4]
 481 000a 1B69     		ldr	r3, [r3, #16]
 482 000c 3B61     		str	r3, [r7, #16]
 502:../Generated_Code/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 483              		.loc 1 502 0
 484 000e 7B68     		ldr	r3, [r7, #4]
 485 0010 DB68     		ldr	r3, [r3, #12]
 486 0012 FB60     		str	r3, [r7, #12]
 503:../Generated_Code/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 487              		.loc 1 503 0
 488 0014 3A69     		ldr	r2, [r7, #16]
 489 0016 FB68     		ldr	r3, [r7, #12]
 490 0018 9A42     		cmp	r2, r3
 491 001a 08D8     		bhi	.L17
 504:../Generated_Code/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 492              		.loc 1 504 0
 493 001c 7B68     		ldr	r3, [r7, #4]
 494 001e 9A68     		ldr	r2, [r3, #8]
 495 0020 FB68     		ldr	r3, [r7, #12]
 496 0022 D21A     		subs	r2, r2, r3
 497 0024 3B69     		ldr	r3, [r7, #16]
 498 0026 1344     		add	r3, r3, r2
 499 0028 013B     		subs	r3, r3, #1
 500 002a 7B61     		str	r3, [r7, #20]
 501 002c 04E0     		b	.L18
 502              	.L17:
 505:../Generated_Code/SEGGER_RTT.c ****   } else {
 506:../Generated_Code/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
 503              		.loc 1 506 0
 504 002e 3A69     		ldr	r2, [r7, #16]
 505 0030 FB68     		ldr	r3, [r7, #12]
 506 0032 D31A     		subs	r3, r2, r3
 507 0034 013B     		subs	r3, r3, #1
 508 0036 7B61     		str	r3, [r7, #20]
 509              	.L18:
 507:../Generated_Code/SEGGER_RTT.c ****   }
 508:../Generated_Code/SEGGER_RTT.c ****   return r;
 510              		.loc 1 508 0
 511 0038 7B69     		ldr	r3, [r7, #20]
 509:../Generated_Code/SEGGER_RTT.c **** }
 512              		.loc 1 509 0
 513 003a 1846     		mov	r0, r3
 514 003c 1C37     		adds	r7, r7, #28
 515 003e BD46     		mov	sp, r7
 516              		@ sp needed
 517 0040 5DF8047B 		ldr	r7, [sp], #4
 518 0044 7047     		bx	lr
 519              		.cfi_endproc
 520              	.LFE4:
 522 0046 00BF     		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 523              		.align	2
 524              		.global	SEGGER_RTT_ReadNoLock
 525              		.thumb
 526              		.thumb_func
 528              	SEGGER_RTT_ReadNoLock:
 529              	.LFB5:
 510:../Generated_Code/SEGGER_RTT.c **** 
 511:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 512:../Generated_Code/SEGGER_RTT.c **** *
 513:../Generated_Code/SEGGER_RTT.c **** *       Public code
 514:../Generated_Code/SEGGER_RTT.c **** *
 515:../Generated_Code/SEGGER_RTT.c **** **********************************************************************
 516:../Generated_Code/SEGGER_RTT.c **** */
 517:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 518:../Generated_Code/SEGGER_RTT.c **** *
 519:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 520:../Generated_Code/SEGGER_RTT.c **** *
 521:../Generated_Code/SEGGER_RTT.c **** *  Function description
 522:../Generated_Code/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 523:../Generated_Code/SEGGER_RTT.c **** *    which have been previously stored by the host.
 524:../Generated_Code/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 525:../Generated_Code/SEGGER_RTT.c **** *
 526:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 527:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 528:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 529:../Generated_Code/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 530:../Generated_Code/SEGGER_RTT.c **** *
 531:../Generated_Code/SEGGER_RTT.c **** *  Return value
 532:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes that have been read.
 533:../Generated_Code/SEGGER_RTT.c **** */
 534:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 530              		.loc 1 534 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 40
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534 0000 80B5     		push	{r7, lr}
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 7, -8
 537              		.cfi_offset 14, -4
 538 0002 8AB0     		sub	sp, sp, #40
 539              		.cfi_def_cfa_offset 48
 540 0004 00AF     		add	r7, sp, #0
 541              		.cfi_def_cfa_register 7
 542 0006 F860     		str	r0, [r7, #12]
 543 0008 B960     		str	r1, [r7, #8]
 544 000a 7A60     		str	r2, [r7, #4]
 535:../Generated_Code/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 536:../Generated_Code/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 537:../Generated_Code/SEGGER_RTT.c ****   unsigned                RdOff;
 538:../Generated_Code/SEGGER_RTT.c ****   unsigned                WrOff;
 539:../Generated_Code/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 540:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 541:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 542:../Generated_Code/SEGGER_RTT.c ****   const char*             pSrc;
 543:../Generated_Code/SEGGER_RTT.c **** #endif
 544:../Generated_Code/SEGGER_RTT.c ****   //
 545:../Generated_Code/SEGGER_RTT.c ****   INIT();
 545              		.loc 1 545 0
 546 000c 3C4B     		ldr	r3, .L26
 547 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 548 0010 002B     		cmp	r3, #0
 549 0012 01D1     		bne	.L21
 550              		.loc 1 545 0 is_stmt 0 discriminator 1
 551 0014 FFF7FEFF 		bl	_DoInit
 552              	.L21:
 546:../Generated_Code/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 553              		.loc 1 546 0 is_stmt 1
 554 0018 FA68     		ldr	r2, [r7, #12]
 555 001a 1346     		mov	r3, r2
 556 001c 5B00     		lsls	r3, r3, #1
 557 001e 1344     		add	r3, r3, r2
 558 0020 DB00     		lsls	r3, r3, #3
 559 0022 03F16002 		add	r2, r3, #96
 560 0026 364B     		ldr	r3, .L26
 561 0028 1344     		add	r3, r3, r2
 562 002a BB61     		str	r3, [r7, #24]
 547:../Generated_Code/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 563              		.loc 1 547 0
 564 002c BB68     		ldr	r3, [r7, #8]
 565 002e FB61     		str	r3, [r7, #28]
 548:../Generated_Code/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 566              		.loc 1 548 0
 567 0030 BB69     		ldr	r3, [r7, #24]
 568 0032 1B69     		ldr	r3, [r3, #16]
 569 0034 3B62     		str	r3, [r7, #32]
 549:../Generated_Code/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 570              		.loc 1 549 0
 571 0036 BB69     		ldr	r3, [r7, #24]
 572 0038 DB68     		ldr	r3, [r3, #12]
 573 003a 7B61     		str	r3, [r7, #20]
 550:../Generated_Code/SEGGER_RTT.c ****   NumBytesRead = 0u;
 574              		.loc 1 550 0
 575 003c 0023     		movs	r3, #0
 576 003e 7B62     		str	r3, [r7, #36]
 551:../Generated_Code/SEGGER_RTT.c ****   //
 552:../Generated_Code/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 553:../Generated_Code/SEGGER_RTT.c ****   //
 554:../Generated_Code/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 577              		.loc 1 554 0
 578 0040 3A6A     		ldr	r2, [r7, #32]
 579 0042 7B69     		ldr	r3, [r7, #20]
 580 0044 9A42     		cmp	r2, r3
 581 0046 2AD9     		bls	.L22
 555:../Generated_Code/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 582              		.loc 1 555 0
 583 0048 BB69     		ldr	r3, [r7, #24]
 584 004a 9A68     		ldr	r2, [r3, #8]
 585 004c 3B6A     		ldr	r3, [r7, #32]
 586 004e D31A     		subs	r3, r2, r3
 587 0050 3B61     		str	r3, [r7, #16]
 556:../Generated_Code/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 588              		.loc 1 556 0
 589 0052 3A69     		ldr	r2, [r7, #16]
 590 0054 7B68     		ldr	r3, [r7, #4]
 591 0056 9A42     		cmp	r2, r3
 592 0058 38BF     		it	cc
 593 005a 1346     		movcc	r3, r2
 594 005c 3B61     		str	r3, [r7, #16]
 557:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 558:../Generated_Code/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 559:../Generated_Code/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 560:../Generated_Code/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 561:../Generated_Code/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 562:../Generated_Code/SEGGER_RTT.c ****     while (NumBytesRem--) {
 563:../Generated_Code/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 564:../Generated_Code/SEGGER_RTT.c ****     };
 565:../Generated_Code/SEGGER_RTT.c **** #else
 566:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 595              		.loc 1 566 0
 596 005e BB69     		ldr	r3, [r7, #24]
 597 0060 5A68     		ldr	r2, [r3, #4]
 598 0062 3B6A     		ldr	r3, [r7, #32]
 599 0064 1344     		add	r3, r3, r2
 600 0066 F869     		ldr	r0, [r7, #28]
 601 0068 1946     		mov	r1, r3
 602 006a 3A69     		ldr	r2, [r7, #16]
 603 006c FFF7FEFF 		bl	memcpy
 567:../Generated_Code/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 604              		.loc 1 567 0
 605 0070 7A6A     		ldr	r2, [r7, #36]
 606 0072 3B69     		ldr	r3, [r7, #16]
 607 0074 1344     		add	r3, r3, r2
 608 0076 7B62     		str	r3, [r7, #36]
 568:../Generated_Code/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 609              		.loc 1 568 0
 610 0078 FA69     		ldr	r2, [r7, #28]
 611 007a 3B69     		ldr	r3, [r7, #16]
 612 007c 1344     		add	r3, r3, r2
 613 007e FB61     		str	r3, [r7, #28]
 569:../Generated_Code/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 614              		.loc 1 569 0
 615 0080 7A68     		ldr	r2, [r7, #4]
 616 0082 3B69     		ldr	r3, [r7, #16]
 617 0084 D31A     		subs	r3, r2, r3
 618 0086 7B60     		str	r3, [r7, #4]
 570:../Generated_Code/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 619              		.loc 1 570 0
 620 0088 3A6A     		ldr	r2, [r7, #32]
 621 008a 3B69     		ldr	r3, [r7, #16]
 622 008c 1344     		add	r3, r3, r2
 623 008e 3B62     		str	r3, [r7, #32]
 571:../Generated_Code/SEGGER_RTT.c **** #endif
 572:../Generated_Code/SEGGER_RTT.c ****     //
 573:../Generated_Code/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 574:../Generated_Code/SEGGER_RTT.c ****     //
 575:../Generated_Code/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 624              		.loc 1 575 0
 625 0090 BB69     		ldr	r3, [r7, #24]
 626 0092 9A68     		ldr	r2, [r3, #8]
 627 0094 3B6A     		ldr	r3, [r7, #32]
 628 0096 9A42     		cmp	r2, r3
 629 0098 01D1     		bne	.L22
 576:../Generated_Code/SEGGER_RTT.c ****       RdOff = 0u;
 630              		.loc 1 576 0
 631 009a 0023     		movs	r3, #0
 632 009c 3B62     		str	r3, [r7, #32]
 633              	.L22:
 577:../Generated_Code/SEGGER_RTT.c ****     }
 578:../Generated_Code/SEGGER_RTT.c ****   }
 579:../Generated_Code/SEGGER_RTT.c ****   //
 580:../Generated_Code/SEGGER_RTT.c ****   // Read remaining items of buffer
 581:../Generated_Code/SEGGER_RTT.c ****   //
 582:../Generated_Code/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 634              		.loc 1 582 0
 635 009e 7A69     		ldr	r2, [r7, #20]
 636 00a0 3B6A     		ldr	r3, [r7, #32]
 637 00a2 D31A     		subs	r3, r2, r3
 638 00a4 3B61     		str	r3, [r7, #16]
 583:../Generated_Code/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 639              		.loc 1 583 0
 640 00a6 3A69     		ldr	r2, [r7, #16]
 641 00a8 7B68     		ldr	r3, [r7, #4]
 642 00aa 9A42     		cmp	r2, r3
 643 00ac 38BF     		it	cc
 644 00ae 1346     		movcc	r3, r2
 645 00b0 3B61     		str	r3, [r7, #16]
 584:../Generated_Code/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 646              		.loc 1 584 0
 647 00b2 3B69     		ldr	r3, [r7, #16]
 648 00b4 002B     		cmp	r3, #0
 649 00b6 18D0     		beq	.L23
 585:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 586:../Generated_Code/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 587:../Generated_Code/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 588:../Generated_Code/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 589:../Generated_Code/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 590:../Generated_Code/SEGGER_RTT.c ****     while (NumBytesRem--) {
 591:../Generated_Code/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 592:../Generated_Code/SEGGER_RTT.c ****     };
 593:../Generated_Code/SEGGER_RTT.c **** #else
 594:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 650              		.loc 1 594 0
 651 00b8 BB69     		ldr	r3, [r7, #24]
 652 00ba 5A68     		ldr	r2, [r3, #4]
 653 00bc 3B6A     		ldr	r3, [r7, #32]
 654 00be 1344     		add	r3, r3, r2
 655 00c0 F869     		ldr	r0, [r7, #28]
 656 00c2 1946     		mov	r1, r3
 657 00c4 3A69     		ldr	r2, [r7, #16]
 658 00c6 FFF7FEFF 		bl	memcpy
 595:../Generated_Code/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 659              		.loc 1 595 0
 660 00ca 7A6A     		ldr	r2, [r7, #36]
 661 00cc 3B69     		ldr	r3, [r7, #16]
 662 00ce 1344     		add	r3, r3, r2
 663 00d0 7B62     		str	r3, [r7, #36]
 596:../Generated_Code/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 664              		.loc 1 596 0
 665 00d2 FA69     		ldr	r2, [r7, #28]
 666 00d4 3B69     		ldr	r3, [r7, #16]
 667 00d6 1344     		add	r3, r3, r2
 668 00d8 FB61     		str	r3, [r7, #28]
 597:../Generated_Code/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 669              		.loc 1 597 0
 670 00da 7A68     		ldr	r2, [r7, #4]
 671 00dc 3B69     		ldr	r3, [r7, #16]
 672 00de D31A     		subs	r3, r2, r3
 673 00e0 7B60     		str	r3, [r7, #4]
 598:../Generated_Code/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 674              		.loc 1 598 0
 675 00e2 3A6A     		ldr	r2, [r7, #32]
 676 00e4 3B69     		ldr	r3, [r7, #16]
 677 00e6 1344     		add	r3, r3, r2
 678 00e8 3B62     		str	r3, [r7, #32]
 679              	.L23:
 599:../Generated_Code/SEGGER_RTT.c **** #endif
 600:../Generated_Code/SEGGER_RTT.c ****   }
 601:../Generated_Code/SEGGER_RTT.c ****   if (NumBytesRead) {
 680              		.loc 1 601 0
 681 00ea 7B6A     		ldr	r3, [r7, #36]
 682 00ec 002B     		cmp	r3, #0
 683 00ee 02D0     		beq	.L24
 602:../Generated_Code/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 684              		.loc 1 602 0
 685 00f0 BB69     		ldr	r3, [r7, #24]
 686 00f2 3A6A     		ldr	r2, [r7, #32]
 687 00f4 1A61     		str	r2, [r3, #16]
 688              	.L24:
 603:../Generated_Code/SEGGER_RTT.c ****   }
 604:../Generated_Code/SEGGER_RTT.c ****   //
 605:../Generated_Code/SEGGER_RTT.c ****   return NumBytesRead;
 689              		.loc 1 605 0
 690 00f6 7B6A     		ldr	r3, [r7, #36]
 606:../Generated_Code/SEGGER_RTT.c **** }
 691              		.loc 1 606 0
 692 00f8 1846     		mov	r0, r3
 693 00fa 2837     		adds	r7, r7, #40
 694 00fc BD46     		mov	sp, r7
 695              		@ sp needed
 696 00fe 80BD     		pop	{r7, pc}
 697              	.L27:
 698              		.align	2
 699              	.L26:
 700 0100 00000000 		.word	_SEGGER_RTT
 701              		.cfi_endproc
 702              	.LFE5:
 704              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 705              		.align	2
 706              		.global	SEGGER_RTT_Read
 707              		.thumb
 708              		.thumb_func
 710              	SEGGER_RTT_Read:
 711              	.LFB6:
 607:../Generated_Code/SEGGER_RTT.c **** 
 608:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 609:../Generated_Code/SEGGER_RTT.c **** *
 610:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 611:../Generated_Code/SEGGER_RTT.c **** *
 612:../Generated_Code/SEGGER_RTT.c **** *  Function description
 613:../Generated_Code/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 614:../Generated_Code/SEGGER_RTT.c **** *    which have been previously stored by the host.
 615:../Generated_Code/SEGGER_RTT.c **** *
 616:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 617:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 618:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 619:../Generated_Code/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 620:../Generated_Code/SEGGER_RTT.c **** *
 621:../Generated_Code/SEGGER_RTT.c **** *  Return value
 622:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes that have been read.
 623:../Generated_Code/SEGGER_RTT.c **** */
 624:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 712              		.loc 1 624 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 24
 715              		@ frame_needed = 1, uses_anonymous_args = 0
 716 0000 80B5     		push	{r7, lr}
 717              		.cfi_def_cfa_offset 8
 718              		.cfi_offset 7, -8
 719              		.cfi_offset 14, -4
 720 0002 86B0     		sub	sp, sp, #24
 721              		.cfi_def_cfa_offset 32
 722 0004 00AF     		add	r7, sp, #0
 723              		.cfi_def_cfa_register 7
 724 0006 F860     		str	r0, [r7, #12]
 725 0008 B960     		str	r1, [r7, #8]
 726 000a 7A60     		str	r2, [r7, #4]
 727              	.LBB2:
 625:../Generated_Code/SEGGER_RTT.c ****   unsigned NumBytesRead;
 626:../Generated_Code/SEGGER_RTT.c ****   //
 627:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 728              		.loc 1 627 0
 729              	@ 627 "../Generated_Code/SEGGER_RTT.c" 1
 730 000c EFF31183 		mrs   r3, basepri  
 731 0010 4FF03001 		mov   r1, #48     
 732 0014 81F31188 		msr   basepri, r1  
 733              		
 734              	@ 0 "" 2
 735              		.thumb
 736 0018 7B61     		str	r3, [r7, #20]
 628:../Generated_Code/SEGGER_RTT.c ****   //
 629:../Generated_Code/SEGGER_RTT.c ****   // Call the non-locking read function
 630:../Generated_Code/SEGGER_RTT.c ****   //
 631:../Generated_Code/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 737              		.loc 1 631 0
 738 001a F868     		ldr	r0, [r7, #12]
 739 001c B968     		ldr	r1, [r7, #8]
 740 001e 7A68     		ldr	r2, [r7, #4]
 741 0020 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 742 0024 3861     		str	r0, [r7, #16]
 632:../Generated_Code/SEGGER_RTT.c ****   //
 633:../Generated_Code/SEGGER_RTT.c ****   // Finish up.
 634:../Generated_Code/SEGGER_RTT.c ****   //
 635:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 743              		.loc 1 635 0
 744 0026 7B69     		ldr	r3, [r7, #20]
 745              	@ 635 "../Generated_Code/SEGGER_RTT.c" 1
 746 0028 83F31188 		msr   basepri, r3  
 747              		
 748              	@ 0 "" 2
 749              		.thumb
 750              	.LBE2:
 636:../Generated_Code/SEGGER_RTT.c ****   //
 637:../Generated_Code/SEGGER_RTT.c ****   return NumBytesRead;
 751              		.loc 1 637 0
 752 002c 3B69     		ldr	r3, [r7, #16]
 638:../Generated_Code/SEGGER_RTT.c **** }
 753              		.loc 1 638 0
 754 002e 1846     		mov	r0, r3
 755 0030 1837     		adds	r7, r7, #24
 756 0032 BD46     		mov	sp, r7
 757              		@ sp needed
 758 0034 80BD     		pop	{r7, pc}
 759              		.cfi_endproc
 760              	.LFE6:
 762 0036 00BF     		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 763              		.align	2
 764              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 765              		.thumb
 766              		.thumb_func
 768              	SEGGER_RTT_WriteWithOverwriteNoLock:
 769              	.LFB7:
 639:../Generated_Code/SEGGER_RTT.c **** 
 640:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 641:../Generated_Code/SEGGER_RTT.c **** *
 642:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 643:../Generated_Code/SEGGER_RTT.c **** *
 644:../Generated_Code/SEGGER_RTT.c **** *  Function description
 645:../Generated_Code/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 646:../Generated_Code/SEGGER_RTT.c **** *    control block.
 647:../Generated_Code/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 648:../Generated_Code/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 649:../Generated_Code/SEGGER_RTT.c **** *
 650:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 651:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 652:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 653:../Generated_Code/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 654:../Generated_Code/SEGGER_RTT.c **** *
 655:../Generated_Code/SEGGER_RTT.c **** *  Notes
 656:../Generated_Code/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 657:../Generated_Code/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 658:../Generated_Code/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 659:../Generated_Code/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 660:../Generated_Code/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 661:../Generated_Code/SEGGER_RTT.c **** *        connection reads RTT data.
 662:../Generated_Code/SEGGER_RTT.c **** */
 663:../Generated_Code/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 770              		.loc 1 663 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 32
 773              		@ frame_needed = 1, uses_anonymous_args = 0
 774 0000 80B5     		push	{r7, lr}
 775              		.cfi_def_cfa_offset 8
 776              		.cfi_offset 7, -8
 777              		.cfi_offset 14, -4
 778 0002 88B0     		sub	sp, sp, #32
 779              		.cfi_def_cfa_offset 40
 780 0004 00AF     		add	r7, sp, #0
 781              		.cfi_def_cfa_register 7
 782 0006 F860     		str	r0, [r7, #12]
 783 0008 B960     		str	r1, [r7, #8]
 784 000a 7A60     		str	r2, [r7, #4]
 664:../Generated_Code/SEGGER_RTT.c ****   const char*           pData;
 665:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 666:../Generated_Code/SEGGER_RTT.c ****   unsigned              Avail;
 667:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 668:../Generated_Code/SEGGER_RTT.c ****   char*                 pDst;
 669:../Generated_Code/SEGGER_RTT.c **** #endif
 670:../Generated_Code/SEGGER_RTT.c **** 
 671:../Generated_Code/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 785              		.loc 1 671 0
 786 000c BB68     		ldr	r3, [r7, #8]
 787 000e FB61     		str	r3, [r7, #28]
 672:../Generated_Code/SEGGER_RTT.c ****   //
 673:../Generated_Code/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 674:../Generated_Code/SEGGER_RTT.c ****   //
 675:../Generated_Code/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 788              		.loc 1 675 0
 789 0010 FB68     		ldr	r3, [r7, #12]
 790 0012 5A1C     		adds	r2, r3, #1
 791 0014 1346     		mov	r3, r2
 792 0016 5B00     		lsls	r3, r3, #1
 793 0018 1344     		add	r3, r3, r2
 794 001a DB00     		lsls	r3, r3, #3
 795 001c 3C4A     		ldr	r2, .L40
 796 001e 1344     		add	r3, r3, r2
 797 0020 7B61     		str	r3, [r7, #20]
 676:../Generated_Code/SEGGER_RTT.c ****   //
 677:../Generated_Code/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 678:../Generated_Code/SEGGER_RTT.c ****   //
 679:../Generated_Code/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 798              		.loc 1 679 0
 799 0022 7B69     		ldr	r3, [r7, #20]
 800 0024 DA68     		ldr	r2, [r3, #12]
 801 0026 7B69     		ldr	r3, [r7, #20]
 802 0028 1B69     		ldr	r3, [r3, #16]
 803 002a 9A42     		cmp	r2, r3
 804 002c 04D1     		bne	.L31
 680:../Generated_Code/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 805              		.loc 1 680 0
 806 002e 7B69     		ldr	r3, [r7, #20]
 807 0030 9B68     		ldr	r3, [r3, #8]
 808 0032 013B     		subs	r3, r3, #1
 809 0034 BB61     		str	r3, [r7, #24]
 810 0036 17E0     		b	.L32
 811              	.L31:
 681:../Generated_Code/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 812              		.loc 1 681 0
 813 0038 7B69     		ldr	r3, [r7, #20]
 814 003a DA68     		ldr	r2, [r3, #12]
 815 003c 7B69     		ldr	r3, [r7, #20]
 816 003e 1B69     		ldr	r3, [r3, #16]
 817 0040 9A42     		cmp	r2, r3
 818 0042 07D2     		bcs	.L33
 682:../Generated_Code/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 819              		.loc 1 682 0
 820 0044 7B69     		ldr	r3, [r7, #20]
 821 0046 1A69     		ldr	r2, [r3, #16]
 822 0048 7B69     		ldr	r3, [r7, #20]
 823 004a DB68     		ldr	r3, [r3, #12]
 824 004c D31A     		subs	r3, r2, r3
 825 004e 013B     		subs	r3, r3, #1
 826 0050 BB61     		str	r3, [r7, #24]
 827 0052 09E0     		b	.L32
 828              	.L33:
 683:../Generated_Code/SEGGER_RTT.c ****   } else {
 684:../Generated_Code/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 829              		.loc 1 684 0
 830 0054 7B69     		ldr	r3, [r7, #20]
 831 0056 1A69     		ldr	r2, [r3, #16]
 832 0058 7B69     		ldr	r3, [r7, #20]
 833 005a DB68     		ldr	r3, [r3, #12]
 834 005c D21A     		subs	r2, r2, r3
 835 005e 7B69     		ldr	r3, [r7, #20]
 836 0060 9B68     		ldr	r3, [r3, #8]
 837 0062 1344     		add	r3, r3, r2
 838 0064 013B     		subs	r3, r3, #1
 839 0066 BB61     		str	r3, [r7, #24]
 840              	.L32:
 685:../Generated_Code/SEGGER_RTT.c ****   }
 686:../Generated_Code/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 841              		.loc 1 686 0
 842 0068 7A68     		ldr	r2, [r7, #4]
 843 006a BB69     		ldr	r3, [r7, #24]
 844 006c 9A42     		cmp	r2, r3
 845 006e 15D9     		bls	.L34
 687:../Generated_Code/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 846              		.loc 1 687 0
 847 0070 7B69     		ldr	r3, [r7, #20]
 848 0072 1A69     		ldr	r2, [r3, #16]
 849 0074 7968     		ldr	r1, [r7, #4]
 850 0076 BB69     		ldr	r3, [r7, #24]
 851 0078 CB1A     		subs	r3, r1, r3
 852 007a 1A44     		add	r2, r2, r3
 853 007c 7B69     		ldr	r3, [r7, #20]
 854 007e 1A61     		str	r2, [r3, #16]
 688:../Generated_Code/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 855              		.loc 1 688 0
 856 0080 06E0     		b	.L35
 857              	.L36:
 689:../Generated_Code/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 858              		.loc 1 689 0
 859 0082 7B69     		ldr	r3, [r7, #20]
 860 0084 1A69     		ldr	r2, [r3, #16]
 861 0086 7B69     		ldr	r3, [r7, #20]
 862 0088 9B68     		ldr	r3, [r3, #8]
 863 008a D21A     		subs	r2, r2, r3
 864 008c 7B69     		ldr	r3, [r7, #20]
 865 008e 1A61     		str	r2, [r3, #16]
 866              	.L35:
 688:../Generated_Code/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 867              		.loc 1 688 0 discriminator 1
 868 0090 7B69     		ldr	r3, [r7, #20]
 869 0092 1A69     		ldr	r2, [r3, #16]
 870 0094 7B69     		ldr	r3, [r7, #20]
 871 0096 9B68     		ldr	r3, [r3, #8]
 872 0098 9A42     		cmp	r2, r3
 873 009a F2D2     		bcs	.L36
 874              	.L34:
 690:../Generated_Code/SEGGER_RTT.c ****     }
 691:../Generated_Code/SEGGER_RTT.c ****   }
 692:../Generated_Code/SEGGER_RTT.c ****   //
 693:../Generated_Code/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 694:../Generated_Code/SEGGER_RTT.c ****   //
 695:../Generated_Code/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 875              		.loc 1 695 0
 876 009c 7B69     		ldr	r3, [r7, #20]
 877 009e 9A68     		ldr	r2, [r3, #8]
 878 00a0 7B69     		ldr	r3, [r7, #20]
 879 00a2 DB68     		ldr	r3, [r3, #12]
 880 00a4 D31A     		subs	r3, r2, r3
 881 00a6 BB61     		str	r3, [r7, #24]
 882              	.L39:
 696:../Generated_Code/SEGGER_RTT.c ****   do {
 697:../Generated_Code/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 883              		.loc 1 697 0
 884 00a8 BA69     		ldr	r2, [r7, #24]
 885 00aa 7B68     		ldr	r3, [r7, #4]
 886 00ac 9A42     		cmp	r2, r3
 887 00ae 10D9     		bls	.L37
 698:../Generated_Code/SEGGER_RTT.c ****       //
 699:../Generated_Code/SEGGER_RTT.c ****       // Last round
 700:../Generated_Code/SEGGER_RTT.c ****       //
 701:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 702:../Generated_Code/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 703:../Generated_Code/SEGGER_RTT.c ****       Avail = NumBytes;
 704:../Generated_Code/SEGGER_RTT.c ****       while (NumBytes--) {
 705:../Generated_Code/SEGGER_RTT.c ****         *pDst++ = *pData++;
 706:../Generated_Code/SEGGER_RTT.c ****       };
 707:../Generated_Code/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 708:../Generated_Code/SEGGER_RTT.c **** #else
 709:../Generated_Code/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, NumBytes);
 888              		.loc 1 709 0
 889 00b0 7B69     		ldr	r3, [r7, #20]
 890 00b2 5A68     		ldr	r2, [r3, #4]
 891 00b4 7B69     		ldr	r3, [r7, #20]
 892 00b6 DB68     		ldr	r3, [r3, #12]
 893 00b8 1344     		add	r3, r3, r2
 894 00ba 1846     		mov	r0, r3
 895 00bc F969     		ldr	r1, [r7, #28]
 896 00be 7A68     		ldr	r2, [r7, #4]
 897 00c0 FFF7FEFF 		bl	memcpy
 710:../Generated_Code/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 898              		.loc 1 710 0
 899 00c4 7B69     		ldr	r3, [r7, #20]
 900 00c6 DA68     		ldr	r2, [r3, #12]
 901 00c8 7B68     		ldr	r3, [r7, #4]
 902 00ca 1A44     		add	r2, r2, r3
 903 00cc 7B69     		ldr	r3, [r7, #20]
 904 00ce DA60     		str	r2, [r3, #12]
 711:../Generated_Code/SEGGER_RTT.c **** #endif
 712:../Generated_Code/SEGGER_RTT.c ****       break;
 905              		.loc 1 712 0
 906 00d0 1BE0     		b	.L30
 907              	.L37:
 713:../Generated_Code/SEGGER_RTT.c ****     } else {
 714:../Generated_Code/SEGGER_RTT.c ****       //
 715:../Generated_Code/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 716:../Generated_Code/SEGGER_RTT.c ****       //
 717:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 718:../Generated_Code/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 719:../Generated_Code/SEGGER_RTT.c ****       NumBytes -= Avail;
 720:../Generated_Code/SEGGER_RTT.c ****       while (Avail--) {
 721:../Generated_Code/SEGGER_RTT.c ****         *pDst++ = *pData++;
 722:../Generated_Code/SEGGER_RTT.c ****       };
 723:../Generated_Code/SEGGER_RTT.c ****       pRing->WrOff = 0;
 724:../Generated_Code/SEGGER_RTT.c **** #else
 725:../Generated_Code/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, Avail);
 908              		.loc 1 725 0
 909 00d2 7B69     		ldr	r3, [r7, #20]
 910 00d4 5A68     		ldr	r2, [r3, #4]
 911 00d6 7B69     		ldr	r3, [r7, #20]
 912 00d8 DB68     		ldr	r3, [r3, #12]
 913 00da 1344     		add	r3, r3, r2
 914 00dc 1846     		mov	r0, r3
 915 00de F969     		ldr	r1, [r7, #28]
 916 00e0 BA69     		ldr	r2, [r7, #24]
 917 00e2 FFF7FEFF 		bl	memcpy
 726:../Generated_Code/SEGGER_RTT.c ****       pData += Avail;
 918              		.loc 1 726 0
 919 00e6 FA69     		ldr	r2, [r7, #28]
 920 00e8 BB69     		ldr	r3, [r7, #24]
 921 00ea 1344     		add	r3, r3, r2
 922 00ec FB61     		str	r3, [r7, #28]
 727:../Generated_Code/SEGGER_RTT.c ****       pRing->WrOff = 0;
 923              		.loc 1 727 0
 924 00ee 7B69     		ldr	r3, [r7, #20]
 925 00f0 0022     		movs	r2, #0
 926 00f2 DA60     		str	r2, [r3, #12]
 728:../Generated_Code/SEGGER_RTT.c ****       NumBytes -= Avail;
 927              		.loc 1 728 0
 928 00f4 7A68     		ldr	r2, [r7, #4]
 929 00f6 BB69     		ldr	r3, [r7, #24]
 930 00f8 D31A     		subs	r3, r2, r3
 931 00fa 7B60     		str	r3, [r7, #4]
 729:../Generated_Code/SEGGER_RTT.c **** #endif
 730:../Generated_Code/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 932              		.loc 1 730 0
 933 00fc 7B69     		ldr	r3, [r7, #20]
 934 00fe 9B68     		ldr	r3, [r3, #8]
 935 0100 013B     		subs	r3, r3, #1
 936 0102 BB61     		str	r3, [r7, #24]
 731:../Generated_Code/SEGGER_RTT.c ****     }
 732:../Generated_Code/SEGGER_RTT.c ****   } while (NumBytes);
 937              		.loc 1 732 0
 938 0104 7B68     		ldr	r3, [r7, #4]
 939 0106 002B     		cmp	r3, #0
 940 0108 CED1     		bne	.L39
 941              	.L30:
 733:../Generated_Code/SEGGER_RTT.c **** }
 942              		.loc 1 733 0
 943 010a 2037     		adds	r7, r7, #32
 944 010c BD46     		mov	sp, r7
 945              		@ sp needed
 946 010e 80BD     		pop	{r7, pc}
 947              	.L41:
 948              		.align	2
 949              	.L40:
 950 0110 00000000 		.word	_SEGGER_RTT
 951              		.cfi_endproc
 952              	.LFE7:
 954              		.section	.text.SEGGER_RTT_WriteSkipNoLock,"ax",%progbits
 955              		.align	2
 956              		.global	SEGGER_RTT_WriteSkipNoLock
 957              		.thumb
 958              		.thumb_func
 960              	SEGGER_RTT_WriteSkipNoLock:
 961              	.LFB8:
 734:../Generated_Code/SEGGER_RTT.c **** 
 735:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 736:../Generated_Code/SEGGER_RTT.c **** *
 737:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 738:../Generated_Code/SEGGER_RTT.c **** *
 739:../Generated_Code/SEGGER_RTT.c **** *  Function description
 740:../Generated_Code/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 741:../Generated_Code/SEGGER_RTT.c **** *    control block which is then read by the host.
 742:../Generated_Code/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 743:../Generated_Code/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 744:../Generated_Code/SEGGER_RTT.c **** *
 745:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 746:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 747:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 748:../Generated_Code/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 749:../Generated_Code/SEGGER_RTT.c **** *
 750:../Generated_Code/SEGGER_RTT.c **** *  Return value
 751:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 752:../Generated_Code/SEGGER_RTT.c **** *
 753:../Generated_Code/SEGGER_RTT.c **** *  Notes
 754:../Generated_Code/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 755:../Generated_Code/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 756:../Generated_Code/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 757:../Generated_Code/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 758:../Generated_Code/SEGGER_RTT.c **** */
 759:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 962              		.loc 1 759 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 40
 965              		@ frame_needed = 1, uses_anonymous_args = 0
 966 0000 80B5     		push	{r7, lr}
 967              		.cfi_def_cfa_offset 8
 968              		.cfi_offset 7, -8
 969              		.cfi_offset 14, -4
 970 0002 8AB0     		sub	sp, sp, #40
 971              		.cfi_def_cfa_offset 48
 972 0004 00AF     		add	r7, sp, #0
 973              		.cfi_def_cfa_register 7
 974 0006 F860     		str	r0, [r7, #12]
 975 0008 B960     		str	r1, [r7, #8]
 976 000a 7A60     		str	r2, [r7, #4]
 760:../Generated_Code/SEGGER_RTT.c ****   const char*           pData;
 761:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 762:../Generated_Code/SEGGER_RTT.c ****   unsigned              Avail;
 763:../Generated_Code/SEGGER_RTT.c ****   unsigned              RdOff;
 764:../Generated_Code/SEGGER_RTT.c ****   unsigned              WrOff;
 765:../Generated_Code/SEGGER_RTT.c ****   unsigned              Rem;
 766:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 767:../Generated_Code/SEGGER_RTT.c ****   char*                 pDst;
 768:../Generated_Code/SEGGER_RTT.c **** #endif
 769:../Generated_Code/SEGGER_RTT.c **** 
 770:../Generated_Code/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 977              		.loc 1 770 0
 978 000c BB68     		ldr	r3, [r7, #8]
 979 000e 7B62     		str	r3, [r7, #36]
 771:../Generated_Code/SEGGER_RTT.c ****   //
 772:../Generated_Code/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 773:../Generated_Code/SEGGER_RTT.c ****   //
 774:../Generated_Code/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 980              		.loc 1 774 0
 981 0010 FB68     		ldr	r3, [r7, #12]
 982 0012 5A1C     		adds	r2, r3, #1
 983 0014 1346     		mov	r3, r2
 984 0016 5B00     		lsls	r3, r3, #1
 985 0018 1344     		add	r3, r3, r2
 986 001a DB00     		lsls	r3, r3, #3
 987 001c 404A     		ldr	r2, .L49
 988 001e 1344     		add	r3, r3, r2
 989 0020 3B62     		str	r3, [r7, #32]
 775:../Generated_Code/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 990              		.loc 1 775 0
 991 0022 3B6A     		ldr	r3, [r7, #32]
 992 0024 1B69     		ldr	r3, [r3, #16]
 993 0026 FB61     		str	r3, [r7, #28]
 776:../Generated_Code/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 994              		.loc 1 776 0
 995 0028 3B6A     		ldr	r3, [r7, #32]
 996 002a DB68     		ldr	r3, [r3, #12]
 997 002c BB61     		str	r3, [r7, #24]
 777:../Generated_Code/SEGGER_RTT.c ****   //
 778:../Generated_Code/SEGGER_RTT.c ****   // Handle the most common cases fastest.
 779:../Generated_Code/SEGGER_RTT.c ****   // Which is:
 780:../Generated_Code/SEGGER_RTT.c ****   //    RdOff <= WrOff -> Space until wrap around is free.
 781:../Generated_Code/SEGGER_RTT.c ****   //  AND
 782:../Generated_Code/SEGGER_RTT.c ****   //    WrOff + NumBytes < SizeOfBuffer -> No Wrap around necessary.
 783:../Generated_Code/SEGGER_RTT.c ****   //
 784:../Generated_Code/SEGGER_RTT.c ****   //  OR
 785:../Generated_Code/SEGGER_RTT.c ****   //
 786:../Generated_Code/SEGGER_RTT.c ****   //    RdOff > WrOff -> Space until RdOff - 1 is free.
 787:../Generated_Code/SEGGER_RTT.c ****   //  AND
 788:../Generated_Code/SEGGER_RTT.c ****   //    WrOff + NumBytes < RdOff -> Data fits into buffer
 789:../Generated_Code/SEGGER_RTT.c ****   //
 790:../Generated_Code/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 998              		.loc 1 790 0
 999 002e FA69     		ldr	r2, [r7, #28]
 1000 0030 BB69     		ldr	r3, [r7, #24]
 1001 0032 9A42     		cmp	r2, r3
 1002 0034 56D8     		bhi	.L43
 791:../Generated_Code/SEGGER_RTT.c ****     //
 792:../Generated_Code/SEGGER_RTT.c ****     // Get space until WrOff will be at wrap around.
 793:../Generated_Code/SEGGER_RTT.c ****     //
 794:../Generated_Code/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 1003              		.loc 1 794 0
 1004 0036 3B6A     		ldr	r3, [r7, #32]
 1005 0038 9A68     		ldr	r2, [r3, #8]
 1006 003a BB69     		ldr	r3, [r7, #24]
 1007 003c D31A     		subs	r3, r2, r3
 1008 003e 013B     		subs	r3, r3, #1
 1009 0040 7B61     		str	r3, [r7, #20]
 795:../Generated_Code/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1010              		.loc 1 795 0
 1011 0042 7A69     		ldr	r2, [r7, #20]
 1012 0044 7B68     		ldr	r3, [r7, #4]
 1013 0046 9A42     		cmp	r2, r3
 1014 0048 0FD3     		bcc	.L44
 796:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 797:../Generated_Code/SEGGER_RTT.c ****       pDst = pRing->pBuffer + WrOff;
 798:../Generated_Code/SEGGER_RTT.c ****       WrOff += NumBytes;
 799:../Generated_Code/SEGGER_RTT.c ****       while (NumBytes--) {
 800:../Generated_Code/SEGGER_RTT.c ****         *pDst++ = *pData++;
 801:../Generated_Code/SEGGER_RTT.c ****       };
 802:../Generated_Code/SEGGER_RTT.c ****       pRing->WrOff = WrOff;
 803:../Generated_Code/SEGGER_RTT.c **** #else
 804:../Generated_Code/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 1015              		.loc 1 804 0
 1016 004a 3B6A     		ldr	r3, [r7, #32]
 1017 004c 5A68     		ldr	r2, [r3, #4]
 1018 004e BB69     		ldr	r3, [r7, #24]
 1019 0050 1344     		add	r3, r3, r2
 1020 0052 1846     		mov	r0, r3
 1021 0054 796A     		ldr	r1, [r7, #36]
 1022 0056 7A68     		ldr	r2, [r7, #4]
 1023 0058 FFF7FEFF 		bl	memcpy
 805:../Generated_Code/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1024              		.loc 1 805 0
 1025 005c BA69     		ldr	r2, [r7, #24]
 1026 005e 7B68     		ldr	r3, [r7, #4]
 1027 0060 1A44     		add	r2, r2, r3
 1028 0062 3B6A     		ldr	r3, [r7, #32]
 1029 0064 DA60     		str	r2, [r3, #12]
 806:../Generated_Code/SEGGER_RTT.c **** #endif
 807:../Generated_Code/SEGGER_RTT.c ****       return 1;
 1030              		.loc 1 807 0
 1031 0066 0123     		movs	r3, #1
 1032 0068 56E0     		b	.L45
 1033              	.L44:
 808:../Generated_Code/SEGGER_RTT.c ****     }
 809:../Generated_Code/SEGGER_RTT.c ****     //
 810:../Generated_Code/SEGGER_RTT.c ****     // If data did not fit into space until wrap around calculate complete space in buffer.
 811:../Generated_Code/SEGGER_RTT.c ****     //
 812:../Generated_Code/SEGGER_RTT.c ****     Avail += RdOff;
 1034              		.loc 1 812 0
 1035 006a 7A69     		ldr	r2, [r7, #20]
 1036 006c FB69     		ldr	r3, [r7, #28]
 1037 006e 1344     		add	r3, r3, r2
 1038 0070 7B61     		str	r3, [r7, #20]
 813:../Generated_Code/SEGGER_RTT.c ****     //
 814:../Generated_Code/SEGGER_RTT.c ****     // If there is still no space for the whole of this output, don't bother.
 815:../Generated_Code/SEGGER_RTT.c ****     //
 816:../Generated_Code/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1039              		.loc 1 816 0
 1040 0072 7A69     		ldr	r2, [r7, #20]
 1041 0074 7B68     		ldr	r3, [r7, #4]
 1042 0076 9A42     		cmp	r2, r3
 1043 0078 4DD3     		bcc	.L46
 817:../Generated_Code/SEGGER_RTT.c ****       //
 818:../Generated_Code/SEGGER_RTT.c ****       //  OK, we have enough space in buffer. Copy in one or 2 chunks
 819:../Generated_Code/SEGGER_RTT.c ****       //
 820:../Generated_Code/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 1044              		.loc 1 820 0
 1045 007a 3B6A     		ldr	r3, [r7, #32]
 1046 007c 9A68     		ldr	r2, [r3, #8]
 1047 007e BB69     		ldr	r3, [r7, #24]
 1048 0080 D31A     		subs	r3, r2, r3
 1049 0082 3B61     		str	r3, [r7, #16]
 821:../Generated_Code/SEGGER_RTT.c ****       if (Rem > NumBytes) {
 1050              		.loc 1 821 0
 1051 0084 3A69     		ldr	r2, [r7, #16]
 1052 0086 7B68     		ldr	r3, [r7, #4]
 1053 0088 9A42     		cmp	r2, r3
 1054 008a 0ED9     		bls	.L47
 822:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 823:../Generated_Code/SEGGER_RTT.c ****         pDst = pRing->pBuffer + WrOff;
 824:../Generated_Code/SEGGER_RTT.c ****         WrOff += NumBytes;
 825:../Generated_Code/SEGGER_RTT.c ****         while (NumBytes--) {
 826:../Generated_Code/SEGGER_RTT.c ****           *pDst++ = *pData++;
 827:../Generated_Code/SEGGER_RTT.c ****         };
 828:../Generated_Code/SEGGER_RTT.c ****         pRing->WrOff = WrOff;
 829:../Generated_Code/SEGGER_RTT.c **** #else
 830:../Generated_Code/SEGGER_RTT.c ****         SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 1055              		.loc 1 830 0
 1056 008c 3B6A     		ldr	r3, [r7, #32]
 1057 008e 5A68     		ldr	r2, [r3, #4]
 1058 0090 BB69     		ldr	r3, [r7, #24]
 1059 0092 1344     		add	r3, r3, r2
 1060 0094 1846     		mov	r0, r3
 1061 0096 796A     		ldr	r1, [r7, #36]
 1062 0098 7A68     		ldr	r2, [r7, #4]
 1063 009a FFF7FEFF 		bl	memcpy
 831:../Generated_Code/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 1064              		.loc 1 831 0
 1065 009e BA69     		ldr	r2, [r7, #24]
 1066 00a0 7B68     		ldr	r3, [r7, #4]
 1067 00a2 1A44     		add	r2, r2, r3
 1068 00a4 3B6A     		ldr	r3, [r7, #32]
 1069 00a6 DA60     		str	r2, [r3, #12]
 1070 00a8 1AE0     		b	.L48
 1071              	.L47:
 832:../Generated_Code/SEGGER_RTT.c **** #endif
 833:../Generated_Code/SEGGER_RTT.c ****       } else {
 834:../Generated_Code/SEGGER_RTT.c ****         //
 835:../Generated_Code/SEGGER_RTT.c ****         // We reach the end of the buffer, so need to wrap around
 836:../Generated_Code/SEGGER_RTT.c ****         //
 837:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 838:../Generated_Code/SEGGER_RTT.c ****         pDst = pRing->pBuffer + WrOff;
 839:../Generated_Code/SEGGER_RTT.c ****         NumBytes -= Rem;
 840:../Generated_Code/SEGGER_RTT.c ****         WrOff = NumBytes;
 841:../Generated_Code/SEGGER_RTT.c ****         do {
 842:../Generated_Code/SEGGER_RTT.c ****           *pDst++ = *pData++;
 843:../Generated_Code/SEGGER_RTT.c ****         } while (--Rem);
 844:../Generated_Code/SEGGER_RTT.c ****         pDst = pRing->pBuffer;
 845:../Generated_Code/SEGGER_RTT.c ****         while (NumBytes--) {
 846:../Generated_Code/SEGGER_RTT.c ****           *pDst++ = *pData++;
 847:../Generated_Code/SEGGER_RTT.c ****         };
 848:../Generated_Code/SEGGER_RTT.c ****         pRing->WrOff = WrOff;
 849:../Generated_Code/SEGGER_RTT.c **** #else
 850:../Generated_Code/SEGGER_RTT.c ****         SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 1072              		.loc 1 850 0
 1073 00aa 3B6A     		ldr	r3, [r7, #32]
 1074 00ac 5A68     		ldr	r2, [r3, #4]
 1075 00ae BB69     		ldr	r3, [r7, #24]
 1076 00b0 1344     		add	r3, r3, r2
 1077 00b2 1846     		mov	r0, r3
 1078 00b4 796A     		ldr	r1, [r7, #36]
 1079 00b6 3A69     		ldr	r2, [r7, #16]
 1080 00b8 FFF7FEFF 		bl	memcpy
 851:../Generated_Code/SEGGER_RTT.c ****         SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 1081              		.loc 1 851 0
 1082 00bc 3B6A     		ldr	r3, [r7, #32]
 1083 00be 5968     		ldr	r1, [r3, #4]
 1084 00c0 7A6A     		ldr	r2, [r7, #36]
 1085 00c2 3B69     		ldr	r3, [r7, #16]
 1086 00c4 1A44     		add	r2, r2, r3
 1087 00c6 7868     		ldr	r0, [r7, #4]
 1088 00c8 3B69     		ldr	r3, [r7, #16]
 1089 00ca C31A     		subs	r3, r0, r3
 1090 00cc 0846     		mov	r0, r1
 1091 00ce 1146     		mov	r1, r2
 1092 00d0 1A46     		mov	r2, r3
 1093 00d2 FFF7FEFF 		bl	memcpy
 852:../Generated_Code/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 1094              		.loc 1 852 0
 1095 00d6 7A68     		ldr	r2, [r7, #4]
 1096 00d8 3B69     		ldr	r3, [r7, #16]
 1097 00da D21A     		subs	r2, r2, r3
 1098 00dc 3B6A     		ldr	r3, [r7, #32]
 1099 00de DA60     		str	r2, [r3, #12]
 1100              	.L48:
 853:../Generated_Code/SEGGER_RTT.c **** #endif
 854:../Generated_Code/SEGGER_RTT.c ****       }
 855:../Generated_Code/SEGGER_RTT.c ****       return 1;
 1101              		.loc 1 855 0
 1102 00e0 0123     		movs	r3, #1
 1103 00e2 19E0     		b	.L45
 1104              	.L43:
 856:../Generated_Code/SEGGER_RTT.c ****     }
 857:../Generated_Code/SEGGER_RTT.c ****   } else {
 858:../Generated_Code/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 1105              		.loc 1 858 0
 1106 00e4 FA69     		ldr	r2, [r7, #28]
 1107 00e6 BB69     		ldr	r3, [r7, #24]
 1108 00e8 D31A     		subs	r3, r2, r3
 1109 00ea 013B     		subs	r3, r3, #1
 1110 00ec 7B61     		str	r3, [r7, #20]
 859:../Generated_Code/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1111              		.loc 1 859 0
 1112 00ee 7A69     		ldr	r2, [r7, #20]
 1113 00f0 7B68     		ldr	r3, [r7, #4]
 1114 00f2 9A42     		cmp	r2, r3
 1115 00f4 0FD3     		bcc	.L46
 860:../Generated_Code/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 861:../Generated_Code/SEGGER_RTT.c ****       pDst = pRing->pBuffer + WrOff;
 862:../Generated_Code/SEGGER_RTT.c ****       WrOff += NumBytes;
 863:../Generated_Code/SEGGER_RTT.c ****       while (NumBytes--) {
 864:../Generated_Code/SEGGER_RTT.c ****         *pDst++ = *pData++;
 865:../Generated_Code/SEGGER_RTT.c ****       };
 866:../Generated_Code/SEGGER_RTT.c ****       pRing->WrOff = WrOff;
 867:../Generated_Code/SEGGER_RTT.c **** #else
 868:../Generated_Code/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 1116              		.loc 1 868 0
 1117 00f6 3B6A     		ldr	r3, [r7, #32]
 1118 00f8 5A68     		ldr	r2, [r3, #4]
 1119 00fa BB69     		ldr	r3, [r7, #24]
 1120 00fc 1344     		add	r3, r3, r2
 1121 00fe 1846     		mov	r0, r3
 1122 0100 796A     		ldr	r1, [r7, #36]
 1123 0102 7A68     		ldr	r2, [r7, #4]
 1124 0104 FFF7FEFF 		bl	memcpy
 869:../Generated_Code/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1125              		.loc 1 869 0
 1126 0108 BA69     		ldr	r2, [r7, #24]
 1127 010a 7B68     		ldr	r3, [r7, #4]
 1128 010c 1A44     		add	r2, r2, r3
 1129 010e 3B6A     		ldr	r3, [r7, #32]
 1130 0110 DA60     		str	r2, [r3, #12]
 870:../Generated_Code/SEGGER_RTT.c **** #endif
 871:../Generated_Code/SEGGER_RTT.c ****       return 1;
 1131              		.loc 1 871 0
 1132 0112 0123     		movs	r3, #1
 1133 0114 00E0     		b	.L45
 1134              	.L46:
 872:../Generated_Code/SEGGER_RTT.c ****     }
 873:../Generated_Code/SEGGER_RTT.c ****   }
 874:../Generated_Code/SEGGER_RTT.c ****   //
 875:../Generated_Code/SEGGER_RTT.c ****   // If we reach this point no data has been written
 876:../Generated_Code/SEGGER_RTT.c ****   //
 877:../Generated_Code/SEGGER_RTT.c ****   return 0;
 1135              		.loc 1 877 0
 1136 0116 0023     		movs	r3, #0
 1137              	.L45:
 878:../Generated_Code/SEGGER_RTT.c **** }
 1138              		.loc 1 878 0
 1139 0118 1846     		mov	r0, r3
 1140 011a 2837     		adds	r7, r7, #40
 1141 011c BD46     		mov	sp, r7
 1142              		@ sp needed
 1143 011e 80BD     		pop	{r7, pc}
 1144              	.L50:
 1145              		.align	2
 1146              	.L49:
 1147 0120 00000000 		.word	_SEGGER_RTT
 1148              		.cfi_endproc
 1149              	.LFE8:
 1151              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1152              		.align	2
 1153              		.global	SEGGER_RTT_WriteNoLock
 1154              		.thumb
 1155              		.thumb_func
 1157              	SEGGER_RTT_WriteNoLock:
 1158              	.LFB9:
 879:../Generated_Code/SEGGER_RTT.c **** 
 880:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 881:../Generated_Code/SEGGER_RTT.c **** *
 882:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
 883:../Generated_Code/SEGGER_RTT.c **** *
 884:../Generated_Code/SEGGER_RTT.c **** *  Function description
 885:../Generated_Code/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 886:../Generated_Code/SEGGER_RTT.c **** *    control block which is then read by the host.
 887:../Generated_Code/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
 888:../Generated_Code/SEGGER_RTT.c **** *
 889:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 890:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 891:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 892:../Generated_Code/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 893:../Generated_Code/SEGGER_RTT.c **** *
 894:../Generated_Code/SEGGER_RTT.c **** *  Return value
 895:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 896:../Generated_Code/SEGGER_RTT.c **** *
 897:../Generated_Code/SEGGER_RTT.c **** *  Notes
 898:../Generated_Code/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 899:../Generated_Code/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 900:../Generated_Code/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 901:../Generated_Code/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 902:../Generated_Code/SEGGER_RTT.c **** */
 903:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1159              		.loc 1 903 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 32
 1162              		@ frame_needed = 1, uses_anonymous_args = 0
 1163 0000 80B5     		push	{r7, lr}
 1164              		.cfi_def_cfa_offset 8
 1165              		.cfi_offset 7, -8
 1166              		.cfi_offset 14, -4
 1167 0002 88B0     		sub	sp, sp, #32
 1168              		.cfi_def_cfa_offset 40
 1169 0004 00AF     		add	r7, sp, #0
 1170              		.cfi_def_cfa_register 7
 1171 0006 F860     		str	r0, [r7, #12]
 1172 0008 B960     		str	r1, [r7, #8]
 1173 000a 7A60     		str	r2, [r7, #4]
 904:../Generated_Code/SEGGER_RTT.c ****   unsigned              Status;
 905:../Generated_Code/SEGGER_RTT.c ****   unsigned              Avail;
 906:../Generated_Code/SEGGER_RTT.c ****   const char*           pData;
 907:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 908:../Generated_Code/SEGGER_RTT.c **** 
 909:../Generated_Code/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1174              		.loc 1 909 0
 1175 000c BB68     		ldr	r3, [r7, #8]
 1176 000e BB61     		str	r3, [r7, #24]
 910:../Generated_Code/SEGGER_RTT.c ****   //
 911:../Generated_Code/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
 912:../Generated_Code/SEGGER_RTT.c ****   //
 913:../Generated_Code/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1177              		.loc 1 913 0
 1178 0010 FB68     		ldr	r3, [r7, #12]
 1179 0012 5A1C     		adds	r2, r3, #1
 1180 0014 1346     		mov	r3, r2
 1181 0016 5B00     		lsls	r3, r3, #1
 1182 0018 1344     		add	r3, r3, r2
 1183 001a DB00     		lsls	r3, r3, #3
 1184 001c 1E4A     		ldr	r2, .L61
 1185 001e 1344     		add	r3, r3, r2
 1186 0020 7B61     		str	r3, [r7, #20]
 914:../Generated_Code/SEGGER_RTT.c ****   //
 915:../Generated_Code/SEGGER_RTT.c ****   // How we output depends upon the mode...
 916:../Generated_Code/SEGGER_RTT.c ****   //
 917:../Generated_Code/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1187              		.loc 1 917 0
 1188 0022 7B69     		ldr	r3, [r7, #20]
 1189 0024 5B69     		ldr	r3, [r3, #20]
 1190 0026 012B     		cmp	r3, #1
 1191 0028 17D0     		beq	.L53
 1192 002a 012B     		cmp	r3, #1
 1193 002c 02D3     		bcc	.L54
 1194 002e 022B     		cmp	r3, #2
 1195 0030 23D0     		beq	.L55
 1196 0032 29E0     		b	.L60
 1197              	.L54:
 918:../Generated_Code/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 919:../Generated_Code/SEGGER_RTT.c ****     //
 920:../Generated_Code/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
 921:../Generated_Code/SEGGER_RTT.c ****     // of this output, don't bother.
 922:../Generated_Code/SEGGER_RTT.c ****     //
 923:../Generated_Code/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1198              		.loc 1 923 0
 1199 0034 7869     		ldr	r0, [r7, #20]
 1200 0036 FFF7FEFF 		bl	_GetAvailWriteSpace
 1201 003a 3861     		str	r0, [r7, #16]
 924:../Generated_Code/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1202              		.loc 1 924 0
 1203 003c 3A69     		ldr	r2, [r7, #16]
 1204 003e 7B68     		ldr	r3, [r7, #4]
 1205 0040 9A42     		cmp	r2, r3
 1206 0042 02D2     		bcs	.L56
 925:../Generated_Code/SEGGER_RTT.c ****       Status = 0u;
 1207              		.loc 1 925 0
 1208 0044 0023     		movs	r3, #0
 1209 0046 FB61     		str	r3, [r7, #28]
 926:../Generated_Code/SEGGER_RTT.c ****     } else {
 927:../Generated_Code/SEGGER_RTT.c ****       Status = NumBytes;
 928:../Generated_Code/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 929:../Generated_Code/SEGGER_RTT.c ****     }
 930:../Generated_Code/SEGGER_RTT.c ****     break;
 1210              		.loc 1 930 0
 1211 0048 21E0     		b	.L58
 1212              	.L56:
 927:../Generated_Code/SEGGER_RTT.c ****       Status = NumBytes;
 1213              		.loc 1 927 0
 1214 004a 7B68     		ldr	r3, [r7, #4]
 1215 004c FB61     		str	r3, [r7, #28]
 928:../Generated_Code/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1216              		.loc 1 928 0
 1217 004e 7869     		ldr	r0, [r7, #20]
 1218 0050 B969     		ldr	r1, [r7, #24]
 1219 0052 7A68     		ldr	r2, [r7, #4]
 1220 0054 FFF7FEFF 		bl	_WriteNoCheck
 1221              		.loc 1 930 0
 1222 0058 19E0     		b	.L58
 1223              	.L53:
 931:../Generated_Code/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
 932:../Generated_Code/SEGGER_RTT.c ****     //
 933:../Generated_Code/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
 934:../Generated_Code/SEGGER_RTT.c ****     //
 935:../Generated_Code/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1224              		.loc 1 935 0
 1225 005a 7869     		ldr	r0, [r7, #20]
 1226 005c FFF7FEFF 		bl	_GetAvailWriteSpace
 1227 0060 3861     		str	r0, [r7, #16]
 936:../Generated_Code/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1228              		.loc 1 936 0
 1229 0062 7A68     		ldr	r2, [r7, #4]
 1230 0064 3B69     		ldr	r3, [r7, #16]
 1231 0066 9A42     		cmp	r2, r3
 1232 0068 38BF     		it	cc
 1233 006a 1346     		movcc	r3, r2
 1234 006c FB61     		str	r3, [r7, #28]
 937:../Generated_Code/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1235              		.loc 1 937 0
 1236 006e 7869     		ldr	r0, [r7, #20]
 1237 0070 B969     		ldr	r1, [r7, #24]
 1238 0072 FA69     		ldr	r2, [r7, #28]
 1239 0074 FFF7FEFF 		bl	_WriteNoCheck
 938:../Generated_Code/SEGGER_RTT.c ****     break;
 1240              		.loc 1 938 0
 1241 0078 09E0     		b	.L58
 1242              	.L55:
 939:../Generated_Code/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 940:../Generated_Code/SEGGER_RTT.c ****     //
 941:../Generated_Code/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
 942:../Generated_Code/SEGGER_RTT.c ****     //
 943:../Generated_Code/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 1243              		.loc 1 943 0
 1244 007a 7869     		ldr	r0, [r7, #20]
 1245 007c B969     		ldr	r1, [r7, #24]
 1246 007e 7A68     		ldr	r2, [r7, #4]
 1247 0080 FFF7FEFF 		bl	_WriteBlocking
 1248 0084 F861     		str	r0, [r7, #28]
 944:../Generated_Code/SEGGER_RTT.c ****     break;
 1249              		.loc 1 944 0
 1250 0086 02E0     		b	.L58
 1251              	.L60:
 945:../Generated_Code/SEGGER_RTT.c ****   default:
 946:../Generated_Code/SEGGER_RTT.c ****     Status = 0u;
 1252              		.loc 1 946 0
 1253 0088 0023     		movs	r3, #0
 1254 008a FB61     		str	r3, [r7, #28]
 947:../Generated_Code/SEGGER_RTT.c ****     break;
 1255              		.loc 1 947 0
 1256 008c 00BF     		nop
 1257              	.L58:
 948:../Generated_Code/SEGGER_RTT.c ****   }
 949:../Generated_Code/SEGGER_RTT.c ****   //
 950:../Generated_Code/SEGGER_RTT.c ****   // Finish up.
 951:../Generated_Code/SEGGER_RTT.c ****   //
 952:../Generated_Code/SEGGER_RTT.c ****   return Status;
 1258              		.loc 1 952 0
 1259 008e FB69     		ldr	r3, [r7, #28]
 953:../Generated_Code/SEGGER_RTT.c **** }
 1260              		.loc 1 953 0
 1261 0090 1846     		mov	r0, r3
 1262 0092 2037     		adds	r7, r7, #32
 1263 0094 BD46     		mov	sp, r7
 1264              		@ sp needed
 1265 0096 80BD     		pop	{r7, pc}
 1266              	.L62:
 1267              		.align	2
 1268              	.L61:
 1269 0098 00000000 		.word	_SEGGER_RTT
 1270              		.cfi_endproc
 1271              	.LFE9:
 1273              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1274              		.align	2
 1275              		.global	SEGGER_RTT_Write
 1276              		.thumb
 1277              		.thumb_func
 1279              	SEGGER_RTT_Write:
 1280              	.LFB10:
 954:../Generated_Code/SEGGER_RTT.c **** 
 955:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 956:../Generated_Code/SEGGER_RTT.c **** *
 957:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_Write
 958:../Generated_Code/SEGGER_RTT.c **** *
 959:../Generated_Code/SEGGER_RTT.c **** *  Function description
 960:../Generated_Code/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 961:../Generated_Code/SEGGER_RTT.c **** *    control block which is then read by the host.
 962:../Generated_Code/SEGGER_RTT.c **** *
 963:../Generated_Code/SEGGER_RTT.c **** *  Parameters
 964:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 965:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 966:../Generated_Code/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 967:../Generated_Code/SEGGER_RTT.c **** *
 968:../Generated_Code/SEGGER_RTT.c **** *  Return value
 969:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 970:../Generated_Code/SEGGER_RTT.c **** *
 971:../Generated_Code/SEGGER_RTT.c **** *  Notes
 972:../Generated_Code/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 973:../Generated_Code/SEGGER_RTT.c **** */
 974:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1281              		.loc 1 974 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 24
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285 0000 80B5     		push	{r7, lr}
 1286              		.cfi_def_cfa_offset 8
 1287              		.cfi_offset 7, -8
 1288              		.cfi_offset 14, -4
 1289 0002 86B0     		sub	sp, sp, #24
 1290              		.cfi_def_cfa_offset 32
 1291 0004 00AF     		add	r7, sp, #0
 1292              		.cfi_def_cfa_register 7
 1293 0006 F860     		str	r0, [r7, #12]
 1294 0008 B960     		str	r1, [r7, #8]
 1295 000a 7A60     		str	r2, [r7, #4]
 975:../Generated_Code/SEGGER_RTT.c ****   unsigned Status;
 976:../Generated_Code/SEGGER_RTT.c ****   //
 977:../Generated_Code/SEGGER_RTT.c ****   INIT();
 1296              		.loc 1 977 0
 1297 000c 0D4B     		ldr	r3, .L66
 1298 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1299 0010 002B     		cmp	r3, #0
 1300 0012 01D1     		bne	.L64
 1301              		.loc 1 977 0 is_stmt 0 discriminator 1
 1302 0014 FFF7FEFF 		bl	_DoInit
 1303              	.L64:
 1304              	.LBB3:
 978:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1305              		.loc 1 978 0 is_stmt 1
 1306              	@ 978 "../Generated_Code/SEGGER_RTT.c" 1
 1307 0018 EFF31183 		mrs   r3, basepri  
 1308 001c 4FF03001 		mov   r1, #48     
 1309 0020 81F31188 		msr   basepri, r1  
 1310              		
 1311              	@ 0 "" 2
 1312              		.thumb
 1313 0024 7B61     		str	r3, [r7, #20]
 979:../Generated_Code/SEGGER_RTT.c ****   //
 980:../Generated_Code/SEGGER_RTT.c ****   // Call the non-locking write function
 981:../Generated_Code/SEGGER_RTT.c ****   //
 982:../Generated_Code/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 1314              		.loc 1 982 0
 1315 0026 F868     		ldr	r0, [r7, #12]
 1316 0028 B968     		ldr	r1, [r7, #8]
 1317 002a 7A68     		ldr	r2, [r7, #4]
 1318 002c FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1319 0030 3861     		str	r0, [r7, #16]
 983:../Generated_Code/SEGGER_RTT.c ****   //
 984:../Generated_Code/SEGGER_RTT.c ****   // Finish up.
 985:../Generated_Code/SEGGER_RTT.c ****   //
 986:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1320              		.loc 1 986 0
 1321 0032 7B69     		ldr	r3, [r7, #20]
 1322              	@ 986 "../Generated_Code/SEGGER_RTT.c" 1
 1323 0034 83F31188 		msr   basepri, r3  
 1324              		
 1325              	@ 0 "" 2
 1326              		.thumb
 1327              	.LBE3:
 987:../Generated_Code/SEGGER_RTT.c ****   //
 988:../Generated_Code/SEGGER_RTT.c ****   return Status;
 1328              		.loc 1 988 0
 1329 0038 3B69     		ldr	r3, [r7, #16]
 989:../Generated_Code/SEGGER_RTT.c **** }
 1330              		.loc 1 989 0
 1331 003a 1846     		mov	r0, r3
 1332 003c 1837     		adds	r7, r7, #24
 1333 003e BD46     		mov	sp, r7
 1334              		@ sp needed
 1335 0040 80BD     		pop	{r7, pc}
 1336              	.L67:
 1337 0042 00BF     		.align	2
 1338              	.L66:
 1339 0044 00000000 		.word	_SEGGER_RTT
 1340              		.cfi_endproc
 1341              	.LFE10:
 1343              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1344              		.align	2
 1345              		.global	SEGGER_RTT_WriteString
 1346              		.thumb
 1347              		.thumb_func
 1349              	SEGGER_RTT_WriteString:
 1350              	.LFB11:
 990:../Generated_Code/SEGGER_RTT.c **** 
 991:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
 992:../Generated_Code/SEGGER_RTT.c **** *
 993:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
 994:../Generated_Code/SEGGER_RTT.c **** *
 995:../Generated_Code/SEGGER_RTT.c **** *  Function description
 996:../Generated_Code/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
 997:../Generated_Code/SEGGER_RTT.c **** *    This data is read by the host.
 998:../Generated_Code/SEGGER_RTT.c **** *
 999:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1000:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1001:../Generated_Code/SEGGER_RTT.c **** *    s            Pointer to string.
1002:../Generated_Code/SEGGER_RTT.c **** *
1003:../Generated_Code/SEGGER_RTT.c **** *  Return value
1004:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1005:../Generated_Code/SEGGER_RTT.c **** *
1006:../Generated_Code/SEGGER_RTT.c **** *  Notes
1007:../Generated_Code/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1008:../Generated_Code/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1009:../Generated_Code/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1010:../Generated_Code/SEGGER_RTT.c **** */
1011:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1351              		.loc 1 1011 0
 1352              		.cfi_startproc
 1353              		@ args = 0, pretend = 0, frame = 16
 1354              		@ frame_needed = 1, uses_anonymous_args = 0
 1355 0000 80B5     		push	{r7, lr}
 1356              		.cfi_def_cfa_offset 8
 1357              		.cfi_offset 7, -8
 1358              		.cfi_offset 14, -4
 1359 0002 84B0     		sub	sp, sp, #16
 1360              		.cfi_def_cfa_offset 24
 1361 0004 00AF     		add	r7, sp, #0
 1362              		.cfi_def_cfa_register 7
 1363 0006 7860     		str	r0, [r7, #4]
 1364 0008 3960     		str	r1, [r7]
1012:../Generated_Code/SEGGER_RTT.c ****   unsigned Len;
1013:../Generated_Code/SEGGER_RTT.c **** 
1014:../Generated_Code/SEGGER_RTT.c ****   Len = STRLEN(s);
 1365              		.loc 1 1014 0
 1366 000a 3868     		ldr	r0, [r7]
 1367 000c FFF7FEFF 		bl	strlen
 1368 0010 F860     		str	r0, [r7, #12]
1015:../Generated_Code/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1369              		.loc 1 1015 0
 1370 0012 7868     		ldr	r0, [r7, #4]
 1371 0014 3968     		ldr	r1, [r7]
 1372 0016 FA68     		ldr	r2, [r7, #12]
 1373 0018 FFF7FEFF 		bl	SEGGER_RTT_Write
 1374 001c 0346     		mov	r3, r0
1016:../Generated_Code/SEGGER_RTT.c **** }
 1375              		.loc 1 1016 0
 1376 001e 1846     		mov	r0, r3
 1377 0020 1037     		adds	r7, r7, #16
 1378 0022 BD46     		mov	sp, r7
 1379              		@ sp needed
 1380 0024 80BD     		pop	{r7, pc}
 1381              		.cfi_endproc
 1382              	.LFE11:
 1384 0026 00BF     		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1385              		.align	2
 1386              		.global	SEGGER_RTT_PutCharSkipNoLock
 1387              		.thumb
 1388              		.thumb_func
 1390              	SEGGER_RTT_PutCharSkipNoLock:
 1391              	.LFB12:
1017:../Generated_Code/SEGGER_RTT.c **** 
1018:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1019:../Generated_Code/SEGGER_RTT.c **** *
1020:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1021:../Generated_Code/SEGGER_RTT.c **** *
1022:../Generated_Code/SEGGER_RTT.c **** *  Function description
1023:../Generated_Code/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1024:../Generated_Code/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1025:../Generated_Code/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1026:../Generated_Code/SEGGER_RTT.c **** *
1027:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1028:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1029:../Generated_Code/SEGGER_RTT.c **** *    c            Byte to be stored.
1030:../Generated_Code/SEGGER_RTT.c **** *
1031:../Generated_Code/SEGGER_RTT.c **** *  Return value
1032:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1033:../Generated_Code/SEGGER_RTT.c **** *
1034:../Generated_Code/SEGGER_RTT.c **** *  Notes
1035:../Generated_Code/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1036:../Generated_Code/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1037:../Generated_Code/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1038:../Generated_Code/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1039:../Generated_Code/SEGGER_RTT.c **** */
1040:../Generated_Code/SEGGER_RTT.c **** 
1041:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1392              		.loc 1 1041 0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 24
 1395              		@ frame_needed = 1, uses_anonymous_args = 0
 1396              		@ link register save eliminated.
 1397 0000 80B4     		push	{r7}
 1398              		.cfi_def_cfa_offset 4
 1399              		.cfi_offset 7, -4
 1400 0002 87B0     		sub	sp, sp, #28
 1401              		.cfi_def_cfa_offset 32
 1402 0004 00AF     		add	r7, sp, #0
 1403              		.cfi_def_cfa_register 7
 1404 0006 7860     		str	r0, [r7, #4]
 1405 0008 0B46     		mov	r3, r1
 1406 000a FB70     		strb	r3, [r7, #3]
1042:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1043:../Generated_Code/SEGGER_RTT.c ****   unsigned              WrOff;
1044:../Generated_Code/SEGGER_RTT.c ****   unsigned              Status;
1045:../Generated_Code/SEGGER_RTT.c ****   //
1046:../Generated_Code/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1047:../Generated_Code/SEGGER_RTT.c ****   //
1048:../Generated_Code/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1407              		.loc 1 1048 0
 1408 000c 7B68     		ldr	r3, [r7, #4]
 1409 000e 5A1C     		adds	r2, r3, #1
 1410 0010 1346     		mov	r3, r2
 1411 0012 5B00     		lsls	r3, r3, #1
 1412 0014 1344     		add	r3, r3, r2
 1413 0016 DB00     		lsls	r3, r3, #3
 1414 0018 144A     		ldr	r2, .L75
 1415 001a 1344     		add	r3, r3, r2
 1416 001c FB60     		str	r3, [r7, #12]
1049:../Generated_Code/SEGGER_RTT.c ****   //
1050:../Generated_Code/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1051:../Generated_Code/SEGGER_RTT.c ****   //
1052:../Generated_Code/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1417              		.loc 1 1052 0
 1418 001e FB68     		ldr	r3, [r7, #12]
 1419 0020 DB68     		ldr	r3, [r3, #12]
 1420 0022 0133     		adds	r3, r3, #1
 1421 0024 7B61     		str	r3, [r7, #20]
1053:../Generated_Code/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1422              		.loc 1 1053 0
 1423 0026 FB68     		ldr	r3, [r7, #12]
 1424 0028 9A68     		ldr	r2, [r3, #8]
 1425 002a 7B69     		ldr	r3, [r7, #20]
 1426 002c 9A42     		cmp	r2, r3
 1427 002e 01D1     		bne	.L71
1054:../Generated_Code/SEGGER_RTT.c ****     WrOff = 0;
 1428              		.loc 1 1054 0
 1429 0030 0023     		movs	r3, #0
 1430 0032 7B61     		str	r3, [r7, #20]
 1431              	.L71:
1055:../Generated_Code/SEGGER_RTT.c ****   }
1056:../Generated_Code/SEGGER_RTT.c ****   //
1057:../Generated_Code/SEGGER_RTT.c ****   // Output byte if free space is available
1058:../Generated_Code/SEGGER_RTT.c ****   //
1059:../Generated_Code/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1432              		.loc 1 1059 0
 1433 0034 FB68     		ldr	r3, [r7, #12]
 1434 0036 1A69     		ldr	r2, [r3, #16]
 1435 0038 7B69     		ldr	r3, [r7, #20]
 1436 003a 9A42     		cmp	r2, r3
 1437 003c 0CD0     		beq	.L72
1060:../Generated_Code/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1438              		.loc 1 1060 0
 1439 003e FB68     		ldr	r3, [r7, #12]
 1440 0040 5A68     		ldr	r2, [r3, #4]
 1441 0042 FB68     		ldr	r3, [r7, #12]
 1442 0044 DB68     		ldr	r3, [r3, #12]
 1443 0046 1344     		add	r3, r3, r2
 1444 0048 FA78     		ldrb	r2, [r7, #3]
 1445 004a 1A70     		strb	r2, [r3]
1061:../Generated_Code/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1446              		.loc 1 1061 0
 1447 004c FB68     		ldr	r3, [r7, #12]
 1448 004e 7A69     		ldr	r2, [r7, #20]
 1449 0050 DA60     		str	r2, [r3, #12]
1062:../Generated_Code/SEGGER_RTT.c ****     Status = 1;
 1450              		.loc 1 1062 0
 1451 0052 0123     		movs	r3, #1
 1452 0054 3B61     		str	r3, [r7, #16]
 1453 0056 01E0     		b	.L73
 1454              	.L72:
1063:../Generated_Code/SEGGER_RTT.c ****   } else {
1064:../Generated_Code/SEGGER_RTT.c ****     Status = 0;
 1455              		.loc 1 1064 0
 1456 0058 0023     		movs	r3, #0
 1457 005a 3B61     		str	r3, [r7, #16]
 1458              	.L73:
1065:../Generated_Code/SEGGER_RTT.c ****   }
1066:../Generated_Code/SEGGER_RTT.c ****   //
1067:../Generated_Code/SEGGER_RTT.c ****   return Status;
 1459              		.loc 1 1067 0
 1460 005c 3B69     		ldr	r3, [r7, #16]
1068:../Generated_Code/SEGGER_RTT.c **** }
 1461              		.loc 1 1068 0
 1462 005e 1846     		mov	r0, r3
 1463 0060 1C37     		adds	r7, r7, #28
 1464 0062 BD46     		mov	sp, r7
 1465              		@ sp needed
 1466 0064 5DF8047B 		ldr	r7, [sp], #4
 1467 0068 7047     		bx	lr
 1468              	.L76:
 1469 006a 00BF     		.align	2
 1470              	.L75:
 1471 006c 00000000 		.word	_SEGGER_RTT
 1472              		.cfi_endproc
 1473              	.LFE12:
 1475              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1476              		.align	2
 1477              		.global	SEGGER_RTT_PutCharSkip
 1478              		.thumb
 1479              		.thumb_func
 1481              	SEGGER_RTT_PutCharSkip:
 1482              	.LFB13:
1069:../Generated_Code/SEGGER_RTT.c **** 
1070:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1071:../Generated_Code/SEGGER_RTT.c **** *
1072:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1073:../Generated_Code/SEGGER_RTT.c **** *
1074:../Generated_Code/SEGGER_RTT.c **** *  Function description
1075:../Generated_Code/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1076:../Generated_Code/SEGGER_RTT.c **** *
1077:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1078:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1079:../Generated_Code/SEGGER_RTT.c **** *    c            Byte to be stored.
1080:../Generated_Code/SEGGER_RTT.c **** *
1081:../Generated_Code/SEGGER_RTT.c **** *  Return value
1082:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1083:../Generated_Code/SEGGER_RTT.c **** *
1084:../Generated_Code/SEGGER_RTT.c **** *  Notes
1085:../Generated_Code/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1086:../Generated_Code/SEGGER_RTT.c **** */
1087:../Generated_Code/SEGGER_RTT.c **** 
1088:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1483              		.loc 1 1088 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 24
 1486              		@ frame_needed = 1, uses_anonymous_args = 0
 1487 0000 80B5     		push	{r7, lr}
 1488              		.cfi_def_cfa_offset 8
 1489              		.cfi_offset 7, -8
 1490              		.cfi_offset 14, -4
 1491 0002 86B0     		sub	sp, sp, #24
 1492              		.cfi_def_cfa_offset 32
 1493 0004 00AF     		add	r7, sp, #0
 1494              		.cfi_def_cfa_register 7
 1495 0006 7860     		str	r0, [r7, #4]
 1496 0008 0B46     		mov	r3, r1
 1497 000a FB70     		strb	r3, [r7, #3]
1089:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1090:../Generated_Code/SEGGER_RTT.c ****   unsigned              WrOff;
1091:../Generated_Code/SEGGER_RTT.c ****   unsigned              Status;
1092:../Generated_Code/SEGGER_RTT.c ****   //
1093:../Generated_Code/SEGGER_RTT.c ****   // Prepare
1094:../Generated_Code/SEGGER_RTT.c ****   //
1095:../Generated_Code/SEGGER_RTT.c ****   INIT();
 1498              		.loc 1 1095 0
 1499 000c 1E4B     		ldr	r3, .L83
 1500 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1501 0010 002B     		cmp	r3, #0
 1502 0012 01D1     		bne	.L78
 1503              		.loc 1 1095 0 is_stmt 0 discriminator 1
 1504 0014 FFF7FEFF 		bl	_DoInit
 1505              	.L78:
 1506              	.LBB4:
1096:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1507              		.loc 1 1096 0 is_stmt 1
 1508              	@ 1096 "../Generated_Code/SEGGER_RTT.c" 1
 1509 0018 EFF31183 		mrs   r3, basepri  
 1510 001c 4FF03001 		mov   r1, #48     
 1511 0020 81F31188 		msr   basepri, r1  
 1512              		
 1513              	@ 0 "" 2
 1514              		.thumb
 1515 0024 FB60     		str	r3, [r7, #12]
1097:../Generated_Code/SEGGER_RTT.c ****   //
1098:../Generated_Code/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1099:../Generated_Code/SEGGER_RTT.c ****   //
1100:../Generated_Code/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1516              		.loc 1 1100 0
 1517 0026 7B68     		ldr	r3, [r7, #4]
 1518 0028 5A1C     		adds	r2, r3, #1
 1519 002a 1346     		mov	r3, r2
 1520 002c 5B00     		lsls	r3, r3, #1
 1521 002e 1344     		add	r3, r3, r2
 1522 0030 DB00     		lsls	r3, r3, #3
 1523 0032 154A     		ldr	r2, .L83
 1524 0034 1344     		add	r3, r3, r2
 1525 0036 BB60     		str	r3, [r7, #8]
1101:../Generated_Code/SEGGER_RTT.c ****   //
1102:../Generated_Code/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1103:../Generated_Code/SEGGER_RTT.c ****   //
1104:../Generated_Code/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1526              		.loc 1 1104 0
 1527 0038 BB68     		ldr	r3, [r7, #8]
 1528 003a DB68     		ldr	r3, [r3, #12]
 1529 003c 0133     		adds	r3, r3, #1
 1530 003e 7B61     		str	r3, [r7, #20]
1105:../Generated_Code/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1531              		.loc 1 1105 0
 1532 0040 BB68     		ldr	r3, [r7, #8]
 1533 0042 9A68     		ldr	r2, [r3, #8]
 1534 0044 7B69     		ldr	r3, [r7, #20]
 1535 0046 9A42     		cmp	r2, r3
 1536 0048 01D1     		bne	.L79
1106:../Generated_Code/SEGGER_RTT.c ****     WrOff = 0;
 1537              		.loc 1 1106 0
 1538 004a 0023     		movs	r3, #0
 1539 004c 7B61     		str	r3, [r7, #20]
 1540              	.L79:
1107:../Generated_Code/SEGGER_RTT.c ****   }
1108:../Generated_Code/SEGGER_RTT.c ****   //
1109:../Generated_Code/SEGGER_RTT.c ****   // Output byte if free space is available
1110:../Generated_Code/SEGGER_RTT.c ****   //
1111:../Generated_Code/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1541              		.loc 1 1111 0
 1542 004e BB68     		ldr	r3, [r7, #8]
 1543 0050 1A69     		ldr	r2, [r3, #16]
 1544 0052 7B69     		ldr	r3, [r7, #20]
 1545 0054 9A42     		cmp	r2, r3
 1546 0056 0CD0     		beq	.L80
1112:../Generated_Code/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1547              		.loc 1 1112 0
 1548 0058 BB68     		ldr	r3, [r7, #8]
 1549 005a 5A68     		ldr	r2, [r3, #4]
 1550 005c BB68     		ldr	r3, [r7, #8]
 1551 005e DB68     		ldr	r3, [r3, #12]
 1552 0060 1344     		add	r3, r3, r2
 1553 0062 FA78     		ldrb	r2, [r7, #3]
 1554 0064 1A70     		strb	r2, [r3]
1113:../Generated_Code/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1555              		.loc 1 1113 0
 1556 0066 BB68     		ldr	r3, [r7, #8]
 1557 0068 7A69     		ldr	r2, [r7, #20]
 1558 006a DA60     		str	r2, [r3, #12]
1114:../Generated_Code/SEGGER_RTT.c ****     Status = 1;
 1559              		.loc 1 1114 0
 1560 006c 0123     		movs	r3, #1
 1561 006e 3B61     		str	r3, [r7, #16]
 1562 0070 01E0     		b	.L81
 1563              	.L80:
1115:../Generated_Code/SEGGER_RTT.c ****   } else {
1116:../Generated_Code/SEGGER_RTT.c ****     Status = 0;
 1564              		.loc 1 1116 0
 1565 0072 0023     		movs	r3, #0
 1566 0074 3B61     		str	r3, [r7, #16]
 1567              	.L81:
1117:../Generated_Code/SEGGER_RTT.c ****   }
1118:../Generated_Code/SEGGER_RTT.c ****   //
1119:../Generated_Code/SEGGER_RTT.c ****   // Finish up.
1120:../Generated_Code/SEGGER_RTT.c ****   //
1121:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1568              		.loc 1 1121 0
 1569 0076 FB68     		ldr	r3, [r7, #12]
 1570              	@ 1121 "../Generated_Code/SEGGER_RTT.c" 1
 1571 0078 83F31188 		msr   basepri, r3  
 1572              		
 1573              	@ 0 "" 2
 1574              		.thumb
 1575              	.LBE4:
1122:../Generated_Code/SEGGER_RTT.c ****   //
1123:../Generated_Code/SEGGER_RTT.c ****   return Status;
 1576              		.loc 1 1123 0
 1577 007c 3B69     		ldr	r3, [r7, #16]
1124:../Generated_Code/SEGGER_RTT.c **** }
 1578              		.loc 1 1124 0
 1579 007e 1846     		mov	r0, r3
 1580 0080 1837     		adds	r7, r7, #24
 1581 0082 BD46     		mov	sp, r7
 1582              		@ sp needed
 1583 0084 80BD     		pop	{r7, pc}
 1584              	.L84:
 1585 0086 00BF     		.align	2
 1586              	.L83:
 1587 0088 00000000 		.word	_SEGGER_RTT
 1588              		.cfi_endproc
 1589              	.LFE13:
 1591              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 1592              		.align	2
 1593              		.global	SEGGER_RTT_PutChar
 1594              		.thumb
 1595              		.thumb_func
 1597              	SEGGER_RTT_PutChar:
 1598              	.LFB14:
1125:../Generated_Code/SEGGER_RTT.c **** 
1126:../Generated_Code/SEGGER_RTT.c ****  /*********************************************************************
1127:../Generated_Code/SEGGER_RTT.c **** *
1128:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1129:../Generated_Code/SEGGER_RTT.c **** *
1130:../Generated_Code/SEGGER_RTT.c **** *  Function description
1131:../Generated_Code/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1132:../Generated_Code/SEGGER_RTT.c **** *
1133:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1134:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1135:../Generated_Code/SEGGER_RTT.c **** *    c            Byte to be stored.
1136:../Generated_Code/SEGGER_RTT.c **** *
1137:../Generated_Code/SEGGER_RTT.c **** *  Return value
1138:../Generated_Code/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1139:../Generated_Code/SEGGER_RTT.c **** *
1140:../Generated_Code/SEGGER_RTT.c **** *  Notes
1141:../Generated_Code/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1142:../Generated_Code/SEGGER_RTT.c **** */
1143:../Generated_Code/SEGGER_RTT.c **** 
1144:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 1599              		.loc 1 1144 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 24
 1602              		@ frame_needed = 1, uses_anonymous_args = 0
 1603 0000 80B5     		push	{r7, lr}
 1604              		.cfi_def_cfa_offset 8
 1605              		.cfi_offset 7, -8
 1606              		.cfi_offset 14, -4
 1607 0002 86B0     		sub	sp, sp, #24
 1608              		.cfi_def_cfa_offset 32
 1609 0004 00AF     		add	r7, sp, #0
 1610              		.cfi_def_cfa_register 7
 1611 0006 7860     		str	r0, [r7, #4]
 1612 0008 0B46     		mov	r3, r1
 1613 000a FB70     		strb	r3, [r7, #3]
1145:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1146:../Generated_Code/SEGGER_RTT.c ****   unsigned              WrOff;
1147:../Generated_Code/SEGGER_RTT.c ****   unsigned              Status;
1148:../Generated_Code/SEGGER_RTT.c ****   //
1149:../Generated_Code/SEGGER_RTT.c ****   // Prepare
1150:../Generated_Code/SEGGER_RTT.c ****   //
1151:../Generated_Code/SEGGER_RTT.c ****   INIT();
 1614              		.loc 1 1151 0
 1615 000c 234B     		ldr	r3, .L93
 1616 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1617 0010 002B     		cmp	r3, #0
 1618 0012 01D1     		bne	.L86
 1619              		.loc 1 1151 0 is_stmt 0 discriminator 1
 1620 0014 FFF7FEFF 		bl	_DoInit
 1621              	.L86:
 1622              	.LBB5:
1152:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1623              		.loc 1 1152 0 is_stmt 1
 1624              	@ 1152 "../Generated_Code/SEGGER_RTT.c" 1
 1625 0018 EFF31183 		mrs   r3, basepri  
 1626 001c 4FF03001 		mov   r1, #48     
 1627 0020 81F31188 		msr   basepri, r1  
 1628              		
 1629              	@ 0 "" 2
 1630              		.thumb
 1631 0024 FB60     		str	r3, [r7, #12]
1153:../Generated_Code/SEGGER_RTT.c ****   //
1154:../Generated_Code/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1155:../Generated_Code/SEGGER_RTT.c ****   //
1156:../Generated_Code/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1632              		.loc 1 1156 0
 1633 0026 7B68     		ldr	r3, [r7, #4]
 1634 0028 5A1C     		adds	r2, r3, #1
 1635 002a 1346     		mov	r3, r2
 1636 002c 5B00     		lsls	r3, r3, #1
 1637 002e 1344     		add	r3, r3, r2
 1638 0030 DB00     		lsls	r3, r3, #3
 1639 0032 1A4A     		ldr	r2, .L93
 1640 0034 1344     		add	r3, r3, r2
 1641 0036 BB60     		str	r3, [r7, #8]
1157:../Generated_Code/SEGGER_RTT.c ****   //
1158:../Generated_Code/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1159:../Generated_Code/SEGGER_RTT.c ****   //
1160:../Generated_Code/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1642              		.loc 1 1160 0
 1643 0038 BB68     		ldr	r3, [r7, #8]
 1644 003a DB68     		ldr	r3, [r3, #12]
 1645 003c 0133     		adds	r3, r3, #1
 1646 003e 7B61     		str	r3, [r7, #20]
1161:../Generated_Code/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1647              		.loc 1 1161 0
 1648 0040 BB68     		ldr	r3, [r7, #8]
 1649 0042 9A68     		ldr	r2, [r3, #8]
 1650 0044 7B69     		ldr	r3, [r7, #20]
 1651 0046 9A42     		cmp	r2, r3
 1652 0048 01D1     		bne	.L87
1162:../Generated_Code/SEGGER_RTT.c ****     WrOff = 0;
 1653              		.loc 1 1162 0
 1654 004a 0023     		movs	r3, #0
 1655 004c 7B61     		str	r3, [r7, #20]
 1656              	.L87:
1163:../Generated_Code/SEGGER_RTT.c ****   }
1164:../Generated_Code/SEGGER_RTT.c ****   //
1165:../Generated_Code/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1166:../Generated_Code/SEGGER_RTT.c ****   //
1167:../Generated_Code/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 1657              		.loc 1 1167 0
 1658 004e BB68     		ldr	r3, [r7, #8]
 1659 0050 5B69     		ldr	r3, [r3, #20]
 1660 0052 022B     		cmp	r3, #2
 1661 0054 05D1     		bne	.L88
1168:../Generated_Code/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
 1662              		.loc 1 1168 0
 1663 0056 00BF     		nop
 1664              	.L89:
 1665              		.loc 1 1168 0 is_stmt 0 discriminator 1
 1666 0058 BB68     		ldr	r3, [r7, #8]
 1667 005a 1A69     		ldr	r2, [r3, #16]
 1668 005c 7B69     		ldr	r3, [r7, #20]
 1669 005e 9A42     		cmp	r2, r3
 1670 0060 FAD0     		beq	.L89
 1671              	.L88:
1169:../Generated_Code/SEGGER_RTT.c ****       ;
1170:../Generated_Code/SEGGER_RTT.c ****     }
1171:../Generated_Code/SEGGER_RTT.c ****   }
1172:../Generated_Code/SEGGER_RTT.c ****   //
1173:../Generated_Code/SEGGER_RTT.c ****   // Output byte if free space is available
1174:../Generated_Code/SEGGER_RTT.c ****   //
1175:../Generated_Code/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1672              		.loc 1 1175 0 is_stmt 1
 1673 0062 BB68     		ldr	r3, [r7, #8]
 1674 0064 1A69     		ldr	r2, [r3, #16]
 1675 0066 7B69     		ldr	r3, [r7, #20]
 1676 0068 9A42     		cmp	r2, r3
 1677 006a 0CD0     		beq	.L90
1176:../Generated_Code/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1678              		.loc 1 1176 0
 1679 006c BB68     		ldr	r3, [r7, #8]
 1680 006e 5A68     		ldr	r2, [r3, #4]
 1681 0070 BB68     		ldr	r3, [r7, #8]
 1682 0072 DB68     		ldr	r3, [r3, #12]
 1683 0074 1344     		add	r3, r3, r2
 1684 0076 FA78     		ldrb	r2, [r7, #3]
 1685 0078 1A70     		strb	r2, [r3]
1177:../Generated_Code/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1686              		.loc 1 1177 0
 1687 007a BB68     		ldr	r3, [r7, #8]
 1688 007c 7A69     		ldr	r2, [r7, #20]
 1689 007e DA60     		str	r2, [r3, #12]
1178:../Generated_Code/SEGGER_RTT.c ****     Status = 1;
 1690              		.loc 1 1178 0
 1691 0080 0123     		movs	r3, #1
 1692 0082 3B61     		str	r3, [r7, #16]
 1693 0084 01E0     		b	.L91
 1694              	.L90:
1179:../Generated_Code/SEGGER_RTT.c ****   } else {
1180:../Generated_Code/SEGGER_RTT.c ****     Status = 0;
 1695              		.loc 1 1180 0
 1696 0086 0023     		movs	r3, #0
 1697 0088 3B61     		str	r3, [r7, #16]
 1698              	.L91:
1181:../Generated_Code/SEGGER_RTT.c ****   }
1182:../Generated_Code/SEGGER_RTT.c ****   //
1183:../Generated_Code/SEGGER_RTT.c ****   // Finish up.
1184:../Generated_Code/SEGGER_RTT.c ****   //
1185:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1699              		.loc 1 1185 0
 1700 008a FB68     		ldr	r3, [r7, #12]
 1701              	@ 1185 "../Generated_Code/SEGGER_RTT.c" 1
 1702 008c 83F31188 		msr   basepri, r3  
 1703              		
 1704              	@ 0 "" 2
 1705              		.thumb
 1706              	.LBE5:
1186:../Generated_Code/SEGGER_RTT.c ****   //
1187:../Generated_Code/SEGGER_RTT.c ****   return Status;
 1707              		.loc 1 1187 0
 1708 0090 3B69     		ldr	r3, [r7, #16]
1188:../Generated_Code/SEGGER_RTT.c **** }
 1709              		.loc 1 1188 0
 1710 0092 1846     		mov	r0, r3
 1711 0094 1837     		adds	r7, r7, #24
 1712 0096 BD46     		mov	sp, r7
 1713              		@ sp needed
 1714 0098 80BD     		pop	{r7, pc}
 1715              	.L94:
 1716 009a 00BF     		.align	2
 1717              	.L93:
 1718 009c 00000000 		.word	_SEGGER_RTT
 1719              		.cfi_endproc
 1720              	.LFE14:
 1722              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 1723              		.align	2
 1724              		.global	SEGGER_RTT_GetKey
 1725              		.thumb
 1726              		.thumb_func
 1728              	SEGGER_RTT_GetKey:
 1729              	.LFB15:
1189:../Generated_Code/SEGGER_RTT.c **** 
1190:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1191:../Generated_Code/SEGGER_RTT.c **** *
1192:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1193:../Generated_Code/SEGGER_RTT.c **** *
1194:../Generated_Code/SEGGER_RTT.c **** *  Function description
1195:../Generated_Code/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1196:../Generated_Code/SEGGER_RTT.c **** *    Host has previously stored data there.
1197:../Generated_Code/SEGGER_RTT.c **** *
1198:../Generated_Code/SEGGER_RTT.c **** *  Return value
1199:../Generated_Code/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1200:../Generated_Code/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1201:../Generated_Code/SEGGER_RTT.c **** *
1202:../Generated_Code/SEGGER_RTT.c **** *  Notes
1203:../Generated_Code/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1204:../Generated_Code/SEGGER_RTT.c **** */
1205:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 1730              		.loc 1 1205 0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 8
 1733              		@ frame_needed = 1, uses_anonymous_args = 0
 1734 0000 80B5     		push	{r7, lr}
 1735              		.cfi_def_cfa_offset 8
 1736              		.cfi_offset 7, -8
 1737              		.cfi_offset 14, -4
 1738 0002 82B0     		sub	sp, sp, #8
 1739              		.cfi_def_cfa_offset 16
 1740 0004 00AF     		add	r7, sp, #0
 1741              		.cfi_def_cfa_register 7
1206:../Generated_Code/SEGGER_RTT.c ****   char c;
1207:../Generated_Code/SEGGER_RTT.c ****   int r;
1208:../Generated_Code/SEGGER_RTT.c **** 
1209:../Generated_Code/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 1742              		.loc 1 1209 0
 1743 0006 FB1C     		adds	r3, r7, #3
 1744 0008 0020     		movs	r0, #0
 1745 000a 1946     		mov	r1, r3
 1746 000c 0122     		movs	r2, #1
 1747 000e FFF7FEFF 		bl	SEGGER_RTT_Read
 1748 0012 0346     		mov	r3, r0
 1749 0014 7B60     		str	r3, [r7, #4]
1210:../Generated_Code/SEGGER_RTT.c ****   if (r == 1) {
 1750              		.loc 1 1210 0
 1751 0016 7B68     		ldr	r3, [r7, #4]
 1752 0018 012B     		cmp	r3, #1
 1753 001a 03D1     		bne	.L96
1211:../Generated_Code/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 1754              		.loc 1 1211 0
 1755 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1756 001e DBB2     		uxtb	r3, r3
 1757 0020 7B60     		str	r3, [r7, #4]
 1758 0022 02E0     		b	.L97
 1759              	.L96:
1212:../Generated_Code/SEGGER_RTT.c ****   } else {
1213:../Generated_Code/SEGGER_RTT.c ****     r = -1;
 1760              		.loc 1 1213 0
 1761 0024 4FF0FF33 		mov	r3, #-1
 1762 0028 7B60     		str	r3, [r7, #4]
 1763              	.L97:
1214:../Generated_Code/SEGGER_RTT.c ****   }
1215:../Generated_Code/SEGGER_RTT.c ****   return r;
 1764              		.loc 1 1215 0
 1765 002a 7B68     		ldr	r3, [r7, #4]
1216:../Generated_Code/SEGGER_RTT.c **** }
 1766              		.loc 1 1216 0
 1767 002c 1846     		mov	r0, r3
 1768 002e 0837     		adds	r7, r7, #8
 1769 0030 BD46     		mov	sp, r7
 1770              		@ sp needed
 1771 0032 80BD     		pop	{r7, pc}
 1772              		.cfi_endproc
 1773              	.LFE15:
 1775              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 1776              		.align	2
 1777              		.global	SEGGER_RTT_WaitKey
 1778              		.thumb
 1779              		.thumb_func
 1781              	SEGGER_RTT_WaitKey:
 1782              	.LFB16:
1217:../Generated_Code/SEGGER_RTT.c **** 
1218:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1219:../Generated_Code/SEGGER_RTT.c **** *
1220:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1221:../Generated_Code/SEGGER_RTT.c **** *
1222:../Generated_Code/SEGGER_RTT.c **** *  Function description
1223:../Generated_Code/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1224:../Generated_Code/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1225:../Generated_Code/SEGGER_RTT.c **** *
1226:../Generated_Code/SEGGER_RTT.c **** *  Return value
1227:../Generated_Code/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1228:../Generated_Code/SEGGER_RTT.c **** *
1229:../Generated_Code/SEGGER_RTT.c **** *  Notes
1230:../Generated_Code/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1231:../Generated_Code/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1232:../Generated_Code/SEGGER_RTT.c **** */
1233:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 1783              		.loc 1 1233 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 8
 1786              		@ frame_needed = 1, uses_anonymous_args = 0
 1787 0000 80B5     		push	{r7, lr}
 1788              		.cfi_def_cfa_offset 8
 1789              		.cfi_offset 7, -8
 1790              		.cfi_offset 14, -4
 1791 0002 82B0     		sub	sp, sp, #8
 1792              		.cfi_def_cfa_offset 16
 1793 0004 00AF     		add	r7, sp, #0
 1794              		.cfi_def_cfa_register 7
 1795              	.L100:
1234:../Generated_Code/SEGGER_RTT.c ****   int r;
1235:../Generated_Code/SEGGER_RTT.c **** 
1236:../Generated_Code/SEGGER_RTT.c ****   do {
1237:../Generated_Code/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 1796              		.loc 1 1237 0 discriminator 1
 1797 0006 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 1798 000a 7860     		str	r0, [r7, #4]
1238:../Generated_Code/SEGGER_RTT.c ****   } while (r < 0);
 1799              		.loc 1 1238 0 discriminator 1
 1800 000c 7B68     		ldr	r3, [r7, #4]
 1801 000e 002B     		cmp	r3, #0
 1802 0010 F9DB     		blt	.L100
1239:../Generated_Code/SEGGER_RTT.c ****   return r;
 1803              		.loc 1 1239 0
 1804 0012 7B68     		ldr	r3, [r7, #4]
1240:../Generated_Code/SEGGER_RTT.c **** }
 1805              		.loc 1 1240 0
 1806 0014 1846     		mov	r0, r3
 1807 0016 0837     		adds	r7, r7, #8
 1808 0018 BD46     		mov	sp, r7
 1809              		@ sp needed
 1810 001a 80BD     		pop	{r7, pc}
 1811              		.cfi_endproc
 1812              	.LFE16:
 1814              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 1815              		.align	2
 1816              		.global	SEGGER_RTT_HasKey
 1817              		.thumb
 1818              		.thumb_func
 1820              	SEGGER_RTT_HasKey:
 1821              	.LFB17:
1241:../Generated_Code/SEGGER_RTT.c **** 
1242:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1243:../Generated_Code/SEGGER_RTT.c **** *
1244:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1245:../Generated_Code/SEGGER_RTT.c **** *
1246:../Generated_Code/SEGGER_RTT.c **** *  Function description
1247:../Generated_Code/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1248:../Generated_Code/SEGGER_RTT.c **** *
1249:../Generated_Code/SEGGER_RTT.c **** *  Return value
1250:../Generated_Code/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1251:../Generated_Code/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1252:../Generated_Code/SEGGER_RTT.c **** *
1253:../Generated_Code/SEGGER_RTT.c **** *  Notes
1254:../Generated_Code/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1255:../Generated_Code/SEGGER_RTT.c **** */
1256:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 1822              		.loc 1 1256 0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 8
 1825              		@ frame_needed = 1, uses_anonymous_args = 0
 1826 0000 80B5     		push	{r7, lr}
 1827              		.cfi_def_cfa_offset 8
 1828              		.cfi_offset 7, -8
 1829              		.cfi_offset 14, -4
 1830 0002 82B0     		sub	sp, sp, #8
 1831              		.cfi_def_cfa_offset 16
 1832 0004 00AF     		add	r7, sp, #0
 1833              		.cfi_def_cfa_register 7
1257:../Generated_Code/SEGGER_RTT.c ****   unsigned RdOff;
1258:../Generated_Code/SEGGER_RTT.c ****   int r;
1259:../Generated_Code/SEGGER_RTT.c **** 
1260:../Generated_Code/SEGGER_RTT.c ****   INIT();
 1834              		.loc 1 1260 0
 1835 0006 0C4B     		ldr	r3, .L107
 1836 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1837 000a 002B     		cmp	r3, #0
 1838 000c 01D1     		bne	.L103
 1839              		.loc 1 1260 0 is_stmt 0 discriminator 1
 1840 000e FFF7FEFF 		bl	_DoInit
 1841              	.L103:
1261:../Generated_Code/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 1842              		.loc 1 1261 0 is_stmt 1
 1843 0012 094B     		ldr	r3, .L107
 1844 0014 1B6F     		ldr	r3, [r3, #112]
 1845 0016 3B60     		str	r3, [r7]
1262:../Generated_Code/SEGGER_RTT.c ****   if (RdOff != _SEGGER_RTT.aDown[0].WrOff) {
 1846              		.loc 1 1262 0
 1847 0018 074B     		ldr	r3, .L107
 1848 001a DA6E     		ldr	r2, [r3, #108]
 1849 001c 3B68     		ldr	r3, [r7]
 1850 001e 9A42     		cmp	r2, r3
 1851 0020 02D0     		beq	.L104
1263:../Generated_Code/SEGGER_RTT.c ****     r = 1;
 1852              		.loc 1 1263 0
 1853 0022 0123     		movs	r3, #1
 1854 0024 7B60     		str	r3, [r7, #4]
 1855 0026 01E0     		b	.L105
 1856              	.L104:
1264:../Generated_Code/SEGGER_RTT.c ****   } else {
1265:../Generated_Code/SEGGER_RTT.c ****     r = 0;
 1857              		.loc 1 1265 0
 1858 0028 0023     		movs	r3, #0
 1859 002a 7B60     		str	r3, [r7, #4]
 1860              	.L105:
1266:../Generated_Code/SEGGER_RTT.c ****   }
1267:../Generated_Code/SEGGER_RTT.c ****   return r;
 1861              		.loc 1 1267 0
 1862 002c 7B68     		ldr	r3, [r7, #4]
1268:../Generated_Code/SEGGER_RTT.c **** }
 1863              		.loc 1 1268 0
 1864 002e 1846     		mov	r0, r3
 1865 0030 0837     		adds	r7, r7, #8
 1866 0032 BD46     		mov	sp, r7
 1867              		@ sp needed
 1868 0034 80BD     		pop	{r7, pc}
 1869              	.L108:
 1870 0036 00BF     		.align	2
 1871              	.L107:
 1872 0038 00000000 		.word	_SEGGER_RTT
 1873              		.cfi_endproc
 1874              	.LFE17:
 1876              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 1877              		.align	2
 1878              		.global	SEGGER_RTT_HasData
 1879              		.thumb
 1880              		.thumb_func
 1882              	SEGGER_RTT_HasData:
 1883              	.LFB18:
1269:../Generated_Code/SEGGER_RTT.c **** 
1270:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1271:../Generated_Code/SEGGER_RTT.c **** *
1272:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1273:../Generated_Code/SEGGER_RTT.c **** *
1274:../Generated_Code/SEGGER_RTT.c **** *  Function description
1275:../Generated_Code/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1276:../Generated_Code/SEGGER_RTT.c **** *
1277:../Generated_Code/SEGGER_RTT.c **** *  Return value:
1278:../Generated_Code/SEGGER_RTT.c **** *  ==0:  No data
1279:../Generated_Code/SEGGER_RTT.c **** *  !=0:  Data in buffer
1280:../Generated_Code/SEGGER_RTT.c **** *
1281:../Generated_Code/SEGGER_RTT.c **** */
1282:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 1884              		.loc 1 1282 0
 1885              		.cfi_startproc
 1886              		@ args = 0, pretend = 0, frame = 16
 1887              		@ frame_needed = 1, uses_anonymous_args = 0
 1888              		@ link register save eliminated.
 1889 0000 80B4     		push	{r7}
 1890              		.cfi_def_cfa_offset 4
 1891              		.cfi_offset 7, -4
 1892 0002 85B0     		sub	sp, sp, #20
 1893              		.cfi_def_cfa_offset 24
 1894 0004 00AF     		add	r7, sp, #0
 1895              		.cfi_def_cfa_register 7
 1896 0006 7860     		str	r0, [r7, #4]
1283:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
1284:../Generated_Code/SEGGER_RTT.c ****   unsigned                v;
1285:../Generated_Code/SEGGER_RTT.c **** 
1286:../Generated_Code/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 1897              		.loc 1 1286 0
 1898 0008 7A68     		ldr	r2, [r7, #4]
 1899 000a 1346     		mov	r3, r2
 1900 000c 5B00     		lsls	r3, r3, #1
 1901 000e 1344     		add	r3, r3, r2
 1902 0010 DB00     		lsls	r3, r3, #3
 1903 0012 03F16002 		add	r2, r3, #96
 1904 0016 084B     		ldr	r3, .L111
 1905 0018 1344     		add	r3, r3, r2
 1906 001a FB60     		str	r3, [r7, #12]
1287:../Generated_Code/SEGGER_RTT.c ****   v = pRing->WrOff;
 1907              		.loc 1 1287 0
 1908 001c FB68     		ldr	r3, [r7, #12]
 1909 001e DB68     		ldr	r3, [r3, #12]
 1910 0020 BB60     		str	r3, [r7, #8]
1288:../Generated_Code/SEGGER_RTT.c ****   return v - pRing->RdOff;
 1911              		.loc 1 1288 0
 1912 0022 FB68     		ldr	r3, [r7, #12]
 1913 0024 1B69     		ldr	r3, [r3, #16]
 1914 0026 BA68     		ldr	r2, [r7, #8]
 1915 0028 D31A     		subs	r3, r2, r3
1289:../Generated_Code/SEGGER_RTT.c **** }
 1916              		.loc 1 1289 0
 1917 002a 1846     		mov	r0, r3
 1918 002c 1437     		adds	r7, r7, #20
 1919 002e BD46     		mov	sp, r7
 1920              		@ sp needed
 1921 0030 5DF8047B 		ldr	r7, [sp], #4
 1922 0034 7047     		bx	lr
 1923              	.L112:
 1924 0036 00BF     		.align	2
 1925              	.L111:
 1926 0038 00000000 		.word	_SEGGER_RTT
 1927              		.cfi_endproc
 1928              	.LFE18:
 1930              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 1931              		.align	2
 1932              		.global	SEGGER_RTT_HasDataUp
 1933              		.thumb
 1934              		.thumb_func
 1936              	SEGGER_RTT_HasDataUp:
 1937              	.LFB19:
1290:../Generated_Code/SEGGER_RTT.c **** 
1291:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1292:../Generated_Code/SEGGER_RTT.c **** *
1293:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1294:../Generated_Code/SEGGER_RTT.c **** *
1295:../Generated_Code/SEGGER_RTT.c **** *  Function description
1296:../Generated_Code/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1297:../Generated_Code/SEGGER_RTT.c **** *
1298:../Generated_Code/SEGGER_RTT.c **** *  Return value:
1299:../Generated_Code/SEGGER_RTT.c **** *  ==0:  No data
1300:../Generated_Code/SEGGER_RTT.c **** *  !=0:  Data in buffer
1301:../Generated_Code/SEGGER_RTT.c **** *
1302:../Generated_Code/SEGGER_RTT.c **** */
1303:../Generated_Code/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 1938              		.loc 1 1303 0
 1939              		.cfi_startproc
 1940              		@ args = 0, pretend = 0, frame = 16
 1941              		@ frame_needed = 1, uses_anonymous_args = 0
 1942              		@ link register save eliminated.
 1943 0000 80B4     		push	{r7}
 1944              		.cfi_def_cfa_offset 4
 1945              		.cfi_offset 7, -4
 1946 0002 85B0     		sub	sp, sp, #20
 1947              		.cfi_def_cfa_offset 24
 1948 0004 00AF     		add	r7, sp, #0
 1949              		.cfi_def_cfa_register 7
 1950 0006 7860     		str	r0, [r7, #4]
1304:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1305:../Generated_Code/SEGGER_RTT.c ****   unsigned                v;
1306:../Generated_Code/SEGGER_RTT.c **** 
1307:../Generated_Code/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1951              		.loc 1 1307 0
 1952 0008 7B68     		ldr	r3, [r7, #4]
 1953 000a 5A1C     		adds	r2, r3, #1
 1954 000c 1346     		mov	r3, r2
 1955 000e 5B00     		lsls	r3, r3, #1
 1956 0010 1344     		add	r3, r3, r2
 1957 0012 DB00     		lsls	r3, r3, #3
 1958 0014 074A     		ldr	r2, .L115
 1959 0016 1344     		add	r3, r3, r2
 1960 0018 FB60     		str	r3, [r7, #12]
1308:../Generated_Code/SEGGER_RTT.c ****   v = pRing->RdOff;
 1961              		.loc 1 1308 0
 1962 001a FB68     		ldr	r3, [r7, #12]
 1963 001c 1B69     		ldr	r3, [r3, #16]
 1964 001e BB60     		str	r3, [r7, #8]
1309:../Generated_Code/SEGGER_RTT.c ****   return pRing->WrOff - v;
 1965              		.loc 1 1309 0
 1966 0020 FB68     		ldr	r3, [r7, #12]
 1967 0022 DA68     		ldr	r2, [r3, #12]
 1968 0024 BB68     		ldr	r3, [r7, #8]
 1969 0026 D31A     		subs	r3, r2, r3
1310:../Generated_Code/SEGGER_RTT.c **** }
 1970              		.loc 1 1310 0
 1971 0028 1846     		mov	r0, r3
 1972 002a 1437     		adds	r7, r7, #20
 1973 002c BD46     		mov	sp, r7
 1974              		@ sp needed
 1975 002e 5DF8047B 		ldr	r7, [sp], #4
 1976 0032 7047     		bx	lr
 1977              	.L116:
 1978              		.align	2
 1979              	.L115:
 1980 0034 00000000 		.word	_SEGGER_RTT
 1981              		.cfi_endproc
 1982              	.LFE19:
 1984              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 1985              		.align	2
 1986              		.global	SEGGER_RTT_AllocDownBuffer
 1987              		.thumb
 1988              		.thumb_func
 1990              	SEGGER_RTT_AllocDownBuffer:
 1991              	.LFB20:
1311:../Generated_Code/SEGGER_RTT.c **** 
1312:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1313:../Generated_Code/SEGGER_RTT.c **** *
1314:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1315:../Generated_Code/SEGGER_RTT.c **** *
1316:../Generated_Code/SEGGER_RTT.c **** *  Function description
1317:../Generated_Code/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1318:../Generated_Code/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1319:../Generated_Code/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1320:../Generated_Code/SEGGER_RTT.c **** *
1321:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1322:../Generated_Code/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1323:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1324:../Generated_Code/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1325:../Generated_Code/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1326:../Generated_Code/SEGGER_RTT.c **** *
1327:../Generated_Code/SEGGER_RTT.c **** *  Return value
1328:../Generated_Code/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1329:../Generated_Code/SEGGER_RTT.c **** *     < 0 - Error
1330:../Generated_Code/SEGGER_RTT.c **** */
1331:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 1992              		.loc 1 1331 0
 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 24
 1995              		@ frame_needed = 1, uses_anonymous_args = 0
 1996 0000 80B5     		push	{r7, lr}
 1997              		.cfi_def_cfa_offset 8
 1998              		.cfi_offset 7, -8
 1999              		.cfi_offset 14, -4
 2000 0002 86B0     		sub	sp, sp, #24
 2001              		.cfi_def_cfa_offset 32
 2002 0004 00AF     		add	r7, sp, #0
 2003              		.cfi_def_cfa_register 7
 2004 0006 F860     		str	r0, [r7, #12]
 2005 0008 B960     		str	r1, [r7, #8]
 2006 000a 7A60     		str	r2, [r7, #4]
 2007 000c 3B60     		str	r3, [r7]
1332:../Generated_Code/SEGGER_RTT.c ****   int BufferIndex;
1333:../Generated_Code/SEGGER_RTT.c **** 
1334:../Generated_Code/SEGGER_RTT.c ****   INIT();
 2008              		.loc 1 1334 0
 2009 000e 384B     		ldr	r3, .L125
 2010 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2011 0012 002B     		cmp	r3, #0
 2012 0014 01D1     		bne	.L118
 2013              		.loc 1 1334 0 is_stmt 0 discriminator 1
 2014 0016 FFF7FEFF 		bl	_DoInit
 2015              	.L118:
 2016              	.LBB6:
1335:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2017              		.loc 1 1335 0 is_stmt 1
 2018              	@ 1335 "../Generated_Code/SEGGER_RTT.c" 1
 2019 001a EFF31183 		mrs   r3, basepri  
 2020 001e 4FF03001 		mov   r1, #48     
 2021 0022 81F31188 		msr   basepri, r1  
 2022              		
 2023              	@ 0 "" 2
 2024              		.thumb
 2025 0026 3B61     		str	r3, [r7, #16]
1336:../Generated_Code/SEGGER_RTT.c ****   BufferIndex = 0;
 2026              		.loc 1 1336 0
 2027 0028 0023     		movs	r3, #0
 2028 002a 7B61     		str	r3, [r7, #20]
 2029              	.L121:
1337:../Generated_Code/SEGGER_RTT.c ****   do {
1338:../Generated_Code/SEGGER_RTT.c ****     if (_SEGGER_RTT.aDown[BufferIndex].pBuffer == NULL) {
 2030              		.loc 1 1338 0
 2031 002c 3049     		ldr	r1, .L125
 2032 002e 7A69     		ldr	r2, [r7, #20]
 2033 0030 1346     		mov	r3, r2
 2034 0032 5B00     		lsls	r3, r3, #1
 2035 0034 1344     		add	r3, r3, r2
 2036 0036 DB00     		lsls	r3, r3, #3
 2037 0038 0B44     		add	r3, r3, r1
 2038 003a 6033     		adds	r3, r3, #96
 2039 003c 5B68     		ldr	r3, [r3, #4]
 2040 003e 002B     		cmp	r3, #0
 2041 0040 00D1     		bne	.L119
1339:../Generated_Code/SEGGER_RTT.c ****       break;
 2042              		.loc 1 1339 0
 2043 0042 07E0     		b	.L120
 2044              	.L119:
1340:../Generated_Code/SEGGER_RTT.c ****     }
1341:../Generated_Code/SEGGER_RTT.c ****     BufferIndex++;
 2045              		.loc 1 1341 0
 2046 0044 7B69     		ldr	r3, [r7, #20]
 2047 0046 0133     		adds	r3, r3, #1
 2048 0048 7B61     		str	r3, [r7, #20]
1342:../Generated_Code/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers);
 2049              		.loc 1 1342 0
 2050 004a 294B     		ldr	r3, .L125
 2051 004c 5A69     		ldr	r2, [r3, #20]
 2052 004e 7B69     		ldr	r3, [r7, #20]
 2053 0050 9A42     		cmp	r2, r3
 2054 0052 EBDC     		bgt	.L121
 2055              	.L120:
1343:../Generated_Code/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers) {
 2056              		.loc 1 1343 0
 2057 0054 264B     		ldr	r3, .L125
 2058 0056 5A69     		ldr	r2, [r3, #20]
 2059 0058 7B69     		ldr	r3, [r7, #20]
 2060 005a 9A42     		cmp	r2, r3
 2061 005c 3CDD     		ble	.L122
1344:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2062              		.loc 1 1344 0
 2063 005e 2449     		ldr	r1, .L125
 2064 0060 7A69     		ldr	r2, [r7, #20]
 2065 0062 1346     		mov	r3, r2
 2066 0064 5B00     		lsls	r3, r3, #1
 2067 0066 1344     		add	r3, r3, r2
 2068 0068 DB00     		lsls	r3, r3, #3
 2069 006a 0B44     		add	r3, r3, r1
 2070 006c 6033     		adds	r3, r3, #96
 2071 006e FA68     		ldr	r2, [r7, #12]
 2072 0070 1A60     		str	r2, [r3]
1345:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2073              		.loc 1 1345 0
 2074 0072 1F49     		ldr	r1, .L125
 2075 0074 7A69     		ldr	r2, [r7, #20]
 2076 0076 1346     		mov	r3, r2
 2077 0078 5B00     		lsls	r3, r3, #1
 2078 007a 1344     		add	r3, r3, r2
 2079 007c DB00     		lsls	r3, r3, #3
 2080 007e 0B44     		add	r3, r3, r1
 2081 0080 6033     		adds	r3, r3, #96
 2082 0082 BA68     		ldr	r2, [r7, #8]
 2083 0084 5A60     		str	r2, [r3, #4]
1346:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2084              		.loc 1 1346 0
 2085 0086 1A49     		ldr	r1, .L125
 2086 0088 7A69     		ldr	r2, [r7, #20]
 2087 008a 1346     		mov	r3, r2
 2088 008c 5B00     		lsls	r3, r3, #1
 2089 008e 1344     		add	r3, r3, r2
 2090 0090 DB00     		lsls	r3, r3, #3
 2091 0092 0B44     		add	r3, r3, r1
 2092 0094 6833     		adds	r3, r3, #104
 2093 0096 7A68     		ldr	r2, [r7, #4]
 2094 0098 1A60     		str	r2, [r3]
1347:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2095              		.loc 1 1347 0
 2096 009a 1549     		ldr	r1, .L125
 2097 009c 7A69     		ldr	r2, [r7, #20]
 2098 009e 1346     		mov	r3, r2
 2099 00a0 5B00     		lsls	r3, r3, #1
 2100 00a2 1344     		add	r3, r3, r2
 2101 00a4 DB00     		lsls	r3, r3, #3
 2102 00a6 0B44     		add	r3, r3, r1
 2103 00a8 7033     		adds	r3, r3, #112
 2104 00aa 0022     		movs	r2, #0
 2105 00ac 1A60     		str	r2, [r3]
1348:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2106              		.loc 1 1348 0
 2107 00ae 1049     		ldr	r1, .L125
 2108 00b0 7A69     		ldr	r2, [r7, #20]
 2109 00b2 1346     		mov	r3, r2
 2110 00b4 5B00     		lsls	r3, r3, #1
 2111 00b6 1344     		add	r3, r3, r2
 2112 00b8 DB00     		lsls	r3, r3, #3
 2113 00ba 0B44     		add	r3, r3, r1
 2114 00bc 6833     		adds	r3, r3, #104
 2115 00be 0022     		movs	r2, #0
 2116 00c0 5A60     		str	r2, [r3, #4]
1349:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags        = Flags;
 2117              		.loc 1 1349 0
 2118 00c2 0B49     		ldr	r1, .L125
 2119 00c4 7A69     		ldr	r2, [r7, #20]
 2120 00c6 1346     		mov	r3, r2
 2121 00c8 5B00     		lsls	r3, r3, #1
 2122 00ca 1344     		add	r3, r3, r2
 2123 00cc DB00     		lsls	r3, r3, #3
 2124 00ce 0B44     		add	r3, r3, r1
 2125 00d0 7033     		adds	r3, r3, #112
 2126 00d2 3A68     		ldr	r2, [r7]
 2127 00d4 5A60     		str	r2, [r3, #4]
 2128 00d6 02E0     		b	.L123
 2129              	.L122:
1350:../Generated_Code/SEGGER_RTT.c ****   } else {
1351:../Generated_Code/SEGGER_RTT.c ****     BufferIndex = -1;
 2130              		.loc 1 1351 0
 2131 00d8 4FF0FF33 		mov	r3, #-1
 2132 00dc 7B61     		str	r3, [r7, #20]
 2133              	.L123:
1352:../Generated_Code/SEGGER_RTT.c ****   }
1353:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2134              		.loc 1 1353 0
 2135 00de 3B69     		ldr	r3, [r7, #16]
 2136              	@ 1353 "../Generated_Code/SEGGER_RTT.c" 1
 2137 00e0 83F31188 		msr   basepri, r3  
 2138              		
 2139              	@ 0 "" 2
 2140              		.thumb
 2141              	.LBE6:
1354:../Generated_Code/SEGGER_RTT.c ****   return BufferIndex;
 2142              		.loc 1 1354 0
 2143 00e4 7B69     		ldr	r3, [r7, #20]
1355:../Generated_Code/SEGGER_RTT.c **** }
 2144              		.loc 1 1355 0
 2145 00e6 1846     		mov	r0, r3
 2146 00e8 1837     		adds	r7, r7, #24
 2147 00ea BD46     		mov	sp, r7
 2148              		@ sp needed
 2149 00ec 80BD     		pop	{r7, pc}
 2150              	.L126:
 2151 00ee 00BF     		.align	2
 2152              	.L125:
 2153 00f0 00000000 		.word	_SEGGER_RTT
 2154              		.cfi_endproc
 2155              	.LFE20:
 2157              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2158              		.align	2
 2159              		.global	SEGGER_RTT_AllocUpBuffer
 2160              		.thumb
 2161              		.thumb_func
 2163              	SEGGER_RTT_AllocUpBuffer:
 2164              	.LFB21:
1356:../Generated_Code/SEGGER_RTT.c **** 
1357:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1358:../Generated_Code/SEGGER_RTT.c **** *
1359:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1360:../Generated_Code/SEGGER_RTT.c **** *
1361:../Generated_Code/SEGGER_RTT.c **** *  Function description
1362:../Generated_Code/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1363:../Generated_Code/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1364:../Generated_Code/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1365:../Generated_Code/SEGGER_RTT.c **** *
1366:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1367:../Generated_Code/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1368:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1369:../Generated_Code/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1370:../Generated_Code/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1371:../Generated_Code/SEGGER_RTT.c **** *
1372:../Generated_Code/SEGGER_RTT.c **** *  Return value
1373:../Generated_Code/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1374:../Generated_Code/SEGGER_RTT.c **** *     < 0 - Error
1375:../Generated_Code/SEGGER_RTT.c **** */
1376:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2165              		.loc 1 1376 0
 2166              		.cfi_startproc
 2167              		@ args = 0, pretend = 0, frame = 24
 2168              		@ frame_needed = 1, uses_anonymous_args = 0
 2169 0000 80B5     		push	{r7, lr}
 2170              		.cfi_def_cfa_offset 8
 2171              		.cfi_offset 7, -8
 2172              		.cfi_offset 14, -4
 2173 0002 86B0     		sub	sp, sp, #24
 2174              		.cfi_def_cfa_offset 32
 2175 0004 00AF     		add	r7, sp, #0
 2176              		.cfi_def_cfa_register 7
 2177 0006 F860     		str	r0, [r7, #12]
 2178 0008 B960     		str	r1, [r7, #8]
 2179 000a 7A60     		str	r2, [r7, #4]
 2180 000c 3B60     		str	r3, [r7]
1377:../Generated_Code/SEGGER_RTT.c ****   int BufferIndex;
1378:../Generated_Code/SEGGER_RTT.c **** 
1379:../Generated_Code/SEGGER_RTT.c ****   INIT();
 2181              		.loc 1 1379 0
 2182 000e 384B     		ldr	r3, .L135
 2183 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2184 0012 002B     		cmp	r3, #0
 2185 0014 01D1     		bne	.L128
 2186              		.loc 1 1379 0 is_stmt 0 discriminator 1
 2187 0016 FFF7FEFF 		bl	_DoInit
 2188              	.L128:
 2189              	.LBB7:
1380:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2190              		.loc 1 1380 0 is_stmt 1
 2191              	@ 1380 "../Generated_Code/SEGGER_RTT.c" 1
 2192 001a EFF31183 		mrs   r3, basepri  
 2193 001e 4FF03001 		mov   r1, #48     
 2194 0022 81F31188 		msr   basepri, r1  
 2195              		
 2196              	@ 0 "" 2
 2197              		.thumb
 2198 0026 3B61     		str	r3, [r7, #16]
1381:../Generated_Code/SEGGER_RTT.c ****   BufferIndex = 0;
 2199              		.loc 1 1381 0
 2200 0028 0023     		movs	r3, #0
 2201 002a 7B61     		str	r3, [r7, #20]
 2202              	.L131:
1382:../Generated_Code/SEGGER_RTT.c ****   do {
1383:../Generated_Code/SEGGER_RTT.c ****     if (_SEGGER_RTT.aUp[BufferIndex].pBuffer == NULL) {
 2203              		.loc 1 1383 0
 2204 002c 3049     		ldr	r1, .L135
 2205 002e 7B69     		ldr	r3, [r7, #20]
 2206 0030 5A1C     		adds	r2, r3, #1
 2207 0032 1346     		mov	r3, r2
 2208 0034 5B00     		lsls	r3, r3, #1
 2209 0036 1344     		add	r3, r3, r2
 2210 0038 DB00     		lsls	r3, r3, #3
 2211 003a 0B44     		add	r3, r3, r1
 2212 003c 5B68     		ldr	r3, [r3, #4]
 2213 003e 002B     		cmp	r3, #0
 2214 0040 00D1     		bne	.L129
1384:../Generated_Code/SEGGER_RTT.c ****       break;
 2215              		.loc 1 1384 0
 2216 0042 07E0     		b	.L130
 2217              	.L129:
1385:../Generated_Code/SEGGER_RTT.c ****     }
1386:../Generated_Code/SEGGER_RTT.c ****     BufferIndex++;
 2218              		.loc 1 1386 0
 2219 0044 7B69     		ldr	r3, [r7, #20]
 2220 0046 0133     		adds	r3, r3, #1
 2221 0048 7B61     		str	r3, [r7, #20]
1387:../Generated_Code/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers);
 2222              		.loc 1 1387 0
 2223 004a 294B     		ldr	r3, .L135
 2224 004c 1A69     		ldr	r2, [r3, #16]
 2225 004e 7B69     		ldr	r3, [r7, #20]
 2226 0050 9A42     		cmp	r2, r3
 2227 0052 EBDC     		bgt	.L131
 2228              	.L130:
1388:../Generated_Code/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers) {
 2229              		.loc 1 1388 0
 2230 0054 264B     		ldr	r3, .L135
 2231 0056 1A69     		ldr	r2, [r3, #16]
 2232 0058 7B69     		ldr	r3, [r7, #20]
 2233 005a 9A42     		cmp	r2, r3
 2234 005c 3CDD     		ble	.L132
1389:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2235              		.loc 1 1389 0
 2236 005e 2449     		ldr	r1, .L135
 2237 0060 7B69     		ldr	r3, [r7, #20]
 2238 0062 5A1C     		adds	r2, r3, #1
 2239 0064 1346     		mov	r3, r2
 2240 0066 5B00     		lsls	r3, r3, #1
 2241 0068 1344     		add	r3, r3, r2
 2242 006a DB00     		lsls	r3, r3, #3
 2243 006c 0B44     		add	r3, r3, r1
 2244 006e FA68     		ldr	r2, [r7, #12]
 2245 0070 1A60     		str	r2, [r3]
1390:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2246              		.loc 1 1390 0
 2247 0072 1F49     		ldr	r1, .L135
 2248 0074 7B69     		ldr	r3, [r7, #20]
 2249 0076 5A1C     		adds	r2, r3, #1
 2250 0078 1346     		mov	r3, r2
 2251 007a 5B00     		lsls	r3, r3, #1
 2252 007c 1344     		add	r3, r3, r2
 2253 007e DB00     		lsls	r3, r3, #3
 2254 0080 0B44     		add	r3, r3, r1
 2255 0082 BA68     		ldr	r2, [r7, #8]
 2256 0084 5A60     		str	r2, [r3, #4]
1391:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2257              		.loc 1 1391 0
 2258 0086 1A49     		ldr	r1, .L135
 2259 0088 7A69     		ldr	r2, [r7, #20]
 2260 008a 1346     		mov	r3, r2
 2261 008c 5B00     		lsls	r3, r3, #1
 2262 008e 1344     		add	r3, r3, r2
 2263 0090 DB00     		lsls	r3, r3, #3
 2264 0092 0B44     		add	r3, r3, r1
 2265 0094 2033     		adds	r3, r3, #32
 2266 0096 7A68     		ldr	r2, [r7, #4]
 2267 0098 1A60     		str	r2, [r3]
1392:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2268              		.loc 1 1392 0
 2269 009a 1549     		ldr	r1, .L135
 2270 009c 7A69     		ldr	r2, [r7, #20]
 2271 009e 1346     		mov	r3, r2
 2272 00a0 5B00     		lsls	r3, r3, #1
 2273 00a2 1344     		add	r3, r3, r2
 2274 00a4 DB00     		lsls	r3, r3, #3
 2275 00a6 0B44     		add	r3, r3, r1
 2276 00a8 2833     		adds	r3, r3, #40
 2277 00aa 0022     		movs	r2, #0
 2278 00ac 1A60     		str	r2, [r3]
1393:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2279              		.loc 1 1393 0
 2280 00ae 1049     		ldr	r1, .L135
 2281 00b0 7A69     		ldr	r2, [r7, #20]
 2282 00b2 1346     		mov	r3, r2
 2283 00b4 5B00     		lsls	r3, r3, #1
 2284 00b6 1344     		add	r3, r3, r2
 2285 00b8 DB00     		lsls	r3, r3, #3
 2286 00ba 0B44     		add	r3, r3, r1
 2287 00bc 2033     		adds	r3, r3, #32
 2288 00be 0022     		movs	r2, #0
 2289 00c0 5A60     		str	r2, [r3, #4]
1394:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags        = Flags;
 2290              		.loc 1 1394 0
 2291 00c2 0B49     		ldr	r1, .L135
 2292 00c4 7A69     		ldr	r2, [r7, #20]
 2293 00c6 1346     		mov	r3, r2
 2294 00c8 5B00     		lsls	r3, r3, #1
 2295 00ca 1344     		add	r3, r3, r2
 2296 00cc DB00     		lsls	r3, r3, #3
 2297 00ce 0B44     		add	r3, r3, r1
 2298 00d0 2833     		adds	r3, r3, #40
 2299 00d2 3A68     		ldr	r2, [r7]
 2300 00d4 5A60     		str	r2, [r3, #4]
 2301 00d6 02E0     		b	.L133
 2302              	.L132:
1395:../Generated_Code/SEGGER_RTT.c ****   } else {
1396:../Generated_Code/SEGGER_RTT.c ****     BufferIndex = -1;
 2303              		.loc 1 1396 0
 2304 00d8 4FF0FF33 		mov	r3, #-1
 2305 00dc 7B61     		str	r3, [r7, #20]
 2306              	.L133:
1397:../Generated_Code/SEGGER_RTT.c ****   }
1398:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2307              		.loc 1 1398 0
 2308 00de 3B69     		ldr	r3, [r7, #16]
 2309              	@ 1398 "../Generated_Code/SEGGER_RTT.c" 1
 2310 00e0 83F31188 		msr   basepri, r3  
 2311              		
 2312              	@ 0 "" 2
 2313              		.thumb
 2314              	.LBE7:
1399:../Generated_Code/SEGGER_RTT.c ****   return BufferIndex;
 2315              		.loc 1 1399 0
 2316 00e4 7B69     		ldr	r3, [r7, #20]
1400:../Generated_Code/SEGGER_RTT.c **** }
 2317              		.loc 1 1400 0
 2318 00e6 1846     		mov	r0, r3
 2319 00e8 1837     		adds	r7, r7, #24
 2320 00ea BD46     		mov	sp, r7
 2321              		@ sp needed
 2322 00ec 80BD     		pop	{r7, pc}
 2323              	.L136:
 2324 00ee 00BF     		.align	2
 2325              	.L135:
 2326 00f0 00000000 		.word	_SEGGER_RTT
 2327              		.cfi_endproc
 2328              	.LFE21:
 2330              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2331              		.align	2
 2332              		.global	SEGGER_RTT_ConfigUpBuffer
 2333              		.thumb
 2334              		.thumb_func
 2336              	SEGGER_RTT_ConfigUpBuffer:
 2337              	.LFB22:
1401:../Generated_Code/SEGGER_RTT.c **** 
1402:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1403:../Generated_Code/SEGGER_RTT.c **** *
1404:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1405:../Generated_Code/SEGGER_RTT.c **** *
1406:../Generated_Code/SEGGER_RTT.c **** *  Function description
1407:../Generated_Code/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1408:../Generated_Code/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1409:../Generated_Code/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1410:../Generated_Code/SEGGER_RTT.c **** *
1411:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1412:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1413:../Generated_Code/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1414:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1415:../Generated_Code/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1416:../Generated_Code/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1417:../Generated_Code/SEGGER_RTT.c **** *
1418:../Generated_Code/SEGGER_RTT.c **** *  Return value
1419:../Generated_Code/SEGGER_RTT.c **** *    >= 0 - O.K.
1420:../Generated_Code/SEGGER_RTT.c **** *     < 0 - Error
1421:../Generated_Code/SEGGER_RTT.c **** *
1422:../Generated_Code/SEGGER_RTT.c **** *  Additional information
1423:../Generated_Code/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1424:../Generated_Code/SEGGER_RTT.c **** *    May only be called once per buffer.
1425:../Generated_Code/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1426:../Generated_Code/SEGGER_RTT.c **** */
1427:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2338              		.loc 1 1427 0
 2339              		.cfi_startproc
 2340              		@ args = 4, pretend = 0, frame = 24
 2341              		@ frame_needed = 1, uses_anonymous_args = 0
 2342 0000 80B5     		push	{r7, lr}
 2343              		.cfi_def_cfa_offset 8
 2344              		.cfi_offset 7, -8
 2345              		.cfi_offset 14, -4
 2346 0002 86B0     		sub	sp, sp, #24
 2347              		.cfi_def_cfa_offset 32
 2348 0004 00AF     		add	r7, sp, #0
 2349              		.cfi_def_cfa_register 7
 2350 0006 F860     		str	r0, [r7, #12]
 2351 0008 B960     		str	r1, [r7, #8]
 2352 000a 7A60     		str	r2, [r7, #4]
 2353 000c 3B60     		str	r3, [r7]
1428:../Generated_Code/SEGGER_RTT.c ****   int r;
1429:../Generated_Code/SEGGER_RTT.c **** 
1430:../Generated_Code/SEGGER_RTT.c ****   INIT();
 2354              		.loc 1 1430 0
 2355 000e 304B     		ldr	r3, .L143
 2356 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2357 0012 002B     		cmp	r3, #0
 2358 0014 01D1     		bne	.L138
 2359              		.loc 1 1430 0 is_stmt 0 discriminator 1
 2360 0016 FFF7FEFF 		bl	_DoInit
 2361              	.L138:
1431:../Generated_Code/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2362              		.loc 1 1431 0 is_stmt 1
 2363 001a 2D4B     		ldr	r3, .L143
 2364 001c 1B69     		ldr	r3, [r3, #16]
 2365 001e 1A46     		mov	r2, r3
 2366 0020 FB68     		ldr	r3, [r7, #12]
 2367 0022 9A42     		cmp	r2, r3
 2368 0024 4BD9     		bls	.L139
 2369              	.LBB8:
1432:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2370              		.loc 1 1432 0
 2371              	@ 1432 "../Generated_Code/SEGGER_RTT.c" 1
 2372 0026 EFF31183 		mrs   r3, basepri  
 2373 002a 4FF03001 		mov   r1, #48     
 2374 002e 81F31188 		msr   basepri, r1  
 2375              		
 2376              	@ 0 "" 2
 2377              		.thumb
 2378 0032 3B61     		str	r3, [r7, #16]
1433:../Generated_Code/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2379              		.loc 1 1433 0
 2380 0034 FB68     		ldr	r3, [r7, #12]
 2381 0036 002B     		cmp	r3, #0
 2382 0038 31D0     		beq	.L140
1434:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2383              		.loc 1 1434 0
 2384 003a 2549     		ldr	r1, .L143
 2385 003c FB68     		ldr	r3, [r7, #12]
 2386 003e 5A1C     		adds	r2, r3, #1
 2387 0040 1346     		mov	r3, r2
 2388 0042 5B00     		lsls	r3, r3, #1
 2389 0044 1344     		add	r3, r3, r2
 2390 0046 DB00     		lsls	r3, r3, #3
 2391 0048 0B44     		add	r3, r3, r1
 2392 004a BA68     		ldr	r2, [r7, #8]
 2393 004c 1A60     		str	r2, [r3]
1435:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2394              		.loc 1 1435 0
 2395 004e 2049     		ldr	r1, .L143
 2396 0050 FB68     		ldr	r3, [r7, #12]
 2397 0052 5A1C     		adds	r2, r3, #1
 2398 0054 1346     		mov	r3, r2
 2399 0056 5B00     		lsls	r3, r3, #1
 2400 0058 1344     		add	r3, r3, r2
 2401 005a DB00     		lsls	r3, r3, #3
 2402 005c 0B44     		add	r3, r3, r1
 2403 005e 7A68     		ldr	r2, [r7, #4]
 2404 0060 5A60     		str	r2, [r3, #4]
1436:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2405              		.loc 1 1436 0
 2406 0062 1B49     		ldr	r1, .L143
 2407 0064 FA68     		ldr	r2, [r7, #12]
 2408 0066 1346     		mov	r3, r2
 2409 0068 5B00     		lsls	r3, r3, #1
 2410 006a 1344     		add	r3, r3, r2
 2411 006c DB00     		lsls	r3, r3, #3
 2412 006e 0B44     		add	r3, r3, r1
 2413 0070 2033     		adds	r3, r3, #32
 2414 0072 3A68     		ldr	r2, [r7]
 2415 0074 1A60     		str	r2, [r3]
1437:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2416              		.loc 1 1437 0
 2417 0076 1649     		ldr	r1, .L143
 2418 0078 FA68     		ldr	r2, [r7, #12]
 2419 007a 1346     		mov	r3, r2
 2420 007c 5B00     		lsls	r3, r3, #1
 2421 007e 1344     		add	r3, r3, r2
 2422 0080 DB00     		lsls	r3, r3, #3
 2423 0082 0B44     		add	r3, r3, r1
 2424 0084 2833     		adds	r3, r3, #40
 2425 0086 0022     		movs	r2, #0
 2426 0088 1A60     		str	r2, [r3]
1438:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2427              		.loc 1 1438 0
 2428 008a 1149     		ldr	r1, .L143
 2429 008c FA68     		ldr	r2, [r7, #12]
 2430 008e 1346     		mov	r3, r2
 2431 0090 5B00     		lsls	r3, r3, #1
 2432 0092 1344     		add	r3, r3, r2
 2433 0094 DB00     		lsls	r3, r3, #3
 2434 0096 0B44     		add	r3, r3, r1
 2435 0098 2033     		adds	r3, r3, #32
 2436 009a 0022     		movs	r2, #0
 2437 009c 5A60     		str	r2, [r3, #4]
 2438              	.L140:
1439:../Generated_Code/SEGGER_RTT.c ****     }
1440:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 2439              		.loc 1 1440 0
 2440 009e 0C49     		ldr	r1, .L143
 2441 00a0 FA68     		ldr	r2, [r7, #12]
 2442 00a2 1346     		mov	r3, r2
 2443 00a4 5B00     		lsls	r3, r3, #1
 2444 00a6 1344     		add	r3, r3, r2
 2445 00a8 DB00     		lsls	r3, r3, #3
 2446 00aa 0B44     		add	r3, r3, r1
 2447 00ac 2833     		adds	r3, r3, #40
 2448 00ae 3A6A     		ldr	r2, [r7, #32]
 2449 00b0 5A60     		str	r2, [r3, #4]
1441:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2450              		.loc 1 1441 0
 2451 00b2 3B69     		ldr	r3, [r7, #16]
 2452              	@ 1441 "../Generated_Code/SEGGER_RTT.c" 1
 2453 00b4 83F31188 		msr   basepri, r3  
 2454              		
 2455              	@ 0 "" 2
 2456              		.thumb
 2457              	.LBE8:
1442:../Generated_Code/SEGGER_RTT.c ****     r =  0;
 2458              		.loc 1 1442 0
 2459 00b8 0023     		movs	r3, #0
 2460 00ba 7B61     		str	r3, [r7, #20]
 2461 00bc 02E0     		b	.L141
 2462              	.L139:
1443:../Generated_Code/SEGGER_RTT.c ****   } else {
1444:../Generated_Code/SEGGER_RTT.c ****     r = -1;
 2463              		.loc 1 1444 0
 2464 00be 4FF0FF33 		mov	r3, #-1
 2465 00c2 7B61     		str	r3, [r7, #20]
 2466              	.L141:
1445:../Generated_Code/SEGGER_RTT.c ****   }
1446:../Generated_Code/SEGGER_RTT.c ****   return r;
 2467              		.loc 1 1446 0
 2468 00c4 7B69     		ldr	r3, [r7, #20]
1447:../Generated_Code/SEGGER_RTT.c **** }
 2469              		.loc 1 1447 0
 2470 00c6 1846     		mov	r0, r3
 2471 00c8 1837     		adds	r7, r7, #24
 2472 00ca BD46     		mov	sp, r7
 2473              		@ sp needed
 2474 00cc 80BD     		pop	{r7, pc}
 2475              	.L144:
 2476 00ce 00BF     		.align	2
 2477              	.L143:
 2478 00d0 00000000 		.word	_SEGGER_RTT
 2479              		.cfi_endproc
 2480              	.LFE22:
 2482              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2483              		.align	2
 2484              		.global	SEGGER_RTT_ConfigDownBuffer
 2485              		.thumb
 2486              		.thumb_func
 2488              	SEGGER_RTT_ConfigDownBuffer:
 2489              	.LFB23:
1448:../Generated_Code/SEGGER_RTT.c **** 
1449:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1450:../Generated_Code/SEGGER_RTT.c **** *
1451:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1452:../Generated_Code/SEGGER_RTT.c **** *
1453:../Generated_Code/SEGGER_RTT.c **** *  Function description
1454:../Generated_Code/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1455:../Generated_Code/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1456:../Generated_Code/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1457:../Generated_Code/SEGGER_RTT.c **** *
1458:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1459:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1460:../Generated_Code/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1461:../Generated_Code/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1462:../Generated_Code/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1463:../Generated_Code/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1464:../Generated_Code/SEGGER_RTT.c **** *
1465:../Generated_Code/SEGGER_RTT.c **** *  Return value
1466:../Generated_Code/SEGGER_RTT.c **** *    >= 0  O.K.
1467:../Generated_Code/SEGGER_RTT.c **** *     < 0  Error
1468:../Generated_Code/SEGGER_RTT.c **** *
1469:../Generated_Code/SEGGER_RTT.c **** *  Additional information
1470:../Generated_Code/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1471:../Generated_Code/SEGGER_RTT.c **** *    May only be called once per buffer.
1472:../Generated_Code/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1473:../Generated_Code/SEGGER_RTT.c **** */
1474:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2490              		.loc 1 1474 0
 2491              		.cfi_startproc
 2492              		@ args = 4, pretend = 0, frame = 24
 2493              		@ frame_needed = 1, uses_anonymous_args = 0
 2494 0000 80B5     		push	{r7, lr}
 2495              		.cfi_def_cfa_offset 8
 2496              		.cfi_offset 7, -8
 2497              		.cfi_offset 14, -4
 2498 0002 86B0     		sub	sp, sp, #24
 2499              		.cfi_def_cfa_offset 32
 2500 0004 00AF     		add	r7, sp, #0
 2501              		.cfi_def_cfa_register 7
 2502 0006 F860     		str	r0, [r7, #12]
 2503 0008 B960     		str	r1, [r7, #8]
 2504 000a 7A60     		str	r2, [r7, #4]
 2505 000c 3B60     		str	r3, [r7]
1475:../Generated_Code/SEGGER_RTT.c ****   int r;
1476:../Generated_Code/SEGGER_RTT.c **** 
1477:../Generated_Code/SEGGER_RTT.c ****   INIT();
 2506              		.loc 1 1477 0
 2507 000e 304B     		ldr	r3, .L151
 2508 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2509 0012 002B     		cmp	r3, #0
 2510 0014 01D1     		bne	.L146
 2511              		.loc 1 1477 0 is_stmt 0 discriminator 1
 2512 0016 FFF7FEFF 		bl	_DoInit
 2513              	.L146:
1478:../Generated_Code/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2514              		.loc 1 1478 0 is_stmt 1
 2515 001a 2D4B     		ldr	r3, .L151
 2516 001c 5B69     		ldr	r3, [r3, #20]
 2517 001e 1A46     		mov	r2, r3
 2518 0020 FB68     		ldr	r3, [r7, #12]
 2519 0022 9A42     		cmp	r2, r3
 2520 0024 4BD9     		bls	.L147
 2521              	.LBB9:
1479:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2522              		.loc 1 1479 0
 2523              	@ 1479 "../Generated_Code/SEGGER_RTT.c" 1
 2524 0026 EFF31183 		mrs   r3, basepri  
 2525 002a 4FF03001 		mov   r1, #48     
 2526 002e 81F31188 		msr   basepri, r1  
 2527              		
 2528              	@ 0 "" 2
 2529              		.thumb
 2530 0032 3B61     		str	r3, [r7, #16]
1480:../Generated_Code/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2531              		.loc 1 1480 0
 2532 0034 FB68     		ldr	r3, [r7, #12]
 2533 0036 002B     		cmp	r3, #0
 2534 0038 31D0     		beq	.L148
1481:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2535              		.loc 1 1481 0
 2536 003a 2549     		ldr	r1, .L151
 2537 003c FA68     		ldr	r2, [r7, #12]
 2538 003e 1346     		mov	r3, r2
 2539 0040 5B00     		lsls	r3, r3, #1
 2540 0042 1344     		add	r3, r3, r2
 2541 0044 DB00     		lsls	r3, r3, #3
 2542 0046 0B44     		add	r3, r3, r1
 2543 0048 6033     		adds	r3, r3, #96
 2544 004a BA68     		ldr	r2, [r7, #8]
 2545 004c 1A60     		str	r2, [r3]
1482:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2546              		.loc 1 1482 0
 2547 004e 2049     		ldr	r1, .L151
 2548 0050 FA68     		ldr	r2, [r7, #12]
 2549 0052 1346     		mov	r3, r2
 2550 0054 5B00     		lsls	r3, r3, #1
 2551 0056 1344     		add	r3, r3, r2
 2552 0058 DB00     		lsls	r3, r3, #3
 2553 005a 0B44     		add	r3, r3, r1
 2554 005c 6033     		adds	r3, r3, #96
 2555 005e 7A68     		ldr	r2, [r7, #4]
 2556 0060 5A60     		str	r2, [r3, #4]
1483:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2557              		.loc 1 1483 0
 2558 0062 1B49     		ldr	r1, .L151
 2559 0064 FA68     		ldr	r2, [r7, #12]
 2560 0066 1346     		mov	r3, r2
 2561 0068 5B00     		lsls	r3, r3, #1
 2562 006a 1344     		add	r3, r3, r2
 2563 006c DB00     		lsls	r3, r3, #3
 2564 006e 0B44     		add	r3, r3, r1
 2565 0070 6833     		adds	r3, r3, #104
 2566 0072 3A68     		ldr	r2, [r7]
 2567 0074 1A60     		str	r2, [r3]
1484:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2568              		.loc 1 1484 0
 2569 0076 1649     		ldr	r1, .L151
 2570 0078 FA68     		ldr	r2, [r7, #12]
 2571 007a 1346     		mov	r3, r2
 2572 007c 5B00     		lsls	r3, r3, #1
 2573 007e 1344     		add	r3, r3, r2
 2574 0080 DB00     		lsls	r3, r3, #3
 2575 0082 0B44     		add	r3, r3, r1
 2576 0084 7033     		adds	r3, r3, #112
 2577 0086 0022     		movs	r2, #0
 2578 0088 1A60     		str	r2, [r3]
1485:../Generated_Code/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2579              		.loc 1 1485 0
 2580 008a 1149     		ldr	r1, .L151
 2581 008c FA68     		ldr	r2, [r7, #12]
 2582 008e 1346     		mov	r3, r2
 2583 0090 5B00     		lsls	r3, r3, #1
 2584 0092 1344     		add	r3, r3, r2
 2585 0094 DB00     		lsls	r3, r3, #3
 2586 0096 0B44     		add	r3, r3, r1
 2587 0098 6833     		adds	r3, r3, #104
 2588 009a 0022     		movs	r2, #0
 2589 009c 5A60     		str	r2, [r3, #4]
 2590              	.L148:
1486:../Generated_Code/SEGGER_RTT.c ****     }
1487:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 2591              		.loc 1 1487 0
 2592 009e 0C49     		ldr	r1, .L151
 2593 00a0 FA68     		ldr	r2, [r7, #12]
 2594 00a2 1346     		mov	r3, r2
 2595 00a4 5B00     		lsls	r3, r3, #1
 2596 00a6 1344     		add	r3, r3, r2
 2597 00a8 DB00     		lsls	r3, r3, #3
 2598 00aa 0B44     		add	r3, r3, r1
 2599 00ac 7033     		adds	r3, r3, #112
 2600 00ae 3A6A     		ldr	r2, [r7, #32]
 2601 00b0 5A60     		str	r2, [r3, #4]
1488:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2602              		.loc 1 1488 0
 2603 00b2 3B69     		ldr	r3, [r7, #16]
 2604              	@ 1488 "../Generated_Code/SEGGER_RTT.c" 1
 2605 00b4 83F31188 		msr   basepri, r3  
 2606              		
 2607              	@ 0 "" 2
 2608              		.thumb
 2609              	.LBE9:
1489:../Generated_Code/SEGGER_RTT.c ****     r =  0;
 2610              		.loc 1 1489 0
 2611 00b8 0023     		movs	r3, #0
 2612 00ba 7B61     		str	r3, [r7, #20]
 2613 00bc 02E0     		b	.L149
 2614              	.L147:
1490:../Generated_Code/SEGGER_RTT.c ****   } else {
1491:../Generated_Code/SEGGER_RTT.c ****     r = -1;
 2615              		.loc 1 1491 0
 2616 00be 4FF0FF33 		mov	r3, #-1
 2617 00c2 7B61     		str	r3, [r7, #20]
 2618              	.L149:
1492:../Generated_Code/SEGGER_RTT.c ****   }
1493:../Generated_Code/SEGGER_RTT.c ****   return r;
 2619              		.loc 1 1493 0
 2620 00c4 7B69     		ldr	r3, [r7, #20]
1494:../Generated_Code/SEGGER_RTT.c **** }
 2621              		.loc 1 1494 0
 2622 00c6 1846     		mov	r0, r3
 2623 00c8 1837     		adds	r7, r7, #24
 2624 00ca BD46     		mov	sp, r7
 2625              		@ sp needed
 2626 00cc 80BD     		pop	{r7, pc}
 2627              	.L152:
 2628 00ce 00BF     		.align	2
 2629              	.L151:
 2630 00d0 00000000 		.word	_SEGGER_RTT
 2631              		.cfi_endproc
 2632              	.LFE23:
 2634              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 2635              		.align	2
 2636              		.global	SEGGER_RTT_SetNameUpBuffer
 2637              		.thumb
 2638              		.thumb_func
 2640              	SEGGER_RTT_SetNameUpBuffer:
 2641              	.LFB24:
1495:../Generated_Code/SEGGER_RTT.c **** 
1496:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1497:../Generated_Code/SEGGER_RTT.c **** *
1498:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1499:../Generated_Code/SEGGER_RTT.c **** *
1500:../Generated_Code/SEGGER_RTT.c **** *  Function description
1501:../Generated_Code/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1502:../Generated_Code/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1503:../Generated_Code/SEGGER_RTT.c **** *
1504:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1505:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1506:../Generated_Code/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1507:../Generated_Code/SEGGER_RTT.c **** *
1508:../Generated_Code/SEGGER_RTT.c **** *  Return value
1509:../Generated_Code/SEGGER_RTT.c **** *    >= 0  O.K.
1510:../Generated_Code/SEGGER_RTT.c **** *     < 0  Error
1511:../Generated_Code/SEGGER_RTT.c **** */
1512:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 2642              		.loc 1 1512 0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 16
 2645              		@ frame_needed = 1, uses_anonymous_args = 0
 2646 0000 80B5     		push	{r7, lr}
 2647              		.cfi_def_cfa_offset 8
 2648              		.cfi_offset 7, -8
 2649              		.cfi_offset 14, -4
 2650 0002 84B0     		sub	sp, sp, #16
 2651              		.cfi_def_cfa_offset 24
 2652 0004 00AF     		add	r7, sp, #0
 2653              		.cfi_def_cfa_register 7
 2654 0006 7860     		str	r0, [r7, #4]
 2655 0008 3960     		str	r1, [r7]
1513:../Generated_Code/SEGGER_RTT.c ****   int r;
1514:../Generated_Code/SEGGER_RTT.c **** 
1515:../Generated_Code/SEGGER_RTT.c ****   INIT();
 2656              		.loc 1 1515 0
 2657 000a 154B     		ldr	r3, .L158
 2658 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2659 000e 002B     		cmp	r3, #0
 2660 0010 01D1     		bne	.L154
 2661              		.loc 1 1515 0 is_stmt 0 discriminator 1
 2662 0012 FFF7FEFF 		bl	_DoInit
 2663              	.L154:
1516:../Generated_Code/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2664              		.loc 1 1516 0 is_stmt 1
 2665 0016 124B     		ldr	r3, .L158
 2666 0018 1B69     		ldr	r3, [r3, #16]
 2667 001a 1A46     		mov	r2, r3
 2668 001c 7B68     		ldr	r3, [r7, #4]
 2669 001e 9A42     		cmp	r2, r3
 2670 0020 16D9     		bls	.L155
 2671              	.LBB10:
1517:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2672              		.loc 1 1517 0
 2673              	@ 1517 "../Generated_Code/SEGGER_RTT.c" 1
 2674 0022 EFF31183 		mrs   r3, basepri  
 2675 0026 4FF03001 		mov   r1, #48     
 2676 002a 81F31188 		msr   basepri, r1  
 2677              		
 2678              	@ 0 "" 2
 2679              		.thumb
 2680 002e BB60     		str	r3, [r7, #8]
1518:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName = sName;
 2681              		.loc 1 1518 0
 2682 0030 0B49     		ldr	r1, .L158
 2683 0032 7B68     		ldr	r3, [r7, #4]
 2684 0034 5A1C     		adds	r2, r3, #1
 2685 0036 1346     		mov	r3, r2
 2686 0038 5B00     		lsls	r3, r3, #1
 2687 003a 1344     		add	r3, r3, r2
 2688 003c DB00     		lsls	r3, r3, #3
 2689 003e 0B44     		add	r3, r3, r1
 2690 0040 3A68     		ldr	r2, [r7]
 2691 0042 1A60     		str	r2, [r3]
1519:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2692              		.loc 1 1519 0
 2693 0044 BB68     		ldr	r3, [r7, #8]
 2694              	@ 1519 "../Generated_Code/SEGGER_RTT.c" 1
 2695 0046 83F31188 		msr   basepri, r3  
 2696              		
 2697              	@ 0 "" 2
 2698              		.thumb
 2699              	.LBE10:
1520:../Generated_Code/SEGGER_RTT.c ****     r =  0;
 2700              		.loc 1 1520 0
 2701 004a 0023     		movs	r3, #0
 2702 004c FB60     		str	r3, [r7, #12]
 2703 004e 02E0     		b	.L156
 2704              	.L155:
1521:../Generated_Code/SEGGER_RTT.c ****   } else {
1522:../Generated_Code/SEGGER_RTT.c ****     r = -1;
 2705              		.loc 1 1522 0
 2706 0050 4FF0FF33 		mov	r3, #-1
 2707 0054 FB60     		str	r3, [r7, #12]
 2708              	.L156:
1523:../Generated_Code/SEGGER_RTT.c ****   }
1524:../Generated_Code/SEGGER_RTT.c ****   return r;
 2709              		.loc 1 1524 0
 2710 0056 FB68     		ldr	r3, [r7, #12]
1525:../Generated_Code/SEGGER_RTT.c **** }
 2711              		.loc 1 1525 0
 2712 0058 1846     		mov	r0, r3
 2713 005a 1037     		adds	r7, r7, #16
 2714 005c BD46     		mov	sp, r7
 2715              		@ sp needed
 2716 005e 80BD     		pop	{r7, pc}
 2717              	.L159:
 2718              		.align	2
 2719              	.L158:
 2720 0060 00000000 		.word	_SEGGER_RTT
 2721              		.cfi_endproc
 2722              	.LFE24:
 2724              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 2725              		.align	2
 2726              		.global	SEGGER_RTT_SetNameDownBuffer
 2727              		.thumb
 2728              		.thumb_func
 2730              	SEGGER_RTT_SetNameDownBuffer:
 2731              	.LFB25:
1526:../Generated_Code/SEGGER_RTT.c **** 
1527:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1528:../Generated_Code/SEGGER_RTT.c **** *
1529:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1530:../Generated_Code/SEGGER_RTT.c **** *
1531:../Generated_Code/SEGGER_RTT.c **** *  Function description
1532:../Generated_Code/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1533:../Generated_Code/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1534:../Generated_Code/SEGGER_RTT.c **** *
1535:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1536:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1537:../Generated_Code/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1538:../Generated_Code/SEGGER_RTT.c **** *
1539:../Generated_Code/SEGGER_RTT.c **** *  Return value
1540:../Generated_Code/SEGGER_RTT.c **** *    >= 0  O.K.
1541:../Generated_Code/SEGGER_RTT.c **** *     < 0  Error
1542:../Generated_Code/SEGGER_RTT.c **** */
1543:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 2732              		.loc 1 1543 0
 2733              		.cfi_startproc
 2734              		@ args = 0, pretend = 0, frame = 16
 2735              		@ frame_needed = 1, uses_anonymous_args = 0
 2736 0000 80B5     		push	{r7, lr}
 2737              		.cfi_def_cfa_offset 8
 2738              		.cfi_offset 7, -8
 2739              		.cfi_offset 14, -4
 2740 0002 84B0     		sub	sp, sp, #16
 2741              		.cfi_def_cfa_offset 24
 2742 0004 00AF     		add	r7, sp, #0
 2743              		.cfi_def_cfa_register 7
 2744 0006 7860     		str	r0, [r7, #4]
 2745 0008 3960     		str	r1, [r7]
1544:../Generated_Code/SEGGER_RTT.c ****   int r;
1545:../Generated_Code/SEGGER_RTT.c **** 
1546:../Generated_Code/SEGGER_RTT.c ****   INIT();
 2746              		.loc 1 1546 0
 2747 000a 154B     		ldr	r3, .L165
 2748 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2749 000e 002B     		cmp	r3, #0
 2750 0010 01D1     		bne	.L161
 2751              		.loc 1 1546 0 is_stmt 0 discriminator 1
 2752 0012 FFF7FEFF 		bl	_DoInit
 2753              	.L161:
1547:../Generated_Code/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2754              		.loc 1 1547 0 is_stmt 1
 2755 0016 124B     		ldr	r3, .L165
 2756 0018 5B69     		ldr	r3, [r3, #20]
 2757 001a 1A46     		mov	r2, r3
 2758 001c 7B68     		ldr	r3, [r7, #4]
 2759 001e 9A42     		cmp	r2, r3
 2760 0020 16D9     		bls	.L162
 2761              	.LBB11:
1548:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2762              		.loc 1 1548 0
 2763              	@ 1548 "../Generated_Code/SEGGER_RTT.c" 1
 2764 0022 EFF31183 		mrs   r3, basepri  
 2765 0026 4FF03001 		mov   r1, #48     
 2766 002a 81F31188 		msr   basepri, r1  
 2767              		
 2768              	@ 0 "" 2
 2769              		.thumb
 2770 002e BB60     		str	r3, [r7, #8]
1549:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName = sName;
 2771              		.loc 1 1549 0
 2772 0030 0B49     		ldr	r1, .L165
 2773 0032 7A68     		ldr	r2, [r7, #4]
 2774 0034 1346     		mov	r3, r2
 2775 0036 5B00     		lsls	r3, r3, #1
 2776 0038 1344     		add	r3, r3, r2
 2777 003a DB00     		lsls	r3, r3, #3
 2778 003c 0B44     		add	r3, r3, r1
 2779 003e 6033     		adds	r3, r3, #96
 2780 0040 3A68     		ldr	r2, [r7]
 2781 0042 1A60     		str	r2, [r3]
1550:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2782              		.loc 1 1550 0
 2783 0044 BB68     		ldr	r3, [r7, #8]
 2784              	@ 1550 "../Generated_Code/SEGGER_RTT.c" 1
 2785 0046 83F31188 		msr   basepri, r3  
 2786              		
 2787              	@ 0 "" 2
 2788              		.thumb
 2789              	.LBE11:
1551:../Generated_Code/SEGGER_RTT.c ****     r =  0;
 2790              		.loc 1 1551 0
 2791 004a 0023     		movs	r3, #0
 2792 004c FB60     		str	r3, [r7, #12]
 2793 004e 02E0     		b	.L163
 2794              	.L162:
1552:../Generated_Code/SEGGER_RTT.c ****   } else {
1553:../Generated_Code/SEGGER_RTT.c ****     r = -1;
 2795              		.loc 1 1553 0
 2796 0050 4FF0FF33 		mov	r3, #-1
 2797 0054 FB60     		str	r3, [r7, #12]
 2798              	.L163:
1554:../Generated_Code/SEGGER_RTT.c ****   }
1555:../Generated_Code/SEGGER_RTT.c ****   return r;
 2799              		.loc 1 1555 0
 2800 0056 FB68     		ldr	r3, [r7, #12]
1556:../Generated_Code/SEGGER_RTT.c **** }
 2801              		.loc 1 1556 0
 2802 0058 1846     		mov	r0, r3
 2803 005a 1037     		adds	r7, r7, #16
 2804 005c BD46     		mov	sp, r7
 2805              		@ sp needed
 2806 005e 80BD     		pop	{r7, pc}
 2807              	.L166:
 2808              		.align	2
 2809              	.L165:
 2810 0060 00000000 		.word	_SEGGER_RTT
 2811              		.cfi_endproc
 2812              	.LFE25:
 2814              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 2815              		.align	2
 2816              		.global	SEGGER_RTT_SetFlagsUpBuffer
 2817              		.thumb
 2818              		.thumb_func
 2820              	SEGGER_RTT_SetFlagsUpBuffer:
 2821              	.LFB26:
1557:../Generated_Code/SEGGER_RTT.c **** 
1558:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1559:../Generated_Code/SEGGER_RTT.c **** *
1560:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1561:../Generated_Code/SEGGER_RTT.c **** *
1562:../Generated_Code/SEGGER_RTT.c **** *  Function description
1563:../Generated_Code/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1564:../Generated_Code/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1565:../Generated_Code/SEGGER_RTT.c **** *
1566:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1567:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1568:../Generated_Code/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1569:../Generated_Code/SEGGER_RTT.c **** *
1570:../Generated_Code/SEGGER_RTT.c **** *  Return value
1571:../Generated_Code/SEGGER_RTT.c **** *    >= 0  O.K.
1572:../Generated_Code/SEGGER_RTT.c **** *     < 0  Error
1573:../Generated_Code/SEGGER_RTT.c **** */
1574:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 2822              		.loc 1 1574 0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 16
 2825              		@ frame_needed = 1, uses_anonymous_args = 0
 2826 0000 80B5     		push	{r7, lr}
 2827              		.cfi_def_cfa_offset 8
 2828              		.cfi_offset 7, -8
 2829              		.cfi_offset 14, -4
 2830 0002 84B0     		sub	sp, sp, #16
 2831              		.cfi_def_cfa_offset 24
 2832 0004 00AF     		add	r7, sp, #0
 2833              		.cfi_def_cfa_register 7
 2834 0006 7860     		str	r0, [r7, #4]
 2835 0008 3960     		str	r1, [r7]
1575:../Generated_Code/SEGGER_RTT.c ****   int r;
1576:../Generated_Code/SEGGER_RTT.c **** 
1577:../Generated_Code/SEGGER_RTT.c ****   INIT();
 2836              		.loc 1 1577 0
 2837 000a 154B     		ldr	r3, .L172
 2838 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2839 000e 002B     		cmp	r3, #0
 2840 0010 01D1     		bne	.L168
 2841              		.loc 1 1577 0 is_stmt 0 discriminator 1
 2842 0012 FFF7FEFF 		bl	_DoInit
 2843              	.L168:
1578:../Generated_Code/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2844              		.loc 1 1578 0 is_stmt 1
 2845 0016 124B     		ldr	r3, .L172
 2846 0018 1B69     		ldr	r3, [r3, #16]
 2847 001a 1A46     		mov	r2, r3
 2848 001c 7B68     		ldr	r3, [r7, #4]
 2849 001e 9A42     		cmp	r2, r3
 2850 0020 16D9     		bls	.L169
 2851              	.LBB12:
1579:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2852              		.loc 1 1579 0
 2853              	@ 1579 "../Generated_Code/SEGGER_RTT.c" 1
 2854 0022 EFF31183 		mrs   r3, basepri  
 2855 0026 4FF03001 		mov   r1, #48     
 2856 002a 81F31188 		msr   basepri, r1  
 2857              		
 2858              	@ 0 "" 2
 2859              		.thumb
 2860 002e BB60     		str	r3, [r7, #8]
1580:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags = Flags;
 2861              		.loc 1 1580 0
 2862 0030 0B49     		ldr	r1, .L172
 2863 0032 7A68     		ldr	r2, [r7, #4]
 2864 0034 1346     		mov	r3, r2
 2865 0036 5B00     		lsls	r3, r3, #1
 2866 0038 1344     		add	r3, r3, r2
 2867 003a DB00     		lsls	r3, r3, #3
 2868 003c 0B44     		add	r3, r3, r1
 2869 003e 2833     		adds	r3, r3, #40
 2870 0040 3A68     		ldr	r2, [r7]
 2871 0042 5A60     		str	r2, [r3, #4]
1581:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2872              		.loc 1 1581 0
 2873 0044 BB68     		ldr	r3, [r7, #8]
 2874              	@ 1581 "../Generated_Code/SEGGER_RTT.c" 1
 2875 0046 83F31188 		msr   basepri, r3  
 2876              		
 2877              	@ 0 "" 2
 2878              		.thumb
 2879              	.LBE12:
1582:../Generated_Code/SEGGER_RTT.c ****     r =  0;
 2880              		.loc 1 1582 0
 2881 004a 0023     		movs	r3, #0
 2882 004c FB60     		str	r3, [r7, #12]
 2883 004e 02E0     		b	.L170
 2884              	.L169:
1583:../Generated_Code/SEGGER_RTT.c ****   } else {
1584:../Generated_Code/SEGGER_RTT.c ****     r = -1;
 2885              		.loc 1 1584 0
 2886 0050 4FF0FF33 		mov	r3, #-1
 2887 0054 FB60     		str	r3, [r7, #12]
 2888              	.L170:
1585:../Generated_Code/SEGGER_RTT.c ****   }
1586:../Generated_Code/SEGGER_RTT.c ****   return r;
 2889              		.loc 1 1586 0
 2890 0056 FB68     		ldr	r3, [r7, #12]
1587:../Generated_Code/SEGGER_RTT.c **** }
 2891              		.loc 1 1587 0
 2892 0058 1846     		mov	r0, r3
 2893 005a 1037     		adds	r7, r7, #16
 2894 005c BD46     		mov	sp, r7
 2895              		@ sp needed
 2896 005e 80BD     		pop	{r7, pc}
 2897              	.L173:
 2898              		.align	2
 2899              	.L172:
 2900 0060 00000000 		.word	_SEGGER_RTT
 2901              		.cfi_endproc
 2902              	.LFE26:
 2904              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 2905              		.align	2
 2906              		.global	SEGGER_RTT_SetFlagsDownBuffer
 2907              		.thumb
 2908              		.thumb_func
 2910              	SEGGER_RTT_SetFlagsDownBuffer:
 2911              	.LFB27:
1588:../Generated_Code/SEGGER_RTT.c **** 
1589:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1590:../Generated_Code/SEGGER_RTT.c **** *
1591:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1592:../Generated_Code/SEGGER_RTT.c **** *
1593:../Generated_Code/SEGGER_RTT.c **** *  Function description
1594:../Generated_Code/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1595:../Generated_Code/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1596:../Generated_Code/SEGGER_RTT.c **** *
1597:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1598:../Generated_Code/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1599:../Generated_Code/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1600:../Generated_Code/SEGGER_RTT.c **** *
1601:../Generated_Code/SEGGER_RTT.c **** *  Return value
1602:../Generated_Code/SEGGER_RTT.c **** *    >= 0  O.K.
1603:../Generated_Code/SEGGER_RTT.c **** *     < 0  Error
1604:../Generated_Code/SEGGER_RTT.c **** */
1605:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 2912              		.loc 1 1605 0
 2913              		.cfi_startproc
 2914              		@ args = 0, pretend = 0, frame = 16
 2915              		@ frame_needed = 1, uses_anonymous_args = 0
 2916 0000 80B5     		push	{r7, lr}
 2917              		.cfi_def_cfa_offset 8
 2918              		.cfi_offset 7, -8
 2919              		.cfi_offset 14, -4
 2920 0002 84B0     		sub	sp, sp, #16
 2921              		.cfi_def_cfa_offset 24
 2922 0004 00AF     		add	r7, sp, #0
 2923              		.cfi_def_cfa_register 7
 2924 0006 7860     		str	r0, [r7, #4]
 2925 0008 3960     		str	r1, [r7]
1606:../Generated_Code/SEGGER_RTT.c ****   int r;
1607:../Generated_Code/SEGGER_RTT.c **** 
1608:../Generated_Code/SEGGER_RTT.c ****   INIT();
 2926              		.loc 1 1608 0
 2927 000a 154B     		ldr	r3, .L179
 2928 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2929 000e 002B     		cmp	r3, #0
 2930 0010 01D1     		bne	.L175
 2931              		.loc 1 1608 0 is_stmt 0 discriminator 1
 2932 0012 FFF7FEFF 		bl	_DoInit
 2933              	.L175:
1609:../Generated_Code/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2934              		.loc 1 1609 0 is_stmt 1
 2935 0016 124B     		ldr	r3, .L179
 2936 0018 5B69     		ldr	r3, [r3, #20]
 2937 001a 1A46     		mov	r2, r3
 2938 001c 7B68     		ldr	r3, [r7, #4]
 2939 001e 9A42     		cmp	r2, r3
 2940 0020 16D9     		bls	.L176
 2941              	.LBB13:
1610:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2942              		.loc 1 1610 0
 2943              	@ 1610 "../Generated_Code/SEGGER_RTT.c" 1
 2944 0022 EFF31183 		mrs   r3, basepri  
 2945 0026 4FF03001 		mov   r1, #48     
 2946 002a 81F31188 		msr   basepri, r1  
 2947              		
 2948              	@ 0 "" 2
 2949              		.thumb
 2950 002e BB60     		str	r3, [r7, #8]
1611:../Generated_Code/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags = Flags;
 2951              		.loc 1 1611 0
 2952 0030 0B49     		ldr	r1, .L179
 2953 0032 7A68     		ldr	r2, [r7, #4]
 2954 0034 1346     		mov	r3, r2
 2955 0036 5B00     		lsls	r3, r3, #1
 2956 0038 1344     		add	r3, r3, r2
 2957 003a DB00     		lsls	r3, r3, #3
 2958 003c 0B44     		add	r3, r3, r1
 2959 003e 7033     		adds	r3, r3, #112
 2960 0040 3A68     		ldr	r2, [r7]
 2961 0042 5A60     		str	r2, [r3, #4]
1612:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2962              		.loc 1 1612 0
 2963 0044 BB68     		ldr	r3, [r7, #8]
 2964              	@ 1612 "../Generated_Code/SEGGER_RTT.c" 1
 2965 0046 83F31188 		msr   basepri, r3  
 2966              		
 2967              	@ 0 "" 2
 2968              		.thumb
 2969              	.LBE13:
1613:../Generated_Code/SEGGER_RTT.c ****     r =  0;
 2970              		.loc 1 1613 0
 2971 004a 0023     		movs	r3, #0
 2972 004c FB60     		str	r3, [r7, #12]
 2973 004e 02E0     		b	.L177
 2974              	.L176:
1614:../Generated_Code/SEGGER_RTT.c ****   } else {
1615:../Generated_Code/SEGGER_RTT.c ****     r = -1;
 2975              		.loc 1 1615 0
 2976 0050 4FF0FF33 		mov	r3, #-1
 2977 0054 FB60     		str	r3, [r7, #12]
 2978              	.L177:
1616:../Generated_Code/SEGGER_RTT.c ****   }
1617:../Generated_Code/SEGGER_RTT.c ****   return r;
 2979              		.loc 1 1617 0
 2980 0056 FB68     		ldr	r3, [r7, #12]
1618:../Generated_Code/SEGGER_RTT.c **** }
 2981              		.loc 1 1618 0
 2982 0058 1846     		mov	r0, r3
 2983 005a 1037     		adds	r7, r7, #16
 2984 005c BD46     		mov	sp, r7
 2985              		@ sp needed
 2986 005e 80BD     		pop	{r7, pc}
 2987              	.L180:
 2988              		.align	2
 2989              	.L179:
 2990 0060 00000000 		.word	_SEGGER_RTT
 2991              		.cfi_endproc
 2992              	.LFE27:
 2994              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 2995              		.align	2
 2996              		.global	SEGGER_RTT_Init
 2997              		.thumb
 2998              		.thumb_func
 3000              	SEGGER_RTT_Init:
 3001              	.LFB28:
1619:../Generated_Code/SEGGER_RTT.c **** 
1620:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1621:../Generated_Code/SEGGER_RTT.c **** *
1622:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1623:../Generated_Code/SEGGER_RTT.c **** *
1624:../Generated_Code/SEGGER_RTT.c **** *  Function description
1625:../Generated_Code/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1626:../Generated_Code/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1627:../Generated_Code/SEGGER_RTT.c **** *
1628:../Generated_Code/SEGGER_RTT.c **** */
1629:../Generated_Code/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3002              		.loc 1 1629 0
 3003              		.cfi_startproc
 3004              		@ args = 0, pretend = 0, frame = 0
 3005              		@ frame_needed = 1, uses_anonymous_args = 0
 3006 0000 80B5     		push	{r7, lr}
 3007              		.cfi_def_cfa_offset 8
 3008              		.cfi_offset 7, -8
 3009              		.cfi_offset 14, -4
 3010 0002 00AF     		add	r7, sp, #0
 3011              		.cfi_def_cfa_register 7
1630:../Generated_Code/SEGGER_RTT.c ****   _DoInit();
 3012              		.loc 1 1630 0
 3013 0004 FFF7FEFF 		bl	_DoInit
1631:../Generated_Code/SEGGER_RTT.c **** }
 3014              		.loc 1 1631 0
 3015 0008 80BD     		pop	{r7, pc}
 3016              		.cfi_endproc
 3017              	.LFE28:
 3019 000a 00BF     		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3020              		.align	2
 3021              		.global	SEGGER_RTT_SetTerminal
 3022              		.thumb
 3023              		.thumb_func
 3025              	SEGGER_RTT_SetTerminal:
 3026              	.LFB29:
1632:../Generated_Code/SEGGER_RTT.c **** 
1633:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1634:../Generated_Code/SEGGER_RTT.c **** *
1635:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1636:../Generated_Code/SEGGER_RTT.c **** *
1637:../Generated_Code/SEGGER_RTT.c **** *  Function description
1638:../Generated_Code/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1639:../Generated_Code/SEGGER_RTT.c **** *
1640:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1641:../Generated_Code/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1642:../Generated_Code/SEGGER_RTT.c **** *
1643:../Generated_Code/SEGGER_RTT.c **** *  Return value
1644:../Generated_Code/SEGGER_RTT.c **** *    >= 0  O.K.
1645:../Generated_Code/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1646:../Generated_Code/SEGGER_RTT.c **** */
1647:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (char TerminalId) {
 3027              		.loc 1 1647 0
 3028              		.cfi_startproc
 3029              		@ args = 0, pretend = 0, frame = 32
 3030              		@ frame_needed = 1, uses_anonymous_args = 0
 3031 0000 80B5     		push	{r7, lr}
 3032              		.cfi_def_cfa_offset 8
 3033              		.cfi_offset 7, -8
 3034              		.cfi_offset 14, -4
 3035 0002 88B0     		sub	sp, sp, #32
 3036              		.cfi_def_cfa_offset 40
 3037 0004 00AF     		add	r7, sp, #0
 3038              		.cfi_def_cfa_register 7
 3039 0006 0346     		mov	r3, r0
 3040 0008 FB71     		strb	r3, [r7, #7]
1648:../Generated_Code/SEGGER_RTT.c ****   unsigned char         ac[2];
1649:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1650:../Generated_Code/SEGGER_RTT.c ****   unsigned Avail;
1651:../Generated_Code/SEGGER_RTT.c ****   int r;
1652:../Generated_Code/SEGGER_RTT.c ****   //
1653:../Generated_Code/SEGGER_RTT.c ****   INIT();
 3041              		.loc 1 1653 0
 3042 000a 264B     		ldr	r3, .L190
 3043 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3044 000e 002B     		cmp	r3, #0
 3045 0010 01D1     		bne	.L183
 3046              		.loc 1 1653 0 is_stmt 0 discriminator 1
 3047 0012 FFF7FEFF 		bl	_DoInit
 3048              	.L183:
1654:../Generated_Code/SEGGER_RTT.c ****   //
1655:../Generated_Code/SEGGER_RTT.c ****   r = 0;
 3049              		.loc 1 1655 0 is_stmt 1
 3050 0016 0023     		movs	r3, #0
 3051 0018 FB61     		str	r3, [r7, #28]
1656:../Generated_Code/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3052              		.loc 1 1656 0
 3053 001a FF23     		movs	r3, #255
 3054 001c 3B73     		strb	r3, [r7, #12]
1657:../Generated_Code/SEGGER_RTT.c ****   if ((unsigned char)TerminalId < (unsigned char)sizeof(_aTerminalId)) { // We only support a certa
 3055              		.loc 1 1657 0
 3056 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3057 0020 0F2B     		cmp	r3, #15
 3058 0022 36D8     		bhi	.L184
1658:../Generated_Code/SEGGER_RTT.c ****     ac[1] = _aTerminalId[(unsigned char)TerminalId];
 3059              		.loc 1 1658 0
 3060 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3061 0026 204A     		ldr	r2, .L190+4
 3062 0028 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3063 002a 7B73     		strb	r3, [r7, #13]
1659:../Generated_Code/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];    // Buffer 0 is always reserved for terminal I/O, so we can use 
 3064              		.loc 1 1659 0
 3065 002c 1F4B     		ldr	r3, .L190+8
 3066 002e BB61     		str	r3, [r7, #24]
 3067              	.LBB14:
1660:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();    // Lock to make sure that no other task is writing into buffer, while we 
 3068              		.loc 1 1660 0
 3069              	@ 1660 "../Generated_Code/SEGGER_RTT.c" 1
 3070 0030 EFF31183 		mrs   r3, basepri  
 3071 0034 4FF03001 		mov   r1, #48     
 3072 0038 81F31188 		msr   basepri, r1  
 3073              		
 3074              	@ 0 "" 2
 3075              		.thumb
 3076 003c 7B61     		str	r3, [r7, #20]
1661:../Generated_Code/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3077              		.loc 1 1661 0
 3078 003e BB69     		ldr	r3, [r7, #24]
 3079 0040 5B69     		ldr	r3, [r3, #20]
 3080 0042 03F00303 		and	r3, r3, #3
 3081 0046 022B     		cmp	r3, #2
 3082 0048 0AD1     		bne	.L185
1662:../Generated_Code/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
 3083              		.loc 1 1662 0
 3084 004a 194B     		ldr	r3, .L190+12
 3085 004c FA79     		ldrb	r2, [r7, #7]
 3086 004e 1A70     		strb	r2, [r3]
1663:../Generated_Code/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3087              		.loc 1 1663 0
 3088 0050 07F10C03 		add	r3, r7, #12
 3089 0054 B869     		ldr	r0, [r7, #24]
 3090 0056 1946     		mov	r1, r3
 3091 0058 0222     		movs	r2, #2
 3092 005a FFF7FEFF 		bl	_WriteBlocking
 3093 005e 14E0     		b	.L186
 3094              	.L185:
1664:../Generated_Code/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1665:../Generated_Code/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3095              		.loc 1 1665 0
 3096 0060 B869     		ldr	r0, [r7, #24]
 3097 0062 FFF7FEFF 		bl	_GetAvailWriteSpace
 3098 0066 3861     		str	r0, [r7, #16]
1666:../Generated_Code/SEGGER_RTT.c ****       if (Avail >= 2) {
 3099              		.loc 1 1666 0
 3100 0068 3B69     		ldr	r3, [r7, #16]
 3101 006a 012B     		cmp	r3, #1
 3102 006c 0AD9     		bls	.L187
1667:../Generated_Code/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
 3103              		.loc 1 1667 0
 3104 006e 104B     		ldr	r3, .L190+12
 3105 0070 FA79     		ldrb	r2, [r7, #7]
 3106 0072 1A70     		strb	r2, [r3]
1668:../Generated_Code/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3107              		.loc 1 1668 0
 3108 0074 07F10C03 		add	r3, r7, #12
 3109 0078 B869     		ldr	r0, [r7, #24]
 3110 007a 1946     		mov	r1, r3
 3111 007c 0222     		movs	r2, #2
 3112 007e FFF7FEFF 		bl	_WriteNoCheck
 3113 0082 02E0     		b	.L186
 3114              	.L187:
1669:../Generated_Code/SEGGER_RTT.c ****       } else {
1670:../Generated_Code/SEGGER_RTT.c ****         r = -1;
 3115              		.loc 1 1670 0
 3116 0084 4FF0FF33 		mov	r3, #-1
 3117 0088 FB61     		str	r3, [r7, #28]
 3118              	.L186:
1671:../Generated_Code/SEGGER_RTT.c ****       }
1672:../Generated_Code/SEGGER_RTT.c ****     }
1673:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3119              		.loc 1 1673 0 discriminator 1
 3120 008a 7B69     		ldr	r3, [r7, #20]
 3121              	@ 1673 "../Generated_Code/SEGGER_RTT.c" 1
 3122 008c 83F31188 		msr   basepri, r3  
 3123              		
 3124              	@ 0 "" 2
 3125              		.thumb
 3126              	.LBE14:
 3127 0090 02E0     		b	.L188
 3128              	.L184:
1674:../Generated_Code/SEGGER_RTT.c ****   } else {
1675:../Generated_Code/SEGGER_RTT.c ****     r = -1;
 3129              		.loc 1 1675 0
 3130 0092 4FF0FF33 		mov	r3, #-1
 3131 0096 FB61     		str	r3, [r7, #28]
 3132              	.L188:
1676:../Generated_Code/SEGGER_RTT.c ****   }
1677:../Generated_Code/SEGGER_RTT.c ****   return r;
 3133              		.loc 1 1677 0
 3134 0098 FB69     		ldr	r3, [r7, #28]
1678:../Generated_Code/SEGGER_RTT.c **** }
 3135              		.loc 1 1678 0
 3136 009a 1846     		mov	r0, r3
 3137 009c 2037     		adds	r7, r7, #32
 3138 009e BD46     		mov	sp, r7
 3139              		@ sp needed
 3140 00a0 80BD     		pop	{r7, pc}
 3141              	.L191:
 3142 00a2 00BF     		.align	2
 3143              	.L190:
 3144 00a4 00000000 		.word	_SEGGER_RTT
 3145 00a8 00000000 		.word	_aTerminalId
 3146 00ac 18000000 		.word	_SEGGER_RTT+24
 3147 00b0 00000000 		.word	_ActiveTerminal
 3148              		.cfi_endproc
 3149              	.LFE29:
 3151              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3152              		.align	2
 3153              		.global	SEGGER_RTT_TerminalOut
 3154              		.thumb
 3155              		.thumb_func
 3157              	SEGGER_RTT_TerminalOut:
 3158              	.LFB30:
1679:../Generated_Code/SEGGER_RTT.c **** 
1680:../Generated_Code/SEGGER_RTT.c **** /*********************************************************************
1681:../Generated_Code/SEGGER_RTT.c **** *
1682:../Generated_Code/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1683:../Generated_Code/SEGGER_RTT.c **** *
1684:../Generated_Code/SEGGER_RTT.c **** *  Function description
1685:../Generated_Code/SEGGER_RTT.c **** *    Writes a string to the given terminal
1686:../Generated_Code/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1687:../Generated_Code/SEGGER_RTT.c **** *
1688:../Generated_Code/SEGGER_RTT.c **** *  Parameters
1689:../Generated_Code/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1690:../Generated_Code/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1691:../Generated_Code/SEGGER_RTT.c **** *
1692:../Generated_Code/SEGGER_RTT.c **** *  Return value
1693:../Generated_Code/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1694:../Generated_Code/SEGGER_RTT.c **** *     < 0 - Error.
1695:../Generated_Code/SEGGER_RTT.c **** *
1696:../Generated_Code/SEGGER_RTT.c **** */
1697:../Generated_Code/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (char TerminalId, const char* s) {
 3159              		.loc 1 1697 0
 3160              		.cfi_startproc
 3161              		@ args = 0, pretend = 0, frame = 32
 3162              		@ frame_needed = 1, uses_anonymous_args = 0
 3163 0000 80B5     		push	{r7, lr}
 3164              		.cfi_def_cfa_offset 8
 3165              		.cfi_offset 7, -8
 3166              		.cfi_offset 14, -4
 3167 0002 88B0     		sub	sp, sp, #32
 3168              		.cfi_def_cfa_offset 40
 3169 0004 00AF     		add	r7, sp, #0
 3170              		.cfi_def_cfa_register 7
 3171 0006 0346     		mov	r3, r0
 3172 0008 3960     		str	r1, [r7]
 3173 000a FB71     		strb	r3, [r7, #7]
1698:../Generated_Code/SEGGER_RTT.c ****   int                   Status;
1699:../Generated_Code/SEGGER_RTT.c ****   unsigned              FragLen;
1700:../Generated_Code/SEGGER_RTT.c ****   unsigned              Avail;
1701:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1702:../Generated_Code/SEGGER_RTT.c ****   //
1703:../Generated_Code/SEGGER_RTT.c ****   INIT();
 3174              		.loc 1 1703 0
 3175 000c 434B     		ldr	r3, .L207
 3176 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3177 0010 002B     		cmp	r3, #0
 3178 0012 01D1     		bne	.L193
 3179              		.loc 1 1703 0 is_stmt 0 discriminator 1
 3180 0014 FFF7FEFF 		bl	_DoInit
 3181              	.L193:
1704:../Generated_Code/SEGGER_RTT.c ****   //
1705:../Generated_Code/SEGGER_RTT.c ****   // Validate terminal ID.
1706:../Generated_Code/SEGGER_RTT.c ****   //
1707:../Generated_Code/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3182              		.loc 1 1707 0 is_stmt 1
 3183 0018 97F90730 		ldrsb	r3, [r7, #7]
 3184 001c 0F2B     		cmp	r3, #15
 3185 001e 74DC     		bgt	.L194
1708:../Generated_Code/SEGGER_RTT.c ****     //
1709:../Generated_Code/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1710:../Generated_Code/SEGGER_RTT.c ****     //
1711:../Generated_Code/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];
 3186              		.loc 1 1711 0
 3187 0020 3F4B     		ldr	r3, .L207+4
 3188 0022 BB61     		str	r3, [r7, #24]
1712:../Generated_Code/SEGGER_RTT.c ****     //
1713:../Generated_Code/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1714:../Generated_Code/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1715:../Generated_Code/SEGGER_RTT.c ****     //
1716:../Generated_Code/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3189              		.loc 1 1716 0
 3190 0024 3868     		ldr	r0, [r7]
 3191 0026 FFF7FEFF 		bl	strlen
 3192 002a 7861     		str	r0, [r7, #20]
 3193              	.LBB15:
1717:../Generated_Code/SEGGER_RTT.c ****     //
1718:../Generated_Code/SEGGER_RTT.c ****     // How we output depends upon the mode...
1719:../Generated_Code/SEGGER_RTT.c ****     //
1720:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3194              		.loc 1 1720 0
 3195              	@ 1720 "../Generated_Code/SEGGER_RTT.c" 1
 3196 002c EFF31183 		mrs   r3, basepri  
 3197 0030 4FF03001 		mov   r1, #48     
 3198 0034 81F31188 		msr   basepri, r1  
 3199              		
 3200              	@ 0 "" 2
 3201              		.thumb
 3202 0038 3B61     		str	r3, [r7, #16]
1721:../Generated_Code/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3203              		.loc 1 1721 0
 3204 003a B869     		ldr	r0, [r7, #24]
 3205 003c FFF7FEFF 		bl	_GetAvailWriteSpace
 3206 0040 F860     		str	r0, [r7, #12]
1722:../Generated_Code/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3207              		.loc 1 1722 0
 3208 0042 BB69     		ldr	r3, [r7, #24]
 3209 0044 5B69     		ldr	r3, [r3, #20]
 3210 0046 03F00303 		and	r3, r3, #3
 3211 004a 012B     		cmp	r3, #1
 3212 004c 20D0     		beq	.L196
 3213 004e 012B     		cmp	r3, #1
 3214 0050 02D3     		bcc	.L197
 3215 0052 022B     		cmp	r3, #2
 3216 0054 3DD0     		beq	.L198
 3217 0056 50E0     		b	.L206
 3218              	.L197:
1723:../Generated_Code/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1724:../Generated_Code/SEGGER_RTT.c ****       //
1725:../Generated_Code/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1726:../Generated_Code/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1727:../Generated_Code/SEGGER_RTT.c ****       //
1728:../Generated_Code/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
 3219              		.loc 1 1728 0
 3220 0058 7B69     		ldr	r3, [r7, #20]
 3221 005a 1A1D     		adds	r2, r3, #4
 3222 005c FB68     		ldr	r3, [r7, #12]
 3223 005e 9A42     		cmp	r2, r3
 3224 0060 02D9     		bls	.L199
1729:../Generated_Code/SEGGER_RTT.c ****         Status = 0;
 3225              		.loc 1 1729 0
 3226 0062 0023     		movs	r3, #0
 3227 0064 FB61     		str	r3, [r7, #28]
1730:../Generated_Code/SEGGER_RTT.c ****       } else {
1731:../Generated_Code/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1732:../Generated_Code/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1733:../Generated_Code/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1734:../Generated_Code/SEGGER_RTT.c ****       }
1735:../Generated_Code/SEGGER_RTT.c ****       break;
 3228              		.loc 1 1735 0
 3229 0066 4CE0     		b	.L201
 3230              	.L199:
1731:../Generated_Code/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
 3231              		.loc 1 1731 0
 3232 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3233 006a B869     		ldr	r0, [r7, #24]
 3234 006c 1946     		mov	r1, r3
 3235 006e FFF7FEFF 		bl	_PostTerminalSwitch
1732:../Generated_Code/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3236              		.loc 1 1732 0
 3237 0072 B869     		ldr	r0, [r7, #24]
 3238 0074 3968     		ldr	r1, [r7]
 3239 0076 7A69     		ldr	r2, [r7, #20]
 3240 0078 FFF7FEFF 		bl	_WriteBlocking
 3241 007c 0346     		mov	r3, r0
 3242 007e FB61     		str	r3, [r7, #28]
1733:../Generated_Code/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3243              		.loc 1 1733 0
 3244 0080 284B     		ldr	r3, .L207+8
 3245 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3246 0084 DBB2     		uxtb	r3, r3
 3247 0086 B869     		ldr	r0, [r7, #24]
 3248 0088 1946     		mov	r1, r3
 3249 008a FFF7FEFF 		bl	_PostTerminalSwitch
 3250              		.loc 1 1735 0
 3251 008e 38E0     		b	.L201
 3252              	.L196:
1736:../Generated_Code/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1737:../Generated_Code/SEGGER_RTT.c ****       //
1738:../Generated_Code/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
1739:../Generated_Code/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1740:../Generated_Code/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
1741:../Generated_Code/SEGGER_RTT.c ****       //
1742:../Generated_Code/SEGGER_RTT.c ****       if (Avail < 4u) {
 3253              		.loc 1 1742 0
 3254 0090 FB68     		ldr	r3, [r7, #12]
 3255 0092 032B     		cmp	r3, #3
 3256 0094 03D8     		bhi	.L202
1743:../Generated_Code/SEGGER_RTT.c ****         Status = -1;
 3257              		.loc 1 1743 0
 3258 0096 4FF0FF33 		mov	r3, #-1
 3259 009a FB61     		str	r3, [r7, #28]
1744:../Generated_Code/SEGGER_RTT.c ****       } else {
1745:../Generated_Code/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1746:../Generated_Code/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1747:../Generated_Code/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1748:../Generated_Code/SEGGER_RTT.c ****       }
1749:../Generated_Code/SEGGER_RTT.c ****       break;
 3260              		.loc 1 1749 0
 3261 009c 31E0     		b	.L201
 3262              	.L202:
1745:../Generated_Code/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
 3263              		.loc 1 1745 0
 3264 009e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3265 00a0 B869     		ldr	r0, [r7, #24]
 3266 00a2 1946     		mov	r1, r3
 3267 00a4 FFF7FEFF 		bl	_PostTerminalSwitch
1746:../Generated_Code/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3268              		.loc 1 1746 0
 3269 00a8 FB68     		ldr	r3, [r7, #12]
 3270 00aa 1A1F     		subs	r2, r3, #4
 3271 00ac 7B69     		ldr	r3, [r7, #20]
 3272 00ae 9A42     		cmp	r2, r3
 3273 00b0 38BF     		it	cc
 3274 00b2 1346     		movcc	r3, r2
 3275 00b4 B869     		ldr	r0, [r7, #24]
 3276 00b6 3968     		ldr	r1, [r7]
 3277 00b8 1A46     		mov	r2, r3
 3278 00ba FFF7FEFF 		bl	_WriteBlocking
 3279 00be 0346     		mov	r3, r0
 3280 00c0 FB61     		str	r3, [r7, #28]
1747:../Generated_Code/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3281              		.loc 1 1747 0
 3282 00c2 184B     		ldr	r3, .L207+8
 3283 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3284 00c6 DBB2     		uxtb	r3, r3
 3285 00c8 B869     		ldr	r0, [r7, #24]
 3286 00ca 1946     		mov	r1, r3
 3287 00cc FFF7FEFF 		bl	_PostTerminalSwitch
 3288              		.loc 1 1749 0
 3289 00d0 17E0     		b	.L201
 3290              	.L198:
1750:../Generated_Code/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1751:../Generated_Code/SEGGER_RTT.c ****       //
1752:../Generated_Code/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
1753:../Generated_Code/SEGGER_RTT.c ****       //
1754:../Generated_Code/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
 3291              		.loc 1 1754 0
 3292 00d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3293 00d4 B869     		ldr	r0, [r7, #24]
 3294 00d6 1946     		mov	r1, r3
 3295 00d8 FFF7FEFF 		bl	_PostTerminalSwitch
1755:../Generated_Code/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3296              		.loc 1 1755 0
 3297 00dc B869     		ldr	r0, [r7, #24]
 3298 00de 3968     		ldr	r1, [r7]
 3299 00e0 7A69     		ldr	r2, [r7, #20]
 3300 00e2 FFF7FEFF 		bl	_WriteBlocking
 3301 00e6 0346     		mov	r3, r0
 3302 00e8 FB61     		str	r3, [r7, #28]
1756:../Generated_Code/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3303              		.loc 1 1756 0
 3304 00ea 0E4B     		ldr	r3, .L207+8
 3305 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3306 00ee DBB2     		uxtb	r3, r3
 3307 00f0 B869     		ldr	r0, [r7, #24]
 3308 00f2 1946     		mov	r1, r3
 3309 00f4 FFF7FEFF 		bl	_PostTerminalSwitch
1757:../Generated_Code/SEGGER_RTT.c ****       break;
 3310              		.loc 1 1757 0
 3311 00f8 03E0     		b	.L201
 3312              	.L206:
1758:../Generated_Code/SEGGER_RTT.c ****     default:
1759:../Generated_Code/SEGGER_RTT.c ****       Status = -1;
 3313              		.loc 1 1759 0
 3314 00fa 4FF0FF33 		mov	r3, #-1
 3315 00fe FB61     		str	r3, [r7, #28]
1760:../Generated_Code/SEGGER_RTT.c ****       break;
 3316              		.loc 1 1760 0
 3317 0100 00BF     		nop
 3318              	.L201:
1761:../Generated_Code/SEGGER_RTT.c ****     }
1762:../Generated_Code/SEGGER_RTT.c ****     //
1763:../Generated_Code/SEGGER_RTT.c ****     // Finish up.
1764:../Generated_Code/SEGGER_RTT.c ****     //
1765:../Generated_Code/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3319              		.loc 1 1765 0
 3320 0102 3B69     		ldr	r3, [r7, #16]
 3321              	@ 1765 "../Generated_Code/SEGGER_RTT.c" 1
 3322 0104 83F31188 		msr   basepri, r3  
 3323              		
 3324              	@ 0 "" 2
 3325              		.thumb
 3326              	.LBE15:
 3327 0108 02E0     		b	.L204
 3328              	.L194:
1766:../Generated_Code/SEGGER_RTT.c ****   } else {
1767:../Generated_Code/SEGGER_RTT.c ****     Status = -1;
 3329              		.loc 1 1767 0
 3330 010a 4FF0FF33 		mov	r3, #-1
 3331 010e FB61     		str	r3, [r7, #28]
 3332              	.L204:
1768:../Generated_Code/SEGGER_RTT.c ****   }
1769:../Generated_Code/SEGGER_RTT.c ****   return Status;
 3333              		.loc 1 1769 0
 3334 0110 FB69     		ldr	r3, [r7, #28]
1770:../Generated_Code/SEGGER_RTT.c **** }
 3335              		.loc 1 1770 0
 3336 0112 1846     		mov	r0, r3
 3337 0114 2037     		adds	r7, r7, #32
 3338 0116 BD46     		mov	sp, r7
 3339              		@ sp needed
 3340 0118 80BD     		pop	{r7, pc}
 3341              	.L208:
 3342 011a 00BF     		.align	2
 3343              	.L207:
 3344 011c 00000000 		.word	_SEGGER_RTT
 3345 0120 18000000 		.word	_SEGGER_RTT+24
 3346 0124 00000000 		.word	_ActiveTerminal
 3347              		.cfi_endproc
 3348              	.LFE30:
 3350              		.section	.text.SEGGER_RTT_GetUpBufferFreeSize,"ax",%progbits
 3351              		.align	2
 3352              		.global	SEGGER_RTT_GetUpBufferFreeSize
 3353              		.thumb
 3354              		.thumb_func
 3356              	SEGGER_RTT_GetUpBufferFreeSize:
 3357              	.LFB31:
1771:../Generated_Code/SEGGER_RTT.c **** 
1772:../Generated_Code/SEGGER_RTT.c **** #if 1 /* << EST: extra function */
1773:../Generated_Code/SEGGER_RTT.c **** unsigned int SEGGER_RTT_GetUpBufferFreeSize(unsigned int bufferIndex) { /* << EST */
 3358              		.loc 1 1773 0
 3359              		.cfi_startproc
 3360              		@ args = 0, pretend = 0, frame = 16
 3361              		@ frame_needed = 1, uses_anonymous_args = 0
 3362 0000 80B5     		push	{r7, lr}
 3363              		.cfi_def_cfa_offset 8
 3364              		.cfi_offset 7, -8
 3365              		.cfi_offset 14, -4
 3366 0002 84B0     		sub	sp, sp, #16
 3367              		.cfi_def_cfa_offset 24
 3368 0004 00AF     		add	r7, sp, #0
 3369              		.cfi_def_cfa_register 7
 3370 0006 7860     		str	r0, [r7, #4]
1774:../Generated_Code/SEGGER_RTT.c ****   unsigned int avail;
1775:../Generated_Code/SEGGER_RTT.c **** 
1776:../Generated_Code/SEGGER_RTT.c ****   INIT();
 3371              		.loc 1 1776 0
 3372 0008 104B     		ldr	r3, .L212
 3373 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3374 000c 002B     		cmp	r3, #0
 3375 000e 01D1     		bne	.L210
 3376              		.loc 1 1776 0 is_stmt 0 discriminator 1
 3377 0010 FFF7FEFF 		bl	_DoInit
 3378              	.L210:
 3379              	.LBB16:
1777:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 3380              		.loc 1 1777 0 is_stmt 1
 3381              	@ 1777 "../Generated_Code/SEGGER_RTT.c" 1
 3382 0014 EFF31183 		mrs   r3, basepri  
 3383 0018 4FF03001 		mov   r1, #48     
 3384 001c 81F31188 		msr   basepri, r1  
 3385              		
 3386              	@ 0 "" 2
 3387              		.thumb
 3388 0020 FB60     		str	r3, [r7, #12]
1778:../Generated_Code/SEGGER_RTT.c ****   avail = _GetAvailWriteSpace(&_SEGGER_RTT.aUp[bufferIndex]);
 3389              		.loc 1 1778 0
 3390 0022 7B68     		ldr	r3, [r7, #4]
 3391 0024 5A1C     		adds	r2, r3, #1
 3392 0026 1346     		mov	r3, r2
 3393 0028 5B00     		lsls	r3, r3, #1
 3394 002a 1344     		add	r3, r3, r2
 3395 002c DB00     		lsls	r3, r3, #3
 3396 002e 074A     		ldr	r2, .L212
 3397 0030 1344     		add	r3, r3, r2
 3398 0032 1846     		mov	r0, r3
 3399 0034 FFF7FEFF 		bl	_GetAvailWriteSpace
 3400 0038 B860     		str	r0, [r7, #8]
1779:../Generated_Code/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 3401              		.loc 1 1779 0
 3402 003a FB68     		ldr	r3, [r7, #12]
 3403              	@ 1779 "../Generated_Code/SEGGER_RTT.c" 1
 3404 003c 83F31188 		msr   basepri, r3  
 3405              		
 3406              	@ 0 "" 2
 3407              		.thumb
 3408              	.LBE16:
1780:../Generated_Code/SEGGER_RTT.c ****   return avail;
 3409              		.loc 1 1780 0
 3410 0040 BB68     		ldr	r3, [r7, #8]
1781:../Generated_Code/SEGGER_RTT.c **** }
 3411              		.loc 1 1781 0
 3412 0042 1846     		mov	r0, r3
 3413 0044 1037     		adds	r7, r7, #16
 3414 0046 BD46     		mov	sp, r7
 3415              		@ sp needed
 3416 0048 80BD     		pop	{r7, pc}
 3417              	.L213:
 3418 004a 00BF     		.align	2
 3419              	.L212:
 3420 004c 00000000 		.word	_SEGGER_RTT
 3421              		.cfi_endproc
 3422              	.LFE31:
 3424              		.text
 3425              	.Letext0:
 3426              		.file 2 "../Generated_Code/SEGGER_RTT.h"
DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:21     .data._aTerminalId:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:24     .data._aTerminalId:00000000 _aTerminalId
                            *COM*:000000a8 _SEGGER_RTT
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:43     .bss._acUpBuffer:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:46     .bss._acUpBuffer:00000000 _acUpBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:49     .bss._acDownBuffer:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:52     .bss._acDownBuffer:00000000 _acDownBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:57     .bss._ActiveTerminal:00000000 _ActiveTerminal
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:58     .bss._ActiveTerminal:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:60     .rodata:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:70     .text._DoInit:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:74     .text._DoInit:00000000 _DoInit
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:176    .text._DoInit:0000008c $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:186    .text._WriteBlocking:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:190    .text._WriteBlocking:00000000 _WriteBlocking
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:318    .text._WriteNoCheck:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:322    .text._WriteNoCheck:00000000 _WriteNoCheck
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:412    .text._PostTerminalSwitch:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:416    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:455    .text._PostTerminalSwitch:0000002c $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:460    .text._GetAvailWriteSpace:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:464    .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:523    .text.SEGGER_RTT_ReadNoLock:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:528    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:700    .text.SEGGER_RTT_ReadNoLock:00000100 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:705    .text.SEGGER_RTT_Read:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:710    .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:763    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:768    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:950    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000110 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:955    .text.SEGGER_RTT_WriteSkipNoLock:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:960    .text.SEGGER_RTT_WriteSkipNoLock:00000000 SEGGER_RTT_WriteSkipNoLock
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1147   .text.SEGGER_RTT_WriteSkipNoLock:00000120 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1152   .text.SEGGER_RTT_WriteNoLock:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1157   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1269   .text.SEGGER_RTT_WriteNoLock:00000098 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1274   .text.SEGGER_RTT_Write:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1279   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1339   .text.SEGGER_RTT_Write:00000044 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1344   .text.SEGGER_RTT_WriteString:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1349   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1385   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1390   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1471   .text.SEGGER_RTT_PutCharSkipNoLock:0000006c $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1476   .text.SEGGER_RTT_PutCharSkip:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1481   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1587   .text.SEGGER_RTT_PutCharSkip:00000088 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1592   .text.SEGGER_RTT_PutChar:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1597   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1718   .text.SEGGER_RTT_PutChar:0000009c $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1723   .text.SEGGER_RTT_GetKey:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1728   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1776   .text.SEGGER_RTT_WaitKey:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1781   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1815   .text.SEGGER_RTT_HasKey:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1820   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1872   .text.SEGGER_RTT_HasKey:00000038 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1877   .text.SEGGER_RTT_HasData:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1882   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1926   .text.SEGGER_RTT_HasData:00000038 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1931   .text.SEGGER_RTT_HasDataUp:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1936   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1980   .text.SEGGER_RTT_HasDataUp:00000034 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1985   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:1990   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2153   .text.SEGGER_RTT_AllocDownBuffer:000000f0 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2158   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2163   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2326   .text.SEGGER_RTT_AllocUpBuffer:000000f0 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2331   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2336   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2478   .text.SEGGER_RTT_ConfigUpBuffer:000000d0 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2483   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2488   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2630   .text.SEGGER_RTT_ConfigDownBuffer:000000d0 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2635   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2640   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2720   .text.SEGGER_RTT_SetNameUpBuffer:00000060 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2725   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2730   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2810   .text.SEGGER_RTT_SetNameDownBuffer:00000060 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2815   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2820   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2900   .text.SEGGER_RTT_SetFlagsUpBuffer:00000060 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2905   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2910   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2990   .text.SEGGER_RTT_SetFlagsDownBuffer:00000060 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:2995   .text.SEGGER_RTT_Init:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3000   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3020   .text.SEGGER_RTT_SetTerminal:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3025   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3144   .text.SEGGER_RTT_SetTerminal:000000a4 $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3152   .text.SEGGER_RTT_TerminalOut:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3157   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3344   .text.SEGGER_RTT_TerminalOut:0000011c $d
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3351   .text.SEGGER_RTT_GetUpBufferFreeSize:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3356   .text.SEGGER_RTT_GetUpBufferFreeSize:00000000 SEGGER_RTT_GetUpBufferFreeSize
C:\Users\Aron\AppData\Local\Temp\ccRXBbN6.s:3420   .text.SEGGER_RTT_GetUpBufferFreeSize:0000004c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22dcf9ce9babd46e5ea858ea4400d115
                           .group:00000000 wm4.MCUC1config.h.9.0bb8fec22d828f19e34a4cdf9951d555
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.PE_Types.h.68.de7a315b6e4c635a9a7a45ae6ec20b08
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.60.44eca2ca2a72148441f11b3e43b344a9
                           .group:00000000 wm4.MK22F12.h.59.83dcc0895f45d7d67f2182a38aa7f04f
                           .group:00000000 wm4.Cpu.h.66.9574a96471c5a4e92ddf5418cbdcf9a5
                           .group:00000000 wm4.RTT1config.h.9.558b8e72f87fd463160ae39e042c41f1
                           .group:00000000 wm4.SEGGER_RTT_Conf.h.89.1297b7334cc7c3f82a26ff405afddf8b
                           .group:00000000 wm4.SEGGER_RTT.h.170.7440a65c6e414fb2a8040073a0d6a958
                           .group:00000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.56.a2d04de9d47039852021e66fca39bb58
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c

UNDEFINED SYMBOLS
memcpy
strlen
