   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"RefCnt.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  21              		.align	2
  24              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  25 0000 00000000 		.space	4
  26              		.section	.text.RefCnt_Init,"ax",%progbits
  27              		.align	2
  28              		.global	RefCnt_Init
  29              		.thumb
  30              		.thumb_func
  32              	RefCnt_Init:
  33              	.LFB0:
  34              		.file 1 "../Generated_Code/RefCnt.c"
   1:../Generated_Code/RefCnt.c **** /* ###################################################################
   2:../Generated_Code/RefCnt.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/RefCnt.c **** **     Filename    : RefCnt.c
   4:../Generated_Code/RefCnt.c **** **     Project     : TEAM_Robot
   5:../Generated_Code/RefCnt.c **** **     Processor   : MK22FX512VLK12
   6:../Generated_Code/RefCnt.c **** **     Component   : TimerUnit_LDD
   7:../Generated_Code/RefCnt.c **** **     Version     : Component 01.164, Driver 01.11, CPU db: 3.00.000
   8:../Generated_Code/RefCnt.c **** **     Repository  : Kinetis
   9:../Generated_Code/RefCnt.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/RefCnt.c **** **     Date/Time   : 2018-09-28, 15:03, # CodeGen: 0
  11:../Generated_Code/RefCnt.c **** **     Abstract    :
  12:../Generated_Code/RefCnt.c **** **          This TimerUnit component provides a low level API for unified hardware access across
  13:../Generated_Code/RefCnt.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
  14:../Generated_Code/RefCnt.c **** **     Settings    :
  15:../Generated_Code/RefCnt.c **** **          Component name                                 : RefCnt
  16:../Generated_Code/RefCnt.c **** **          Module name                                    : FTM2
  17:../Generated_Code/RefCnt.c **** **          Counter                                        : FTM2_CNT
  18:../Generated_Code/RefCnt.c **** **          Counter direction                              : Up
  19:../Generated_Code/RefCnt.c **** **          Counter width                                  : 16 bits
  20:../Generated_Code/RefCnt.c **** **          Value type                                     : Optimal
  21:../Generated_Code/RefCnt.c **** **          Input clock source                             : Internal
  22:../Generated_Code/RefCnt.c **** **            Counter frequency                            : 1.875 MHz
  23:../Generated_Code/RefCnt.c **** **          Counter restart                                : On-overrun
  24:../Generated_Code/RefCnt.c **** **            Overrun period                               : 34.952533 ms
  25:../Generated_Code/RefCnt.c **** **            Interrupt                                    : Disabled
  26:../Generated_Code/RefCnt.c **** **          Channel list                                   : 0
  27:../Generated_Code/RefCnt.c **** **          Initialization                                 : 
  28:../Generated_Code/RefCnt.c **** **            Enabled in init. code                        : yes
  29:../Generated_Code/RefCnt.c **** **            Auto initialization                          : no
  30:../Generated_Code/RefCnt.c **** **            Event mask                                   : 
  31:../Generated_Code/RefCnt.c **** **              OnCounterRestart                           : Disabled
  32:../Generated_Code/RefCnt.c **** **              OnChannel0                                 : Disabled
  33:../Generated_Code/RefCnt.c **** **              OnChannel1                                 : Disabled
  34:../Generated_Code/RefCnt.c **** **              OnChannel2                                 : Disabled
  35:../Generated_Code/RefCnt.c **** **              OnChannel3                                 : Disabled
  36:../Generated_Code/RefCnt.c **** **              OnChannel4                                 : Disabled
  37:../Generated_Code/RefCnt.c **** **              OnChannel5                                 : Disabled
  38:../Generated_Code/RefCnt.c **** **              OnChannel6                                 : Disabled
  39:../Generated_Code/RefCnt.c **** **              OnChannel7                                 : Disabled
  40:../Generated_Code/RefCnt.c **** **          CPU clock/configuration selection              : 
  41:../Generated_Code/RefCnt.c **** **            Clock configuration 0                        : This component enabled
  42:../Generated_Code/RefCnt.c **** **            Clock configuration 1                        : This component disabled
  43:../Generated_Code/RefCnt.c **** **            Clock configuration 2                        : This component disabled
  44:../Generated_Code/RefCnt.c **** **            Clock configuration 3                        : This component disabled
  45:../Generated_Code/RefCnt.c **** **            Clock configuration 4                        : This component disabled
  46:../Generated_Code/RefCnt.c **** **            Clock configuration 5                        : This component disabled
  47:../Generated_Code/RefCnt.c **** **            Clock configuration 6                        : This component disabled
  48:../Generated_Code/RefCnt.c **** **            Clock configuration 7                        : This component disabled
  49:../Generated_Code/RefCnt.c **** **     Contents    :
  50:../Generated_Code/RefCnt.c **** **         Init            - LDD_TDeviceData* RefCnt_Init(LDD_TUserData *UserDataPtr);
  51:../Generated_Code/RefCnt.c **** **         Deinit          - void RefCnt_Deinit(LDD_TDeviceData *DeviceDataPtr);
  52:../Generated_Code/RefCnt.c **** **         ResetCounter    - LDD_TError RefCnt_ResetCounter(LDD_TDeviceData *DeviceDataPtr);
  53:../Generated_Code/RefCnt.c **** **         GetCounterValue - RefCnt_TValueType RefCnt_GetCounterValue(LDD_TDeviceData *DeviceDataPt
  54:../Generated_Code/RefCnt.c **** **
  55:../Generated_Code/RefCnt.c **** **     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
  56:../Generated_Code/RefCnt.c **** **     All Rights Reserved.
  57:../Generated_Code/RefCnt.c **** **     
  58:../Generated_Code/RefCnt.c **** **     Redistribution and use in source and binary forms, with or without modification,
  59:../Generated_Code/RefCnt.c **** **     are permitted provided that the following conditions are met:
  60:../Generated_Code/RefCnt.c **** **     
  61:../Generated_Code/RefCnt.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  62:../Generated_Code/RefCnt.c **** **       of conditions and the following disclaimer.
  63:../Generated_Code/RefCnt.c **** **     
  64:../Generated_Code/RefCnt.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  65:../Generated_Code/RefCnt.c **** **       list of conditions and the following disclaimer in the documentation and/or
  66:../Generated_Code/RefCnt.c **** **       other materials provided with the distribution.
  67:../Generated_Code/RefCnt.c **** **     
  68:../Generated_Code/RefCnt.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  69:../Generated_Code/RefCnt.c **** **       contributors may be used to endorse or promote products derived from this
  70:../Generated_Code/RefCnt.c **** **       software without specific prior written permission.
  71:../Generated_Code/RefCnt.c **** **     
  72:../Generated_Code/RefCnt.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  73:../Generated_Code/RefCnt.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  74:../Generated_Code/RefCnt.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  75:../Generated_Code/RefCnt.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  76:../Generated_Code/RefCnt.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  77:../Generated_Code/RefCnt.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  78:../Generated_Code/RefCnt.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  79:../Generated_Code/RefCnt.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  80:../Generated_Code/RefCnt.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  81:../Generated_Code/RefCnt.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  82:../Generated_Code/RefCnt.c **** **     
  83:../Generated_Code/RefCnt.c **** **     http: www.freescale.com
  84:../Generated_Code/RefCnt.c **** **     mail: support@freescale.com
  85:../Generated_Code/RefCnt.c **** ** ###################################################################*/
  86:../Generated_Code/RefCnt.c **** /*!
  87:../Generated_Code/RefCnt.c **** ** @file RefCnt.c
  88:../Generated_Code/RefCnt.c **** ** @version 01.11
  89:../Generated_Code/RefCnt.c **** ** @brief
  90:../Generated_Code/RefCnt.c **** **          This TimerUnit component provides a low level API for unified hardware access across
  91:../Generated_Code/RefCnt.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
  92:../Generated_Code/RefCnt.c **** */         
  93:../Generated_Code/RefCnt.c **** /*!
  94:../Generated_Code/RefCnt.c **** **  @addtogroup RefCnt_module RefCnt module documentation
  95:../Generated_Code/RefCnt.c **** **  @{
  96:../Generated_Code/RefCnt.c **** */         
  97:../Generated_Code/RefCnt.c **** 
  98:../Generated_Code/RefCnt.c **** /* MODULE RefCnt. */
  99:../Generated_Code/RefCnt.c **** 
 100:../Generated_Code/RefCnt.c **** #include "RefCnt.h"
 101:../Generated_Code/RefCnt.c **** /* {Default RTOS Adapter} No RTOS includes */
 102:../Generated_Code/RefCnt.c **** #include "IO_Map.h"
 103:../Generated_Code/RefCnt.c **** 
 104:../Generated_Code/RefCnt.c **** #ifdef __cplusplus
 105:../Generated_Code/RefCnt.c **** extern "C" {
 106:../Generated_Code/RefCnt.c **** #endif 
 107:../Generated_Code/RefCnt.c **** 
 108:../Generated_Code/RefCnt.c **** 
 109:../Generated_Code/RefCnt.c **** typedef struct {
 110:../Generated_Code/RefCnt.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
 111:../Generated_Code/RefCnt.c **** } RefCnt_TDeviceData;
 112:../Generated_Code/RefCnt.c **** 
 113:../Generated_Code/RefCnt.c **** typedef RefCnt_TDeviceData *RefCnt_TDeviceDataPtr; /* Pointer to the device data structure. */
 114:../Generated_Code/RefCnt.c **** 
 115:../Generated_Code/RefCnt.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 116:../Generated_Code/RefCnt.c **** static RefCnt_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 117:../Generated_Code/RefCnt.c **** 
 118:../Generated_Code/RefCnt.c **** 
 119:../Generated_Code/RefCnt.c **** /* Internal method prototypes */
 120:../Generated_Code/RefCnt.c **** /*
 121:../Generated_Code/RefCnt.c **** ** ===================================================================
 122:../Generated_Code/RefCnt.c **** **     Method      :  RefCnt_Init (component TimerUnit_LDD)
 123:../Generated_Code/RefCnt.c **** */
 124:../Generated_Code/RefCnt.c **** /*!
 125:../Generated_Code/RefCnt.c **** **     @brief
 126:../Generated_Code/RefCnt.c **** **         Initializes the device. Allocates memory for the device data
 127:../Generated_Code/RefCnt.c **** **         structure, allocates interrupt vectors and sets interrupt
 128:../Generated_Code/RefCnt.c **** **         priority, sets pin routing, sets timing, etc. If the
 129:../Generated_Code/RefCnt.c **** **         property ["Enable in init. code"] is set to "yes" value then
 130:../Generated_Code/RefCnt.c **** **         the device is also enabled (see the description of the
 131:../Generated_Code/RefCnt.c **** **         [Enable] method). In this case the [Enable] method is not
 132:../Generated_Code/RefCnt.c **** **         necessary and needn't to be generated. This method can be
 133:../Generated_Code/RefCnt.c **** **         called only once. Before the second call of Init the [Deinit]
 134:../Generated_Code/RefCnt.c **** **         must be called first.
 135:../Generated_Code/RefCnt.c **** **     @param
 136:../Generated_Code/RefCnt.c **** **         UserDataPtr     - Pointer to the user or
 137:../Generated_Code/RefCnt.c **** **                           RTOS specific data. This pointer will be
 138:../Generated_Code/RefCnt.c **** **                           passed as an event or callback parameter.
 139:../Generated_Code/RefCnt.c **** **     @return
 140:../Generated_Code/RefCnt.c **** **                         - Pointer to the dynamically allocated private
 141:../Generated_Code/RefCnt.c **** **                           structure or NULL if there was an error.
 142:../Generated_Code/RefCnt.c **** */
 143:../Generated_Code/RefCnt.c **** /* ===================================================================*/
 144:../Generated_Code/RefCnt.c **** LDD_TDeviceData* RefCnt_Init(LDD_TUserData *UserDataPtr)
 145:../Generated_Code/RefCnt.c **** {
  35              		.loc 1 145 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 16
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  40 0000 80B4     		push	{r7}
  41              		.cfi_def_cfa_offset 4
  42              		.cfi_offset 7, -4
  43 0002 85B0     		sub	sp, sp, #20
  44              		.cfi_def_cfa_offset 24
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  47 0006 7860     		str	r0, [r7, #4]
 146:../Generated_Code/RefCnt.c ****   /* Allocate device structure */
 147:../Generated_Code/RefCnt.c ****   RefCnt_TDeviceData *DeviceDataPrv;
 148:../Generated_Code/RefCnt.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 149:../Generated_Code/RefCnt.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  48              		.loc 1 149 0
  49 0008 194B     		ldr	r3, .L3
  50 000a FB60     		str	r3, [r7, #12]
 150:../Generated_Code/RefCnt.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  51              		.loc 1 150 0
  52 000c FB68     		ldr	r3, [r7, #12]
  53 000e 7A68     		ldr	r2, [r7, #4]
  54 0010 1A60     		str	r2, [r3]
 151:../Generated_Code/RefCnt.c ****   /* SIM_SCGC3: FTM2=1 */
 152:../Generated_Code/RefCnt.c ****   SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;
  55              		.loc 1 152 0
  56 0012 1849     		ldr	r1, .L3+4
  57 0014 174B     		ldr	r3, .L3+4
  58 0016 03F58153 		add	r3, r3, #4128
  59 001a 1033     		adds	r3, r3, #16
  60 001c 1B68     		ldr	r3, [r3]
  61 001e 43F08072 		orr	r2, r3, #16777216
  62 0022 01F58153 		add	r3, r1, #4128
  63 0026 1033     		adds	r3, r3, #16
  64 0028 1A60     		str	r2, [r3]
 153:../Generated_Code/RefCnt.c ****   /* FTM2_MODE: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 154:../Generated_Code/RefCnt.c ****   FTM2_MODE = (FTM_MODE_FAULTM(0x00) | FTM_MODE_WPDIS_MASK); /* Set up mode register */
  65              		.loc 1 154 0
  66 002a 134B     		ldr	r3, .L3+8
  67 002c 0422     		movs	r2, #4
  68 002e 5A65     		str	r2, [r3, #84]
 155:../Generated_Code/RefCnt.c ****   /* FTM2_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 156:../Generated_Code/RefCnt.c ****   FTM2_SC = (FTM_SC_CLKS(0x00) | FTM_SC_PS(0x00)); /* Clear status and control register */
  69              		.loc 1 156 0
  70 0030 114B     		ldr	r3, .L3+8
  71 0032 0022     		movs	r2, #0
  72 0034 1A60     		str	r2, [r3]
 157:../Generated_Code/RefCnt.c ****   /* FTM2_CNTIN: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,IN
 158:../Generated_Code/RefCnt.c ****   FTM2_CNTIN = FTM_CNTIN_INIT(0x00);   /* Clear counter initial register */
  73              		.loc 1 158 0
  74 0036 104B     		ldr	r3, .L3+8
  75 0038 0022     		movs	r2, #0
  76 003a DA64     		str	r2, [r3, #76]
 159:../Generated_Code/RefCnt.c ****   /* FTM2_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUN
 160:../Generated_Code/RefCnt.c ****   FTM2_CNT = FTM_CNT_COUNT(0x00);      /* Reset counter register */
  77              		.loc 1 160 0
  78 003c 0E4B     		ldr	r3, .L3+8
  79 003e 0022     		movs	r2, #0
  80 0040 5A60     		str	r2, [r3, #4]
 161:../Generated_Code/RefCnt.c ****   /* FTM2_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 162:../Generated_Code/RefCnt.c ****   FTM2_C0SC = 0x00U;                   /* Clear channel status and control register */
  81              		.loc 1 162 0
  82 0042 0D4B     		ldr	r3, .L3+8
  83 0044 0022     		movs	r2, #0
  84 0046 DA60     		str	r2, [r3, #12]
 163:../Generated_Code/RefCnt.c ****   /* FTM2_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 164:../Generated_Code/RefCnt.c ****   FTM2_C1SC = 0x00U;                   /* Clear channel status and control register */
  85              		.loc 1 164 0
  86 0048 0B4B     		ldr	r3, .L3+8
  87 004a 0022     		movs	r2, #0
  88 004c 5A61     		str	r2, [r3, #20]
 165:../Generated_Code/RefCnt.c ****   /* FTM2_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=
 166:../Generated_Code/RefCnt.c ****   FTM2_MOD = FTM_MOD_MOD(0xFFFF);      /* Set up modulo register */
  89              		.loc 1 166 0
  90 004e 0A4B     		ldr	r3, .L3+8
  91 0050 4FF6FF72 		movw	r2, #65535
  92 0054 9A60     		str	r2, [r3, #8]
 167:../Generated_Code/RefCnt.c ****   /* FTM2_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 168:../Generated_Code/RefCnt.c ****   FTM2_SC = (FTM_SC_CLKS(0x01) | FTM_SC_PS(0x05)); /* Set up status and control register */
  93              		.loc 1 168 0
  94 0056 084B     		ldr	r3, .L3+8
  95 0058 0D22     		movs	r2, #13
  96 005a 1A60     		str	r2, [r3]
 169:../Generated_Code/RefCnt.c ****   /* Registration of the device structure */
 170:../Generated_Code/RefCnt.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_RefCnt_ID,DeviceDataPrv);
  97              		.loc 1 170 0
  98 005c 074B     		ldr	r3, .L3+12
  99 005e FA68     		ldr	r2, [r7, #12]
 100 0060 5A61     		str	r2, [r3, #20]
 171:../Generated_Code/RefCnt.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
 101              		.loc 1 171 0
 102 0062 FB68     		ldr	r3, [r7, #12]
 172:../Generated_Code/RefCnt.c **** }
 103              		.loc 1 172 0
 104 0064 1846     		mov	r0, r3
 105 0066 1437     		adds	r7, r7, #20
 106 0068 BD46     		mov	sp, r7
 107              		@ sp needed
 108 006a 5DF8047B 		ldr	r7, [sp], #4
 109 006e 7047     		bx	lr
 110              	.L4:
 111              		.align	2
 112              	.L3:
 113 0070 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 114 0074 00700440 		.word	1074032640
 115 0078 00800B40 		.word	1074495488
 116 007c 00000000 		.word	PE_LDD_DeviceDataList
 117              		.cfi_endproc
 118              	.LFE0:
 120              		.section	.text.RefCnt_Deinit,"ax",%progbits
 121              		.align	2
 122              		.global	RefCnt_Deinit
 123              		.thumb
 124              		.thumb_func
 126              	RefCnt_Deinit:
 127              	.LFB1:
 173:../Generated_Code/RefCnt.c **** 
 174:../Generated_Code/RefCnt.c **** /*
 175:../Generated_Code/RefCnt.c **** ** ===================================================================
 176:../Generated_Code/RefCnt.c **** **     Method      :  RefCnt_Deinit (component TimerUnit_LDD)
 177:../Generated_Code/RefCnt.c **** */
 178:../Generated_Code/RefCnt.c **** /*!
 179:../Generated_Code/RefCnt.c **** **     @brief
 180:../Generated_Code/RefCnt.c **** **         Deinitializes the device. Switches off the device, frees the
 181:../Generated_Code/RefCnt.c **** **         device data structure memory, interrupts vectors, etc.
 182:../Generated_Code/RefCnt.c **** **     @param
 183:../Generated_Code/RefCnt.c **** **         DeviceDataPtr   - Device data structure
 184:../Generated_Code/RefCnt.c **** **                           pointer returned by Init method
 185:../Generated_Code/RefCnt.c **** */
 186:../Generated_Code/RefCnt.c **** /* ===================================================================*/
 187:../Generated_Code/RefCnt.c **** void RefCnt_Deinit(LDD_TDeviceData *DeviceDataPtr)
 188:../Generated_Code/RefCnt.c **** {
 128              		.loc 1 188 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 16
 131              		@ frame_needed = 1, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133 0000 80B4     		push	{r7}
 134              		.cfi_def_cfa_offset 4
 135              		.cfi_offset 7, -4
 136 0002 85B0     		sub	sp, sp, #20
 137              		.cfi_def_cfa_offset 24
 138 0004 00AF     		add	r7, sp, #0
 139              		.cfi_def_cfa_register 7
 140 0006 7860     		str	r0, [r7, #4]
 189:../Generated_Code/RefCnt.c ****   RefCnt_TDeviceData *DeviceDataPrv = (RefCnt_TDeviceData *)DeviceDataPtr;
 141              		.loc 1 189 0
 142 0008 7B68     		ldr	r3, [r7, #4]
 143 000a FB60     		str	r3, [r7, #12]
 190:../Generated_Code/RefCnt.c **** 
 191:../Generated_Code/RefCnt.c ****   (void)DeviceDataPrv;
 192:../Generated_Code/RefCnt.c ****   FTM_PDD_SelectPrescalerSource(FTM2_BASE_PTR, FTM_PDD_DISABLED);
 144              		.loc 1 192 0
 145 000c 064B     		ldr	r3, .L6
 146 000e 064A     		ldr	r2, .L6
 147 0010 1268     		ldr	r2, [r2]
 148 0012 22F09802 		bic	r2, r2, #152
 149 0016 1A60     		str	r2, [r3]
 193:../Generated_Code/RefCnt.c ****   /* Unregistration of the device structure */
 194:../Generated_Code/RefCnt.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_RefCnt_ID);
 150              		.loc 1 194 0
 151 0018 044B     		ldr	r3, .L6+4
 152 001a 0022     		movs	r2, #0
 153 001c 5A61     		str	r2, [r3, #20]
 195:../Generated_Code/RefCnt.c ****   /* Deallocation of the device structure */
 196:../Generated_Code/RefCnt.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 197:../Generated_Code/RefCnt.c **** }
 154              		.loc 1 197 0
 155 001e 1437     		adds	r7, r7, #20
 156 0020 BD46     		mov	sp, r7
 157              		@ sp needed
 158 0022 5DF8047B 		ldr	r7, [sp], #4
 159 0026 7047     		bx	lr
 160              	.L7:
 161              		.align	2
 162              	.L6:
 163 0028 00800B40 		.word	1074495488
 164 002c 00000000 		.word	PE_LDD_DeviceDataList
 165              		.cfi_endproc
 166              	.LFE1:
 168              		.section	.text.RefCnt_ResetCounter,"ax",%progbits
 169              		.align	2
 170              		.global	RefCnt_ResetCounter
 171              		.thumb
 172              		.thumb_func
 174              	RefCnt_ResetCounter:
 175              	.LFB2:
 198:../Generated_Code/RefCnt.c **** 
 199:../Generated_Code/RefCnt.c **** /*
 200:../Generated_Code/RefCnt.c **** ** ===================================================================
 201:../Generated_Code/RefCnt.c **** **     Method      :  RefCnt_ResetCounter (component TimerUnit_LDD)
 202:../Generated_Code/RefCnt.c **** */
 203:../Generated_Code/RefCnt.c **** /*!
 204:../Generated_Code/RefCnt.c **** **     @brief
 205:../Generated_Code/RefCnt.c **** **         Resets counter. If counter is counting up then it is set to
 206:../Generated_Code/RefCnt.c **** **         zero. If counter is counting down then counter is updated to
 207:../Generated_Code/RefCnt.c **** **         the reload value.
 208:../Generated_Code/RefCnt.c **** **         The method is not available if HW doesn't allow resetting of
 209:../Generated_Code/RefCnt.c **** **         the counter.
 210:../Generated_Code/RefCnt.c **** **     @param
 211:../Generated_Code/RefCnt.c **** **         DeviceDataPtr   - Device data structure
 212:../Generated_Code/RefCnt.c **** **                           pointer returned by [Init] method.
 213:../Generated_Code/RefCnt.c **** **     @return
 214:../Generated_Code/RefCnt.c **** **                         - Error code, possible codes:
 215:../Generated_Code/RefCnt.c **** **                           ERR_OK - OK 
 216:../Generated_Code/RefCnt.c **** **                           ERR_SPEED - The component does not work in
 217:../Generated_Code/RefCnt.c **** **                           the active clock configuration
 218:../Generated_Code/RefCnt.c **** */
 219:../Generated_Code/RefCnt.c **** /* ===================================================================*/
 220:../Generated_Code/RefCnt.c **** LDD_TError RefCnt_ResetCounter(LDD_TDeviceData *DeviceDataPtr)
 221:../Generated_Code/RefCnt.c **** {
 176              		.loc 1 221 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 8
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181 0000 80B4     		push	{r7}
 182              		.cfi_def_cfa_offset 4
 183              		.cfi_offset 7, -4
 184 0002 83B0     		sub	sp, sp, #12
 185              		.cfi_def_cfa_offset 16
 186 0004 00AF     		add	r7, sp, #0
 187              		.cfi_def_cfa_register 7
 188 0006 7860     		str	r0, [r7, #4]
 222:../Generated_Code/RefCnt.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 223:../Generated_Code/RefCnt.c ****   FTM_PDD_InitializeCounter(FTM2_BASE_PTR);
 189              		.loc 1 223 0
 190 0008 044B     		ldr	r3, .L10
 191 000a 0022     		movs	r2, #0
 192 000c 5A60     		str	r2, [r3, #4]
 224:../Generated_Code/RefCnt.c ****   return ERR_OK;                       /* OK */
 193              		.loc 1 224 0
 194 000e 0023     		movs	r3, #0
 225:../Generated_Code/RefCnt.c **** }
 195              		.loc 1 225 0
 196 0010 1846     		mov	r0, r3
 197 0012 0C37     		adds	r7, r7, #12
 198 0014 BD46     		mov	sp, r7
 199              		@ sp needed
 200 0016 5DF8047B 		ldr	r7, [sp], #4
 201 001a 7047     		bx	lr
 202              	.L11:
 203              		.align	2
 204              	.L10:
 205 001c 00800B40 		.word	1074495488
 206              		.cfi_endproc
 207              	.LFE2:
 209              		.section	.text.RefCnt_GetCounterValue,"ax",%progbits
 210              		.align	2
 211              		.global	RefCnt_GetCounterValue
 212              		.thumb
 213              		.thumb_func
 215              	RefCnt_GetCounterValue:
 216              	.LFB3:
 226:../Generated_Code/RefCnt.c **** 
 227:../Generated_Code/RefCnt.c **** /*
 228:../Generated_Code/RefCnt.c **** ** ===================================================================
 229:../Generated_Code/RefCnt.c **** **     Method      :  RefCnt_GetCounterValue (component TimerUnit_LDD)
 230:../Generated_Code/RefCnt.c **** */
 231:../Generated_Code/RefCnt.c **** /*!
 232:../Generated_Code/RefCnt.c **** **     @brief
 233:../Generated_Code/RefCnt.c **** **         Returns the content of counter register. This method can be
 234:../Generated_Code/RefCnt.c **** **         used both if counter is enabled and if counter is disabled.
 235:../Generated_Code/RefCnt.c **** **         The method is not available if HW doesn't allow reading of
 236:../Generated_Code/RefCnt.c **** **         the counter.
 237:../Generated_Code/RefCnt.c **** **     @param
 238:../Generated_Code/RefCnt.c **** **         DeviceDataPtr   - Device data structure
 239:../Generated_Code/RefCnt.c **** **                           pointer returned by [Init] method.
 240:../Generated_Code/RefCnt.c **** **     @return
 241:../Generated_Code/RefCnt.c **** **                         - Counter value (number of counted ticks).
 242:../Generated_Code/RefCnt.c **** */
 243:../Generated_Code/RefCnt.c **** /* ===================================================================*/
 244:../Generated_Code/RefCnt.c **** RefCnt_TValueType RefCnt_GetCounterValue(LDD_TDeviceData *DeviceDataPtr)
 245:../Generated_Code/RefCnt.c **** {
 217              		.loc 1 245 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 8
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 222 0000 80B4     		push	{r7}
 223              		.cfi_def_cfa_offset 4
 224              		.cfi_offset 7, -4
 225 0002 83B0     		sub	sp, sp, #12
 226              		.cfi_def_cfa_offset 16
 227 0004 00AF     		add	r7, sp, #0
 228              		.cfi_def_cfa_register 7
 229 0006 7860     		str	r0, [r7, #4]
 246:../Generated_Code/RefCnt.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 247:../Generated_Code/RefCnt.c ****   return (RefCnt_TValueType)FTM_PDD_ReadCounterReg(FTM2_BASE_PTR);
 230              		.loc 1 247 0
 231 0008 034B     		ldr	r3, .L14
 232 000a 5B68     		ldr	r3, [r3, #4]
 248:../Generated_Code/RefCnt.c **** }
 233              		.loc 1 248 0
 234 000c 1846     		mov	r0, r3
 235 000e 0C37     		adds	r7, r7, #12
 236 0010 BD46     		mov	sp, r7
 237              		@ sp needed
 238 0012 5DF8047B 		ldr	r7, [sp], #4
 239 0016 7047     		bx	lr
 240              	.L15:
 241              		.align	2
 242              	.L14:
 243 0018 00800B40 		.word	1074495488
 244              		.cfi_endproc
 245              	.LFE3:
 247              		.text
 248              	.Letext0:
 249              		.file 2 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 250              		.file 3 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\stdint.h"
 251              		.file 4 "../Generated_Code/PE_Types.h"
 252              		.file 5 "C:/INTRO_HS18/IntroAronAlex/TEAM_Robot/Static_Code/IO_Map/MK22F12.h"
 253              		.file 6 "../Generated_Code/RefCnt.h"
DEFINED SYMBOLS
                            *ABS*:00000000 RefCnt.c
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:24     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:27     .text.RefCnt_Init:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:32     .text.RefCnt_Init:00000000 RefCnt_Init
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:113    .text.RefCnt_Init:00000070 $d
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:121    .text.RefCnt_Deinit:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:126    .text.RefCnt_Deinit:00000000 RefCnt_Deinit
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:163    .text.RefCnt_Deinit:00000028 $d
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:169    .text.RefCnt_ResetCounter:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:174    .text.RefCnt_ResetCounter:00000000 RefCnt_ResetCounter
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:205    .text.RefCnt_ResetCounter:0000001c $d
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:210    .text.RefCnt_GetCounterValue:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:215    .text.RefCnt_GetCounterValue:00000000 RefCnt_GetCounterValue
C:\Users\Aron\AppData\Local\Temp\ccFr7tZh.s:243    .text.RefCnt_GetCounterValue:00000018 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22dcf9ce9babd46e5ea858ea4400d115
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.PE_Types.h.68.de7a315b6e4c635a9a7a45ae6ec20b08
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.60.44eca2ca2a72148441f11b3e43b344a9
                           .group:00000000 wm4.MK22F12.h.59.83dcc0895f45d7d67f2182a38aa7f04f
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.FTM_PDD.h.110.491886a8b1fe2265fe9c01e9493601bd
                           .group:00000000 wm4.Cpu.h.66.9574a96471c5a4e92ddf5418cbdcf9a5
                           .group:00000000 wm4.RefCnt.h.119.51c58ca380cb781004d49e143bcf25ce

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
