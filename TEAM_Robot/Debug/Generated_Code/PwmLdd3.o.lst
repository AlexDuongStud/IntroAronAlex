   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"PwmLdd3.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  21              		.align	2
  24              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  25 0000 00000000 		.space	12
  25      00000000 
  25      00000000 
  26              		.section	.text.PwmLdd3_Init,"ax",%progbits
  27              		.align	2
  28              		.global	PwmLdd3_Init
  29              		.thumb
  30              		.thumb_func
  32              	PwmLdd3_Init:
  33              	.LFB0:
  34              		.file 1 "../Generated_Code/PwmLdd3.c"
   1:../Generated_Code/PwmLdd3.c **** /* ###################################################################
   2:../Generated_Code/PwmLdd3.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/PwmLdd3.c **** **     Filename    : PwmLdd3.c
   4:../Generated_Code/PwmLdd3.c **** **     Project     : TEAM_Robot
   5:../Generated_Code/PwmLdd3.c **** **     Processor   : MK22FX512VLK12
   6:../Generated_Code/PwmLdd3.c **** **     Component   : PWM_LDD
   7:../Generated_Code/PwmLdd3.c **** **     Version     : Component 01.014, Driver 01.03, CPU db: 3.00.000
   8:../Generated_Code/PwmLdd3.c **** **     Repository  : Kinetis
   9:../Generated_Code/PwmLdd3.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/PwmLdd3.c **** **     Date/Time   : 2018-09-28, 15:03, # CodeGen: 0
  11:../Generated_Code/PwmLdd3.c **** **     Abstract    :
  12:../Generated_Code/PwmLdd3.c **** **          This component implements a pulse-width modulation generator
  13:../Generated_Code/PwmLdd3.c **** **          that generates signal with variable duty and fixed cycle.
  14:../Generated_Code/PwmLdd3.c **** **          This PWM component provides a high level API for unified
  15:../Generated_Code/PwmLdd3.c **** **          hardware access to various timer devices using the TimerUnit
  16:../Generated_Code/PwmLdd3.c **** **          component.
  17:../Generated_Code/PwmLdd3.c **** **     Settings    :
  18:../Generated_Code/PwmLdd3.c **** **          Component name                                 : PwmLdd3
  19:../Generated_Code/PwmLdd3.c **** **          Period device                                  : FTM0_MOD
  20:../Generated_Code/PwmLdd3.c **** **          Duty device                                    : FTM0_C2V
  21:../Generated_Code/PwmLdd3.c **** **          Output pin                                     : PTC5/LLWU_P9/SPI0_SCK/LPTMR0_ALT2/I2S0
  22:../Generated_Code/PwmLdd3.c **** **          Output pin signal                              : PWM_RIGHT_J10_03
  23:../Generated_Code/PwmLdd3.c **** **          Counter                                        : FTM0_CNT
  24:../Generated_Code/PwmLdd3.c **** **          Interrupt service/event                        : Disabled
  25:../Generated_Code/PwmLdd3.c **** **          Period                                         : 20 kHz
  26:../Generated_Code/PwmLdd3.c **** **          Starting pulse width                           : 0 µs
  27:../Generated_Code/PwmLdd3.c **** **          Initial polarity                               : low
  28:../Generated_Code/PwmLdd3.c **** **          Initialization                                 : 
  29:../Generated_Code/PwmLdd3.c **** **            Enabled in init. code                        : no
  30:../Generated_Code/PwmLdd3.c **** **            Auto initialization                          : yes
  31:../Generated_Code/PwmLdd3.c **** **            Event mask                                   : 
  32:../Generated_Code/PwmLdd3.c **** **              OnEnd                                      : Disabled
  33:../Generated_Code/PwmLdd3.c **** **          CPU clock/configuration selection              : 
  34:../Generated_Code/PwmLdd3.c **** **            Clock configuration 0                        : This component enabled
  35:../Generated_Code/PwmLdd3.c **** **            Clock configuration 1                        : This component disabled
  36:../Generated_Code/PwmLdd3.c **** **            Clock configuration 2                        : This component disabled
  37:../Generated_Code/PwmLdd3.c **** **            Clock configuration 3                        : This component disabled
  38:../Generated_Code/PwmLdd3.c **** **            Clock configuration 4                        : This component disabled
  39:../Generated_Code/PwmLdd3.c **** **            Clock configuration 5                        : This component disabled
  40:../Generated_Code/PwmLdd3.c **** **            Clock configuration 6                        : This component disabled
  41:../Generated_Code/PwmLdd3.c **** **            Clock configuration 7                        : This component disabled
  42:../Generated_Code/PwmLdd3.c **** **          Referenced components                          : 
  43:../Generated_Code/PwmLdd3.c **** **            Linked component                             : MOTTU
  44:../Generated_Code/PwmLdd3.c **** **     Contents    :
  45:../Generated_Code/PwmLdd3.c **** **         Init       - LDD_TDeviceData* PwmLdd3_Init(LDD_TUserData *UserDataPtr);
  46:../Generated_Code/PwmLdd3.c **** **         Deinit     - void PwmLdd3_Deinit(LDD_TDeviceData *DeviceDataPtr);
  47:../Generated_Code/PwmLdd3.c **** **         Enable     - LDD_TError PwmLdd3_Enable(LDD_TDeviceData *DeviceDataPtr);
  48:../Generated_Code/PwmLdd3.c **** **         Disable    - LDD_TError PwmLdd3_Disable(LDD_TDeviceData *DeviceDataPtr);
  49:../Generated_Code/PwmLdd3.c **** **         SetRatio16 - LDD_TError PwmLdd3_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Rati
  50:../Generated_Code/PwmLdd3.c **** **
  51:../Generated_Code/PwmLdd3.c **** **     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
  52:../Generated_Code/PwmLdd3.c **** **     All Rights Reserved.
  53:../Generated_Code/PwmLdd3.c **** **     
  54:../Generated_Code/PwmLdd3.c **** **     Redistribution and use in source and binary forms, with or without modification,
  55:../Generated_Code/PwmLdd3.c **** **     are permitted provided that the following conditions are met:
  56:../Generated_Code/PwmLdd3.c **** **     
  57:../Generated_Code/PwmLdd3.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  58:../Generated_Code/PwmLdd3.c **** **       of conditions and the following disclaimer.
  59:../Generated_Code/PwmLdd3.c **** **     
  60:../Generated_Code/PwmLdd3.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  61:../Generated_Code/PwmLdd3.c **** **       list of conditions and the following disclaimer in the documentation and/or
  62:../Generated_Code/PwmLdd3.c **** **       other materials provided with the distribution.
  63:../Generated_Code/PwmLdd3.c **** **     
  64:../Generated_Code/PwmLdd3.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  65:../Generated_Code/PwmLdd3.c **** **       contributors may be used to endorse or promote products derived from this
  66:../Generated_Code/PwmLdd3.c **** **       software without specific prior written permission.
  67:../Generated_Code/PwmLdd3.c **** **     
  68:../Generated_Code/PwmLdd3.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  69:../Generated_Code/PwmLdd3.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  70:../Generated_Code/PwmLdd3.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  71:../Generated_Code/PwmLdd3.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  72:../Generated_Code/PwmLdd3.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  73:../Generated_Code/PwmLdd3.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  74:../Generated_Code/PwmLdd3.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  75:../Generated_Code/PwmLdd3.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  76:../Generated_Code/PwmLdd3.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  77:../Generated_Code/PwmLdd3.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  78:../Generated_Code/PwmLdd3.c **** **     
  79:../Generated_Code/PwmLdd3.c **** **     http: www.freescale.com
  80:../Generated_Code/PwmLdd3.c **** **     mail: support@freescale.com
  81:../Generated_Code/PwmLdd3.c **** ** ###################################################################*/
  82:../Generated_Code/PwmLdd3.c **** /*!
  83:../Generated_Code/PwmLdd3.c **** ** @file PwmLdd3.c
  84:../Generated_Code/PwmLdd3.c **** ** @version 01.03
  85:../Generated_Code/PwmLdd3.c **** ** @brief
  86:../Generated_Code/PwmLdd3.c **** **          This component implements a pulse-width modulation generator
  87:../Generated_Code/PwmLdd3.c **** **          that generates signal with variable duty and fixed cycle.
  88:../Generated_Code/PwmLdd3.c **** **          This PWM component provides a high level API for unified
  89:../Generated_Code/PwmLdd3.c **** **          hardware access to various timer devices using the TimerUnit
  90:../Generated_Code/PwmLdd3.c **** **          component.
  91:../Generated_Code/PwmLdd3.c **** */         
  92:../Generated_Code/PwmLdd3.c **** /*!
  93:../Generated_Code/PwmLdd3.c **** **  @addtogroup PwmLdd3_module PwmLdd3 module documentation
  94:../Generated_Code/PwmLdd3.c **** **  @{
  95:../Generated_Code/PwmLdd3.c **** */         
  96:../Generated_Code/PwmLdd3.c **** 
  97:../Generated_Code/PwmLdd3.c **** /* MODULE PwmLdd3. */
  98:../Generated_Code/PwmLdd3.c **** 
  99:../Generated_Code/PwmLdd3.c **** #include "PwmLdd3.h"
 100:../Generated_Code/PwmLdd3.c **** /* {Default RTOS Adapter} No RTOS includes */
 101:../Generated_Code/PwmLdd3.c **** 
 102:../Generated_Code/PwmLdd3.c **** #ifdef __cplusplus
 103:../Generated_Code/PwmLdd3.c **** extern "C" {
 104:../Generated_Code/PwmLdd3.c **** #endif 
 105:../Generated_Code/PwmLdd3.c **** 
 106:../Generated_Code/PwmLdd3.c **** typedef struct {
 107:../Generated_Code/PwmLdd3.c ****   LDD_TDeviceData *LinkedDeviceDataPtr;
 108:../Generated_Code/PwmLdd3.c ****   bool EnUser;                         /* Enable/Disable device */
 109:../Generated_Code/PwmLdd3.c ****   uint16_t RatioStore;                 /* Ratio of L-level to H-level */
 110:../Generated_Code/PwmLdd3.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
 111:../Generated_Code/PwmLdd3.c **** } PwmLdd3_TDeviceData;
 112:../Generated_Code/PwmLdd3.c **** 
 113:../Generated_Code/PwmLdd3.c **** typedef PwmLdd3_TDeviceData *PwmLdd3_TDeviceDataPtr; /* Pointer to the device data structure. */
 114:../Generated_Code/PwmLdd3.c **** 
 115:../Generated_Code/PwmLdd3.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 116:../Generated_Code/PwmLdd3.c **** static PwmLdd3_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 117:../Generated_Code/PwmLdd3.c **** 
 118:../Generated_Code/PwmLdd3.c **** #define CHANNEL 0x02U
 119:../Generated_Code/PwmLdd3.c **** /* Internal method prototypes */
 120:../Generated_Code/PwmLdd3.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr);
 121:../Generated_Code/PwmLdd3.c **** /*
 122:../Generated_Code/PwmLdd3.c **** ** ===================================================================
 123:../Generated_Code/PwmLdd3.c **** **     Method      :  PwmLdd3_Init (component PWM_LDD)
 124:../Generated_Code/PwmLdd3.c **** */
 125:../Generated_Code/PwmLdd3.c **** /*!
 126:../Generated_Code/PwmLdd3.c **** **     @brief
 127:../Generated_Code/PwmLdd3.c **** **         Initializes the device. Allocates memory for the device data
 128:../Generated_Code/PwmLdd3.c **** **         structure, allocates interrupt vectors and sets interrupt
 129:../Generated_Code/PwmLdd3.c **** **         priority, sets pin routing, sets timing, etc. If the
 130:../Generated_Code/PwmLdd3.c **** **         property ["Enable in init. code"] is set to "yes" value then
 131:../Generated_Code/PwmLdd3.c **** **         the device is also enabled (see the description of the
 132:../Generated_Code/PwmLdd3.c **** **         [Enable] method). In this case the [Enable] method is not
 133:../Generated_Code/PwmLdd3.c **** **         necessary and needn't to be generated. This method can be
 134:../Generated_Code/PwmLdd3.c **** **         called only once. Before the second call of Init the [Deinit]
 135:../Generated_Code/PwmLdd3.c **** **         must be called first.
 136:../Generated_Code/PwmLdd3.c **** **     @param
 137:../Generated_Code/PwmLdd3.c **** **         UserDataPtr     - Pointer to the user or
 138:../Generated_Code/PwmLdd3.c **** **                           RTOS specific data. This pointer will be
 139:../Generated_Code/PwmLdd3.c **** **                           passed as an event or callback parameter.
 140:../Generated_Code/PwmLdd3.c **** **     @return
 141:../Generated_Code/PwmLdd3.c **** **                         - Pointer to the dynamically allocated private
 142:../Generated_Code/PwmLdd3.c **** **                           structure or NULL if there was an error.
 143:../Generated_Code/PwmLdd3.c **** */
 144:../Generated_Code/PwmLdd3.c **** /* ===================================================================*/
 145:../Generated_Code/PwmLdd3.c **** LDD_TDeviceData* PwmLdd3_Init(LDD_TUserData *UserDataPtr)
 146:../Generated_Code/PwmLdd3.c **** {
  35              		.loc 1 146 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 16
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 84B0     		sub	sp, sp, #16
  44              		.cfi_def_cfa_offset 24
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  47 0006 7860     		str	r0, [r7, #4]
 147:../Generated_Code/PwmLdd3.c ****   /* Allocate device structure */
 148:../Generated_Code/PwmLdd3.c ****   PwmLdd3_TDeviceData *DeviceDataPrv;
 149:../Generated_Code/PwmLdd3.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 150:../Generated_Code/PwmLdd3.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  48              		.loc 1 150 0
  49 0008 104B     		ldr	r3, .L4
  50 000a FB60     		str	r3, [r7, #12]
 151:../Generated_Code/PwmLdd3.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  51              		.loc 1 151 0
  52 000c FB68     		ldr	r3, [r7, #12]
  53 000e 7A68     		ldr	r2, [r7, #4]
  54 0010 9A60     		str	r2, [r3, #8]
 152:../Generated_Code/PwmLdd3.c ****   DeviceDataPrv->EnUser = FALSE;       /* Set the flag "device disabled" */
  55              		.loc 1 152 0
  56 0012 FB68     		ldr	r3, [r7, #12]
  57 0014 0022     		movs	r2, #0
  58 0016 1A71     		strb	r2, [r3, #4]
 153:../Generated_Code/PwmLdd3.c ****   DeviceDataPrv->RatioStore = 0x01U;   /* Ratio after initialization */
  59              		.loc 1 153 0
  60 0018 FB68     		ldr	r3, [r7, #12]
  61 001a 0122     		movs	r2, #1
  62 001c DA80     		strh	r2, [r3, #6]	@ movhi
 154:../Generated_Code/PwmLdd3.c ****   /* Registration of the device structure */
 155:../Generated_Code/PwmLdd3.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd3_ID,DeviceDataPrv);
  63              		.loc 1 155 0
  64 001e 0C4B     		ldr	r3, .L4+4
  65 0020 FA68     		ldr	r2, [r7, #12]
  66 0022 1A65     		str	r2, [r3, #80]
 156:../Generated_Code/PwmLdd3.c ****   DeviceDataPrv->LinkedDeviceDataPtr = MOTTU_Init((LDD_TUserData *)NULL);
  67              		.loc 1 156 0
  68 0024 0020     		movs	r0, #0
  69 0026 FFF7FEFF 		bl	MOTTU_Init
  70 002a 0246     		mov	r2, r0
  71 002c FB68     		ldr	r3, [r7, #12]
  72 002e 1A60     		str	r2, [r3]
 157:../Generated_Code/PwmLdd3.c ****   if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful?
  73              		.loc 1 157 0
  74 0030 FB68     		ldr	r3, [r7, #12]
  75 0032 1B68     		ldr	r3, [r3]
  76 0034 002B     		cmp	r3, #0
  77 0036 04D1     		bne	.L2
 158:../Generated_Code/PwmLdd3.c ****     /* Unregistration of the device structure */
 159:../Generated_Code/PwmLdd3.c ****     PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd3_ID);
  78              		.loc 1 159 0
  79 0038 054B     		ldr	r3, .L4+4
  80 003a 0022     		movs	r2, #0
  81 003c 1A65     		str	r2, [r3, #80]
 160:../Generated_Code/PwmLdd3.c ****     /* Deallocation of the device structure */
 161:../Generated_Code/PwmLdd3.c ****     /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deall
 162:../Generated_Code/PwmLdd3.c ****     return NULL;                       /* If so, then the PWM initialization is also unsuccessful *
  82              		.loc 1 162 0
  83 003e 0023     		movs	r3, #0
  84 0040 00E0     		b	.L3
  85              	.L2:
 163:../Generated_Code/PwmLdd3.c ****   }
 164:../Generated_Code/PwmLdd3.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  86              		.loc 1 164 0
  87 0042 FB68     		ldr	r3, [r7, #12]
  88              	.L3:
 165:../Generated_Code/PwmLdd3.c **** }
  89              		.loc 1 165 0
  90 0044 1846     		mov	r0, r3
  91 0046 1037     		adds	r7, r7, #16
  92 0048 BD46     		mov	sp, r7
  93              		@ sp needed
  94 004a 80BD     		pop	{r7, pc}
  95              	.L5:
  96              		.align	2
  97              	.L4:
  98 004c 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
  99 0050 00000000 		.word	PE_LDD_DeviceDataList
 100              		.cfi_endproc
 101              	.LFE0:
 103              		.section	.text.PwmLdd3_Deinit,"ax",%progbits
 104              		.align	2
 105              		.global	PwmLdd3_Deinit
 106              		.thumb
 107              		.thumb_func
 109              	PwmLdd3_Deinit:
 110              	.LFB1:
 166:../Generated_Code/PwmLdd3.c **** 
 167:../Generated_Code/PwmLdd3.c **** /*
 168:../Generated_Code/PwmLdd3.c **** ** ===================================================================
 169:../Generated_Code/PwmLdd3.c **** **     Method      :  PwmLdd3_Deinit (component PWM_LDD)
 170:../Generated_Code/PwmLdd3.c **** */
 171:../Generated_Code/PwmLdd3.c **** /*!
 172:../Generated_Code/PwmLdd3.c **** **     @brief
 173:../Generated_Code/PwmLdd3.c **** **         Deinitializes the device. Switches off the device, frees the
 174:../Generated_Code/PwmLdd3.c **** **         device data structure memory, interrupts vectors, etc.
 175:../Generated_Code/PwmLdd3.c **** **     @param
 176:../Generated_Code/PwmLdd3.c **** **         DeviceDataPtr   - Device data structure
 177:../Generated_Code/PwmLdd3.c **** **                           pointer returned by Init method
 178:../Generated_Code/PwmLdd3.c **** */
 179:../Generated_Code/PwmLdd3.c **** /* ===================================================================*/
 180:../Generated_Code/PwmLdd3.c **** void PwmLdd3_Deinit(LDD_TDeviceData *DeviceDataPtr)
 181:../Generated_Code/PwmLdd3.c **** {
 111              		.loc 1 181 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 16
 114              		@ frame_needed = 1, uses_anonymous_args = 0
 115 0000 80B5     		push	{r7, lr}
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 84B0     		sub	sp, sp, #16
 120              		.cfi_def_cfa_offset 24
 121 0004 00AF     		add	r7, sp, #0
 122              		.cfi_def_cfa_register 7
 123 0006 7860     		str	r0, [r7, #4]
 182:../Generated_Code/PwmLdd3.c ****   PwmLdd3_TDeviceData *DeviceDataPrv = (PwmLdd3_TDeviceData *)DeviceDataPtr;
 124              		.loc 1 182 0
 125 0008 7B68     		ldr	r3, [r7, #4]
 126 000a FB60     		str	r3, [r7, #12]
 183:../Generated_Code/PwmLdd3.c **** 
 184:../Generated_Code/PwmLdd3.c ****   MOTTU_Deinit(DeviceDataPrv->LinkedDeviceDataPtr);
 127              		.loc 1 184 0
 128 000c FB68     		ldr	r3, [r7, #12]
 129 000e 1B68     		ldr	r3, [r3]
 130 0010 1846     		mov	r0, r3
 131 0012 FFF7FEFF 		bl	MOTTU_Deinit
 185:../Generated_Code/PwmLdd3.c ****   /* Unregistration of the device structure */
 186:../Generated_Code/PwmLdd3.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd3_ID);
 132              		.loc 1 186 0
 133 0016 034B     		ldr	r3, .L7
 134 0018 0022     		movs	r2, #0
 135 001a 1A65     		str	r2, [r3, #80]
 187:../Generated_Code/PwmLdd3.c ****   /* Deallocation of the device structure */
 188:../Generated_Code/PwmLdd3.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 189:../Generated_Code/PwmLdd3.c **** }
 136              		.loc 1 189 0
 137 001c 1037     		adds	r7, r7, #16
 138 001e BD46     		mov	sp, r7
 139              		@ sp needed
 140 0020 80BD     		pop	{r7, pc}
 141              	.L8:
 142 0022 00BF     		.align	2
 143              	.L7:
 144 0024 00000000 		.word	PE_LDD_DeviceDataList
 145              		.cfi_endproc
 146              	.LFE1:
 148              		.section	.text.PwmLdd3_Enable,"ax",%progbits
 149              		.align	2
 150              		.global	PwmLdd3_Enable
 151              		.thumb
 152              		.thumb_func
 154              	PwmLdd3_Enable:
 155              	.LFB2:
 190:../Generated_Code/PwmLdd3.c **** 
 191:../Generated_Code/PwmLdd3.c **** /*
 192:../Generated_Code/PwmLdd3.c **** ** ===================================================================
 193:../Generated_Code/PwmLdd3.c **** **     Method      :  PwmLdd3_Enable (component PWM_LDD)
 194:../Generated_Code/PwmLdd3.c **** */
 195:../Generated_Code/PwmLdd3.c **** /*!
 196:../Generated_Code/PwmLdd3.c **** **     @brief
 197:../Generated_Code/PwmLdd3.c **** **         Enables the component - it starts the signal generation.
 198:../Generated_Code/PwmLdd3.c **** **         Events may be generated (see SetEventMask).
 199:../Generated_Code/PwmLdd3.c **** **     @param
 200:../Generated_Code/PwmLdd3.c **** **         DeviceDataPtr   - Device data structure
 201:../Generated_Code/PwmLdd3.c **** **                           pointer returned by [Init] method.
 202:../Generated_Code/PwmLdd3.c **** **     @return
 203:../Generated_Code/PwmLdd3.c **** **                         - Error code, possible codes:
 204:../Generated_Code/PwmLdd3.c **** **                           ERR_OK - OK
 205:../Generated_Code/PwmLdd3.c **** **                           ERR_SPEED - The component does not work in
 206:../Generated_Code/PwmLdd3.c **** **                           the active clock configuration
 207:../Generated_Code/PwmLdd3.c **** */
 208:../Generated_Code/PwmLdd3.c **** /* ===================================================================*/
 209:../Generated_Code/PwmLdd3.c **** LDD_TError PwmLdd3_Enable(LDD_TDeviceData *DeviceDataPtr)
 210:../Generated_Code/PwmLdd3.c **** {
 156              		.loc 1 210 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 16
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 84B0     		sub	sp, sp, #16
 165              		.cfi_def_cfa_offset 24
 166 0004 00AF     		add	r7, sp, #0
 167              		.cfi_def_cfa_register 7
 168 0006 7860     		str	r0, [r7, #4]
 211:../Generated_Code/PwmLdd3.c ****   PwmLdd3_TDeviceData *DeviceDataPrv = (PwmLdd3_TDeviceData *)DeviceDataPtr;
 169              		.loc 1 211 0
 170 0008 7B68     		ldr	r3, [r7, #4]
 171 000a FB60     		str	r3, [r7, #12]
 212:../Generated_Code/PwmLdd3.c **** 
 213:../Generated_Code/PwmLdd3.c ****   if (!DeviceDataPrv->EnUser) {        /* Is the device disabled by user? */
 172              		.loc 1 213 0
 173 000c FB68     		ldr	r3, [r7, #12]
 174 000e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 175 0010 002B     		cmp	r3, #0
 176 0012 07D1     		bne	.L10
 214:../Generated_Code/PwmLdd3.c ****     DeviceDataPrv->EnUser = TRUE;      /* If yes then set the flag "device enabled" */
 177              		.loc 1 214 0
 178 0014 FB68     		ldr	r3, [r7, #12]
 179 0016 0122     		movs	r2, #1
 180 0018 1A71     		strb	r2, [r3, #4]
 215:../Generated_Code/PwmLdd3.c ****     (void)MOTTU_Enable(DeviceDataPrv->LinkedDeviceDataPtr); /* Enable TimerUnit */
 181              		.loc 1 215 0
 182 001a FB68     		ldr	r3, [r7, #12]
 183 001c 1B68     		ldr	r3, [r3]
 184 001e 1846     		mov	r0, r3
 185 0020 FFF7FEFF 		bl	MOTTU_Enable
 186              	.L10:
 216:../Generated_Code/PwmLdd3.c ****   }
 217:../Generated_Code/PwmLdd3.c ****   return ERR_OK;
 187              		.loc 1 217 0
 188 0024 0023     		movs	r3, #0
 218:../Generated_Code/PwmLdd3.c **** }
 189              		.loc 1 218 0
 190 0026 1846     		mov	r0, r3
 191 0028 1037     		adds	r7, r7, #16
 192 002a BD46     		mov	sp, r7
 193              		@ sp needed
 194 002c 80BD     		pop	{r7, pc}
 195              		.cfi_endproc
 196              	.LFE2:
 198 002e 00BF     		.section	.text.PwmLdd3_Disable,"ax",%progbits
 199              		.align	2
 200              		.global	PwmLdd3_Disable
 201              		.thumb
 202              		.thumb_func
 204              	PwmLdd3_Disable:
 205              	.LFB3:
 219:../Generated_Code/PwmLdd3.c **** 
 220:../Generated_Code/PwmLdd3.c **** /*
 221:../Generated_Code/PwmLdd3.c **** ** ===================================================================
 222:../Generated_Code/PwmLdd3.c **** **     Method      :  PwmLdd3_Disable (component PWM_LDD)
 223:../Generated_Code/PwmLdd3.c **** */
 224:../Generated_Code/PwmLdd3.c **** /*!
 225:../Generated_Code/PwmLdd3.c **** **     @brief
 226:../Generated_Code/PwmLdd3.c **** **         Disables the component - it stops signal generation and
 227:../Generated_Code/PwmLdd3.c **** **         events calling.
 228:../Generated_Code/PwmLdd3.c **** **     @param
 229:../Generated_Code/PwmLdd3.c **** **         DeviceDataPtr   - Device data structure
 230:../Generated_Code/PwmLdd3.c **** **                           pointer returned by [Init] method.
 231:../Generated_Code/PwmLdd3.c **** **     @return
 232:../Generated_Code/PwmLdd3.c **** **                         - Error code, possible codes:
 233:../Generated_Code/PwmLdd3.c **** **                           ERR_OK - OK
 234:../Generated_Code/PwmLdd3.c **** **                           ERR_SPEED - The component does not work in
 235:../Generated_Code/PwmLdd3.c **** **                           the active clock configuration
 236:../Generated_Code/PwmLdd3.c **** */
 237:../Generated_Code/PwmLdd3.c **** /* ===================================================================*/
 238:../Generated_Code/PwmLdd3.c **** LDD_TError PwmLdd3_Disable(LDD_TDeviceData *DeviceDataPtr)
 239:../Generated_Code/PwmLdd3.c **** {
 206              		.loc 1 239 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 16
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210 0000 80B5     		push	{r7, lr}
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 84B0     		sub	sp, sp, #16
 215              		.cfi_def_cfa_offset 24
 216 0004 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
 218 0006 7860     		str	r0, [r7, #4]
 240:../Generated_Code/PwmLdd3.c ****   PwmLdd3_TDeviceData *DeviceDataPrv = (PwmLdd3_TDeviceData *)DeviceDataPtr;
 219              		.loc 1 240 0
 220 0008 7B68     		ldr	r3, [r7, #4]
 221 000a FB60     		str	r3, [r7, #12]
 241:../Generated_Code/PwmLdd3.c **** 
 242:../Generated_Code/PwmLdd3.c ****   if (DeviceDataPrv->EnUser) {         /* Is the device enabled by user? */
 222              		.loc 1 242 0
 223 000c FB68     		ldr	r3, [r7, #12]
 224 000e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 225 0010 002B     		cmp	r3, #0
 226 0012 12D0     		beq	.L13
 243:../Generated_Code/PwmLdd3.c ****     DeviceDataPrv->EnUser = FALSE;     /* If yes then set the flag "device enabled" */
 227              		.loc 1 243 0
 228 0014 FB68     		ldr	r3, [r7, #12]
 229 0016 0022     		movs	r2, #0
 230 0018 1A71     		strb	r2, [r3, #4]
 244:../Generated_Code/PwmLdd3.c ****    (void)MOTTU_Disable(DeviceDataPrv->LinkedDeviceDataPtr); /* Disable TimerUnit component */
 231              		.loc 1 244 0
 232 001a FB68     		ldr	r3, [r7, #12]
 233 001c 1B68     		ldr	r3, [r3]
 234 001e 1846     		mov	r0, r3
 235 0020 FFF7FEFF 		bl	MOTTU_Disable
 245:../Generated_Code/PwmLdd3.c ****    (void)MOTTU_ResetCounter(DeviceDataPrv->LinkedDeviceDataPtr); /* Reset counter */
 236              		.loc 1 245 0
 237 0024 FB68     		ldr	r3, [r7, #12]
 238 0026 1B68     		ldr	r3, [r3]
 239 0028 1846     		mov	r0, r3
 240 002a FFF7FEFF 		bl	MOTTU_ResetCounter
 246:../Generated_Code/PwmLdd3.c ****    FTM_PDD_InitializeOutputs(FTM0_BASE_PTR); /* Force output signal level */
 241              		.loc 1 246 0
 242 002e 054B     		ldr	r3, .L15
 243 0030 044A     		ldr	r2, .L15
 244 0032 526D     		ldr	r2, [r2, #84]
 245 0034 42F00202 		orr	r2, r2, #2
 246 0038 5A65     		str	r2, [r3, #84]
 247              	.L13:
 247:../Generated_Code/PwmLdd3.c ****   }
 248:../Generated_Code/PwmLdd3.c ****   return ERR_OK;
 248              		.loc 1 248 0
 249 003a 0023     		movs	r3, #0
 249:../Generated_Code/PwmLdd3.c **** }
 250              		.loc 1 249 0
 251 003c 1846     		mov	r0, r3
 252 003e 1037     		adds	r7, r7, #16
 253 0040 BD46     		mov	sp, r7
 254              		@ sp needed
 255 0042 80BD     		pop	{r7, pc}
 256              	.L16:
 257              		.align	2
 258              	.L15:
 259 0044 00800340 		.word	1073971200
 260              		.cfi_endproc
 261              	.LFE3:
 263              		.section	.text.PwmLdd3_SetRatio16,"ax",%progbits
 264              		.align	2
 265              		.global	PwmLdd3_SetRatio16
 266              		.thumb
 267              		.thumb_func
 269              	PwmLdd3_SetRatio16:
 270              	.LFB4:
 250:../Generated_Code/PwmLdd3.c **** 
 251:../Generated_Code/PwmLdd3.c **** /*
 252:../Generated_Code/PwmLdd3.c **** ** ===================================================================
 253:../Generated_Code/PwmLdd3.c **** **     Method      :  PwmLdd3_SetRatio16 (component PWM_LDD)
 254:../Generated_Code/PwmLdd3.c **** */
 255:../Generated_Code/PwmLdd3.c **** /*!
 256:../Generated_Code/PwmLdd3.c **** **     @brief
 257:../Generated_Code/PwmLdd3.c **** **         This method sets a new duty-cycle ratio. Ratio is expressed
 258:../Generated_Code/PwmLdd3.c **** **         as a 16-bit unsigned integer number. 0 - FFFF value is
 259:../Generated_Code/PwmLdd3.c **** **         proportional to ratio 0 - 100%. The method is available
 260:../Generated_Code/PwmLdd3.c **** **         only if it is not selected list of predefined values in
 261:../Generated_Code/PwmLdd3.c **** **         [Starting pulse width] property. 
 262:../Generated_Code/PwmLdd3.c **** **         Note: Calculated duty depends on the timer possibilities and
 263:../Generated_Code/PwmLdd3.c **** **         on the selected period.
 264:../Generated_Code/PwmLdd3.c **** **     @param
 265:../Generated_Code/PwmLdd3.c **** **         DeviceDataPtr   - Device data structure
 266:../Generated_Code/PwmLdd3.c **** **                           pointer returned by [Init] method.
 267:../Generated_Code/PwmLdd3.c **** **     @param
 268:../Generated_Code/PwmLdd3.c **** **         Ratio           - Ratio to set. 0 - 65535 value is
 269:../Generated_Code/PwmLdd3.c **** **                           proportional to ratio 0 - 100%
 270:../Generated_Code/PwmLdd3.c **** **     @return
 271:../Generated_Code/PwmLdd3.c **** **                         - Error code, possible codes:
 272:../Generated_Code/PwmLdd3.c **** **                           ERR_OK - OK
 273:../Generated_Code/PwmLdd3.c **** **                           ERR_SPEED - The component does not work in
 274:../Generated_Code/PwmLdd3.c **** **                           the active clock configuration
 275:../Generated_Code/PwmLdd3.c **** */
 276:../Generated_Code/PwmLdd3.c **** /* ===================================================================*/
 277:../Generated_Code/PwmLdd3.c **** LDD_TError PwmLdd3_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio)
 278:../Generated_Code/PwmLdd3.c **** {
 271              		.loc 1 278 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 16
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 0000 80B5     		push	{r7, lr}
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 7, -8
 278              		.cfi_offset 14, -4
 279 0002 84B0     		sub	sp, sp, #16
 280              		.cfi_def_cfa_offset 24
 281 0004 00AF     		add	r7, sp, #0
 282              		.cfi_def_cfa_register 7
 283 0006 7860     		str	r0, [r7, #4]
 284 0008 0B46     		mov	r3, r1
 285 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 279:../Generated_Code/PwmLdd3.c ****   PwmLdd3_TDeviceData *DeviceDataPrv = (PwmLdd3_TDeviceData *)DeviceDataPtr;
 286              		.loc 1 279 0
 287 000c 7B68     		ldr	r3, [r7, #4]
 288 000e FB60     		str	r3, [r7, #12]
 280:../Generated_Code/PwmLdd3.c **** 
 281:../Generated_Code/PwmLdd3.c ****   DeviceDataPrv->RatioStore = Ratio;   /* Store new value of the ratio */
 289              		.loc 1 281 0
 290 0010 FB68     		ldr	r3, [r7, #12]
 291 0012 7A88     		ldrh	r2, [r7, #2]	@ movhi
 292 0014 DA80     		strh	r2, [r3, #6]	@ movhi
 282:../Generated_Code/PwmLdd3.c ****   SetRatio(DeviceDataPtr);
 293              		.loc 1 282 0
 294 0016 7868     		ldr	r0, [r7, #4]
 295 0018 FFF7FEFF 		bl	SetRatio
 283:../Generated_Code/PwmLdd3.c ****   return ERR_OK;
 296              		.loc 1 283 0
 297 001c 0023     		movs	r3, #0
 284:../Generated_Code/PwmLdd3.c **** }
 298              		.loc 1 284 0
 299 001e 1846     		mov	r0, r3
 300 0020 1037     		adds	r7, r7, #16
 301 0022 BD46     		mov	sp, r7
 302              		@ sp needed
 303 0024 80BD     		pop	{r7, pc}
 304              		.cfi_endproc
 305              	.LFE4:
 307 0026 00BF     		.section	.text.SetRatio,"ax",%progbits
 308              		.align	2
 309              		.thumb
 310              		.thumb_func
 312              	SetRatio:
 313              	.LFB5:
 285:../Generated_Code/PwmLdd3.c **** 
 286:../Generated_Code/PwmLdd3.c **** /*
 287:../Generated_Code/PwmLdd3.c **** ** ===================================================================
 288:../Generated_Code/PwmLdd3.c **** **     Method      :  SetRatio (component PWM_LDD)
 289:../Generated_Code/PwmLdd3.c **** **
 290:../Generated_Code/PwmLdd3.c **** **     Description :
 291:../Generated_Code/PwmLdd3.c **** **         This method calculates new value of duty compare register from 
 292:../Generated_Code/PwmLdd3.c **** **         variable RatioStore.
 293:../Generated_Code/PwmLdd3.c **** **         This method is internal. It is used by Processor Expert only.
 294:../Generated_Code/PwmLdd3.c **** ** ===================================================================
 295:../Generated_Code/PwmLdd3.c **** */
 296:../Generated_Code/PwmLdd3.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr)
 297:../Generated_Code/PwmLdd3.c **** {
 314              		.loc 1 297 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 24
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318 0000 80B5     		push	{r7, lr}
 319              		.cfi_def_cfa_offset 8
 320              		.cfi_offset 7, -8
 321              		.cfi_offset 14, -4
 322 0002 86B0     		sub	sp, sp, #24
 323              		.cfi_def_cfa_offset 32
 324 0004 00AF     		add	r7, sp, #0
 325              		.cfi_def_cfa_register 7
 326 0006 7860     		str	r0, [r7, #4]
 298:../Generated_Code/PwmLdd3.c ****   PwmLdd3_TDeviceData *DeviceDataPrv = (PwmLdd3_TDeviceData*)DeviceDataPtr;
 327              		.loc 1 298 0
 328 0008 7B68     		ldr	r3, [r7, #4]
 329 000a 3B61     		str	r3, [r7, #16]
 299:../Generated_Code/PwmLdd3.c ****   uint16_t Period;
 300:../Generated_Code/PwmLdd3.c ****   uint16_t Duty;
 301:../Generated_Code/PwmLdd3.c **** 
 302:../Generated_Code/PwmLdd3.c ****   (void)MOTTU_GetPeriodTicks(DeviceDataPrv->LinkedDeviceDataPtr, &Period);
 330              		.loc 1 302 0
 331 000c 3B69     		ldr	r3, [r7, #16]
 332 000e 1A68     		ldr	r2, [r3]
 333 0010 07F10E03 		add	r3, r7, #14
 334 0014 1046     		mov	r0, r2
 335 0016 1946     		mov	r1, r3
 336 0018 FFF7FEFF 		bl	MOTTU_GetPeriodTicks
 303:../Generated_Code/PwmLdd3.c ****   if (Period == 0U) {
 337              		.loc 1 303 0
 338 001c FB89     		ldrh	r3, [r7, #14]
 339 001e 002B     		cmp	r3, #0
 340 0020 03D1     		bne	.L20
 304:../Generated_Code/PwmLdd3.c ****     Duty = DeviceDataPrv->RatioStore;
 341              		.loc 1 304 0
 342 0022 3B69     		ldr	r3, [r7, #16]
 343 0024 DB88     		ldrh	r3, [r3, #6]	@ movhi
 344 0026 FB82     		strh	r3, [r7, #22]	@ movhi
 345 0028 08E0     		b	.L21
 346              	.L20:
 305:../Generated_Code/PwmLdd3.c ****   }
 306:../Generated_Code/PwmLdd3.c ****   else {
 307:../Generated_Code/PwmLdd3.c ****     Duty = (uint16_t)((((uint32_t)(Period) * DeviceDataPrv->RatioStore) + 0x8000) >> 0x10);
 347              		.loc 1 307 0
 348 002a FB89     		ldrh	r3, [r7, #14]
 349 002c 3A69     		ldr	r2, [r7, #16]
 350 002e D288     		ldrh	r2, [r2, #6]
 351 0030 02FB03F3 		mul	r3, r2, r3
 352 0034 03F50043 		add	r3, r3, #32768
 353 0038 1B0C     		lsrs	r3, r3, #16
 354 003a FB82     		strh	r3, [r7, #22]	@ movhi
 355              	.L21:
 308:../Generated_Code/PwmLdd3.c ****   }
 309:../Generated_Code/PwmLdd3.c ****   (void)MOTTU_SetOffsetTicks(DeviceDataPrv->LinkedDeviceDataPtr, CHANNEL, Duty);
 356              		.loc 1 309 0
 357 003c 3B69     		ldr	r3, [r7, #16]
 358 003e 1A68     		ldr	r2, [r3]
 359 0040 FB8A     		ldrh	r3, [r7, #22]
 360 0042 1046     		mov	r0, r2
 361 0044 0221     		movs	r1, #2
 362 0046 1A46     		mov	r2, r3
 363 0048 FFF7FEFF 		bl	MOTTU_SetOffsetTicks
 310:../Generated_Code/PwmLdd3.c **** }
 364              		.loc 1 310 0
 365 004c 1837     		adds	r7, r7, #24
 366 004e BD46     		mov	sp, r7
 367              		@ sp needed
 368 0050 80BD     		pop	{r7, pc}
 369              		.cfi_endproc
 370              	.LFE5:
 372 0052 00BF     		.text
 373              	.Letext0:
 374              		.file 2 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 375              		.file 3 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\stdint.h"
 376              		.file 4 "../Generated_Code/PE_Types.h"
 377              		.file 5 "C:/INTRO_HS18/IntroAronAlex/TEAM_Robot/Static_Code/IO_Map/MK22F12.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PwmLdd3.c
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:24     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:27     .text.PwmLdd3_Init:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:32     .text.PwmLdd3_Init:00000000 PwmLdd3_Init
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:98     .text.PwmLdd3_Init:0000004c $d
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:104    .text.PwmLdd3_Deinit:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:109    .text.PwmLdd3_Deinit:00000000 PwmLdd3_Deinit
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:144    .text.PwmLdd3_Deinit:00000024 $d
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:149    .text.PwmLdd3_Enable:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:154    .text.PwmLdd3_Enable:00000000 PwmLdd3_Enable
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:199    .text.PwmLdd3_Disable:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:204    .text.PwmLdd3_Disable:00000000 PwmLdd3_Disable
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:259    .text.PwmLdd3_Disable:00000044 $d
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:264    .text.PwmLdd3_SetRatio16:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:269    .text.PwmLdd3_SetRatio16:00000000 PwmLdd3_SetRatio16
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:312    .text.SetRatio:00000000 SetRatio
C:\Users\Aron\AppData\Local\Temp\ccfZ6pre.s:308    .text.SetRatio:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22dcf9ce9babd46e5ea858ea4400d115
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.PE_Types.h.68.de7a315b6e4c635a9a7a45ae6ec20b08
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.60.44eca2ca2a72148441f11b3e43b344a9
                           .group:00000000 wm4.MK22F12.h.59.83dcc0895f45d7d67f2182a38aa7f04f
                           .group:00000000 wm4.PDD_Types.h.5.e0b4125fe5201c5e1f688b067f4f0d54
                           .group:00000000 wm4.FTM_PDD.h.110.491886a8b1fe2265fe9c01e9493601bd
                           .group:00000000 wm4.Cpu.h.66.9574a96471c5a4e92ddf5418cbdcf9a5
                           .group:00000000 wm4.MOTTU.h.152.1d52de4d1b458aa1157b5652fe9f0ede
                           .group:00000000 wm4.PwmLdd3.h.118.9516d5b09681145dbe2b85af9a441cb1

UNDEFINED SYMBOLS
MOTTU_Init
PE_LDD_DeviceDataList
MOTTU_Deinit
MOTTU_Enable
MOTTU_Disable
MOTTU_ResetCounter
MOTTU_GetPeriodTicks
MOTTU_SetOffsetTicks
