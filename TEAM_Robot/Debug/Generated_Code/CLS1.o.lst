   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"CLS1.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.comm	CLS1_DefaultShellBuffer,48,4
  21              		.section	.bss.CLS1_currStdIO,"aw",%nobits
  22              		.align	2
  25              	CLS1_currStdIO:
  26 0000 00000000 		.space	4
  27              		.section	.text.CLS1_SendCh,"ax",%progbits
  28              		.align	2
  29              		.global	CLS1_SendCh
  30              		.thumb
  31              		.thumb_func
  33              	CLS1_SendCh:
  34              	.LFB0:
  35              		.file 1 "../Generated_Code/CLS1.c"
   1:../Generated_Code/CLS1.c **** /* ###################################################################
   2:../Generated_Code/CLS1.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/CLS1.c **** **     Filename    : CLS1.c
   4:../Generated_Code/CLS1.c **** **     Project     : TEAM_Robot
   5:../Generated_Code/CLS1.c **** **     Processor   : MK22FX512VLK12
   6:../Generated_Code/CLS1.c **** **     Component   : Shell
   7:../Generated_Code/CLS1.c **** **     Version     : Component 01.098, Driver 01.00, CPU db: 3.00.000
   8:../Generated_Code/CLS1.c **** **     Repository  : My Components
   9:../Generated_Code/CLS1.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/CLS1.c **** **     Date/Time   : 2018-09-28, 15:03, # CodeGen: 0
  11:../Generated_Code/CLS1.c **** **     Abstract    :
  12:../Generated_Code/CLS1.c **** **         Module implementing a command line shell.
  13:../Generated_Code/CLS1.c **** **     Settings    :
  14:../Generated_Code/CLS1.c **** **          Component name                                 : CLS1
  15:../Generated_Code/CLS1.c **** **          Echo                                           : no
  16:../Generated_Code/CLS1.c **** **          Prompt                                         : "CMD> "
  17:../Generated_Code/CLS1.c **** **          Project Name                                   : K22 Robot Master INTRO
  18:../Generated_Code/CLS1.c **** **          Silent Mode Prefix                             : #
  19:../Generated_Code/CLS1.c **** **          Buffer Size                                    : 48
  20:../Generated_Code/CLS1.c **** **          Blocking Send                                  : Enabled
  21:../Generated_Code/CLS1.c **** **            Wait                                         : WAIT1
  22:../Generated_Code/CLS1.c **** **            Timeout (ms)                                 : 50
  23:../Generated_Code/CLS1.c **** **            Wait Time (ms)                               : 2
  24:../Generated_Code/CLS1.c **** **            RTOS Wait                                    : yes
  25:../Generated_Code/CLS1.c **** **          Status Colon Pos                               : 13
  26:../Generated_Code/CLS1.c **** **          Help Semicolon Pos                             : 26
  27:../Generated_Code/CLS1.c **** **          Multi Command                                  : Enabled
  28:../Generated_Code/CLS1.c **** **            Length                                       : 32
  29:../Generated_Code/CLS1.c **** **            Separator                                    : ;
  30:../Generated_Code/CLS1.c **** **          History                                        : no
  31:../Generated_Code/CLS1.c **** **          Mutex                                          : no
  32:../Generated_Code/CLS1.c **** **          SDK                                            : MCUC1
  33:../Generated_Code/CLS1.c **** **          Default Serial                                 : Disabled
  34:../Generated_Code/CLS1.c **** **          Utility                                        : UTIL1
  35:../Generated_Code/CLS1.c **** **          XFormat                                        : XF1
  36:../Generated_Code/CLS1.c **** **          Critical Section                               : CS1
  37:../Generated_Code/CLS1.c **** **     Contents    :
  38:../Generated_Code/CLS1.c **** **         PrintPrompt                  - void CLS1_PrintPrompt(CLS1_ConstStdIOType *io);
  39:../Generated_Code/CLS1.c **** **         SendNum8u                    - void CLS1_SendNum8u(uint8_t val, CLS1_StdIO_OutErr_FctTyp
  40:../Generated_Code/CLS1.c **** **         SendNum8s                    - void CLS1_SendNum8s(int8_t val, CLS1_StdIO_OutErr_FctType
  41:../Generated_Code/CLS1.c **** **         SendNum16u                   - void CLS1_SendNum16u(uint16_t val, CLS1_StdIO_OutErr_FctT
  42:../Generated_Code/CLS1.c **** **         SendNum16s                   - void CLS1_SendNum16s(int16_t val, CLS1_StdIO_OutErr_FctTy
  43:../Generated_Code/CLS1.c **** **         SendNum32u                   - void CLS1_SendNum32u(uint32_t val, CLS1_StdIO_OutErr_FctT
  44:../Generated_Code/CLS1.c **** **         SendNum32s                   - void CLS1_SendNum32s(int32_t val, CLS1_StdIO_OutErr_FctTy
  45:../Generated_Code/CLS1.c **** **         SendCh                       - void CLS1_SendCh(uint8_t ch, CLS1_StdIO_OutErr_FctType io
  46:../Generated_Code/CLS1.c **** **         SendStr                      - void CLS1_SendStr(const uint8_t *str, CLS1_StdIO_OutErr_F
  47:../Generated_Code/CLS1.c **** **         printfIO                     - unsigned CLS1_printfIO(CLS1_ConstStdIOType *io, const cha
  48:../Generated_Code/CLS1.c **** **         printf                       - unsigned CLS1_printf(const char *fmt, ...);
  49:../Generated_Code/CLS1.c **** **         SendData                     - void CLS1_SendData(const uint8_t *data, uint16_t dataSize
  50:../Generated_Code/CLS1.c **** **         PrintStatus                  - uint8_t CLS1_PrintStatus(CLS1_ConstStdIOType *io);
  51:../Generated_Code/CLS1.c **** **         ParseCommand                 - uint8_t CLS1_ParseCommand(const uint8_t *cmd, bool *handl
  52:../Generated_Code/CLS1.c **** **         IsHistoryCharacter           - bool CLS1_IsHistoryCharacter(uint8_t ch, uint8_t *cmdBuf,
  53:../Generated_Code/CLS1.c **** **         ReadLine                     - bool CLS1_ReadLine(uint8_t *bufStart, uint8_t *buf, size_
  54:../Generated_Code/CLS1.c **** **         PrintCommandFailed           - void CLS1_PrintCommandFailed(const uint8_t *cmd, CLS1_Con
  55:../Generated_Code/CLS1.c **** **         IterateTable                 - uint8_t CLS1_IterateTable(const uint8_t *cmd, bool *handl
  56:../Generated_Code/CLS1.c **** **         SetStdio                     - uint8_t CLS1_SetStdio(CLS1_ConstStdIOTypePtr stdio);
  57:../Generated_Code/CLS1.c **** **         GetStdio                     - CLS1_ConstStdIOTypePtr CLS1_GetStdio(void);
  58:../Generated_Code/CLS1.c **** **         RequestSerial                - void CLS1_RequestSerial(void);
  59:../Generated_Code/CLS1.c **** **         ReleaseSerial                - void CLS1_ReleaseSerial(void);
  60:../Generated_Code/CLS1.c **** **         ReadAndParseWithCommandTable - uint8_t CLS1_ReadAndParseWithCommandTable(uint8_t *cmdBuf
  61:../Generated_Code/CLS1.c **** **         ParseWithCommandTable        - uint8_t CLS1_ParseWithCommandTable(const uint8_t *cmd, CL
  62:../Generated_Code/CLS1.c **** **         GetSemaphore                 - void* CLS1_GetSemaphore(void);
  63:../Generated_Code/CLS1.c **** **         SendStatusStr                - void CLS1_SendStatusStr(const uint8_t *strItem, const uin
  64:../Generated_Code/CLS1.c **** **         SendHelpStr                  - void CLS1_SendHelpStr(const uint8_t *strCmd, const uint8_
  65:../Generated_Code/CLS1.c **** **         ReadChar                     - void CLS1_ReadChar(uint8_t *c);
  66:../Generated_Code/CLS1.c **** **         SendChar                     - void CLS1_SendChar(uint8_t ch);
  67:../Generated_Code/CLS1.c **** **         KeyPressed                   - bool CLS1_KeyPressed(void);
  68:../Generated_Code/CLS1.c **** **         SendCharFct                  - void CLS1_SendCharFct(uint8_t ch, uint8_t (*fct)(uint8_t 
  69:../Generated_Code/CLS1.c **** **         Init                         - void CLS1_Init(void);
  70:../Generated_Code/CLS1.c **** **         Deinit                       - void CLS1_Deinit(void);
  71:../Generated_Code/CLS1.c **** **
  72:../Generated_Code/CLS1.c **** **     * Copyright (c) 2014-2018, Erich Styger
  73:../Generated_Code/CLS1.c **** **      * Web:         https://mcuoneclipse.com
  74:../Generated_Code/CLS1.c **** **      * SourceForge: https://sourceforge.net/projects/mcuoneclipse
  75:../Generated_Code/CLS1.c **** **      * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
  76:../Generated_Code/CLS1.c **** **      * All rights reserved.
  77:../Generated_Code/CLS1.c **** **      *
  78:../Generated_Code/CLS1.c **** **      * Redistribution and use in source and binary forms, with or without modification,
  79:../Generated_Code/CLS1.c **** **      * are permitted provided that the following conditions are met:
  80:../Generated_Code/CLS1.c **** **      *
  81:../Generated_Code/CLS1.c **** **      * - Redistributions of source code must retain the above copyright notice, this list
  82:../Generated_Code/CLS1.c **** **      *   of conditions and the following disclaimer.
  83:../Generated_Code/CLS1.c **** **      *
  84:../Generated_Code/CLS1.c **** **      * - Redistributions in binary form must reproduce the above copyright notice, this
  85:../Generated_Code/CLS1.c **** **      *   list of conditions and the following disclaimer in the documentation and/or
  86:../Generated_Code/CLS1.c **** **      *   other materials provided with the distribution.
  87:../Generated_Code/CLS1.c **** **      *
  88:../Generated_Code/CLS1.c **** **      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  89:../Generated_Code/CLS1.c **** **      * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  90:../Generated_Code/CLS1.c **** **      * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  91:../Generated_Code/CLS1.c **** **      * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  92:../Generated_Code/CLS1.c **** **      * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  93:../Generated_Code/CLS1.c **** **      * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  94:../Generated_Code/CLS1.c **** **      * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  95:../Generated_Code/CLS1.c **** **      * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  96:../Generated_Code/CLS1.c **** **      * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  97:../Generated_Code/CLS1.c **** **      * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  98:../Generated_Code/CLS1.c **** ** ###################################################################*/
  99:../Generated_Code/CLS1.c **** /*!
 100:../Generated_Code/CLS1.c **** ** @file CLS1.c
 101:../Generated_Code/CLS1.c **** ** @version 01.00
 102:../Generated_Code/CLS1.c **** ** @brief
 103:../Generated_Code/CLS1.c **** **         Module implementing a command line shell.
 104:../Generated_Code/CLS1.c **** */         
 105:../Generated_Code/CLS1.c **** /*!
 106:../Generated_Code/CLS1.c **** **  @addtogroup CLS1_module CLS1 module documentation
 107:../Generated_Code/CLS1.c **** **  @{
 108:../Generated_Code/CLS1.c **** */         
 109:../Generated_Code/CLS1.c **** 
 110:../Generated_Code/CLS1.c **** /* MODULE CLS1. */
 111:../Generated_Code/CLS1.c **** #include <ctype.h> /* for isalnum*/
 112:../Generated_Code/CLS1.c **** 
 113:../Generated_Code/CLS1.c **** #include "CLS1.h"
 114:../Generated_Code/CLS1.c **** 
 115:../Generated_Code/CLS1.c **** uint8_t CLS1_DefaultShellBuffer[CLS1_DEFAULT_SHELL_BUFFER_SIZE]; /* default buffer which can be use
 116:../Generated_Code/CLS1.c **** #if CLS1_HISTORY_ENABLED
 117:../Generated_Code/CLS1.c ****   static uint8_t CLS1_history[CLS1_NOF_HISTORY][CLS1_HIST_LEN]; /* History buffers */
 118:../Generated_Code/CLS1.c ****   static uint8_t CLS1_history_index = 0; /* Selected command */
 119:../Generated_Code/CLS1.c **** #endif
 120:../Generated_Code/CLS1.c **** #if CLS1_ECHO_ENABLED
 121:../Generated_Code/CLS1.c ****   static bool CLS1_EchoEnabled = TRUE;
 122:../Generated_Code/CLS1.c **** #endif
 123:../Generated_Code/CLS1.c **** 
 124:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
 125:../Generated_Code/CLS1.c ****   #include "FreeRTOS.h"
 126:../Generated_Code/CLS1.c ****   #include "task.h"
 127:../Generated_Code/CLS1.c ****   #include "semphr.h"
 128:../Generated_Code/CLS1.c **** #endif
 129:../Generated_Code/CLS1.c **** 
 130:../Generated_Code/CLS1.c **** #ifdef __HC08__
 131:../Generated_Code/CLS1.c ****   #pragma MESSAGE DISABLE C3303 /* implicit concatenation of strings */
 132:../Generated_Code/CLS1.c **** #endif
 133:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
 134:../Generated_Code/CLS1.c ****   static xSemaphoreHandle ShellSem = NULL; /* Semaphore to protect shell SCI access */
 135:../Generated_Code/CLS1.c **** #endif
 136:../Generated_Code/CLS1.c **** 
 137:../Generated_Code/CLS1.c **** #if CLS1_DEFAULT_SERIAL
 138:../Generated_Code/CLS1.c ****   CLS1_ConstStdIOType CLS1_stdio =
 139:../Generated_Code/CLS1.c ****   {
 140:../Generated_Code/CLS1.c ****     (CLS1_StdIO_In_FctType)CLS1_ReadChar, /* stdin */
 141:../Generated_Code/CLS1.c ****     (CLS1_StdIO_OutErr_FctType)CLS1_SendChar, /* stdout */
 142:../Generated_Code/CLS1.c ****     (CLS1_StdIO_OutErr_FctType)CLS1_SendChar, /* stderr */
 143:../Generated_Code/CLS1.c ****     CLS1_KeyPressed /* if input is not empty */
 144:../Generated_Code/CLS1.c ****   };
 145:../Generated_Code/CLS1.c ****   static CLS1_ConstStdIOType *CLS1_currStdIO = &CLS1_stdio;
 146:../Generated_Code/CLS1.c **** #else
 147:../Generated_Code/CLS1.c ****   static CLS1_ConstStdIOType *CLS1_currStdIO = NULL; /* needs to be set through CLS1_SetStdio(); */
 148:../Generated_Code/CLS1.c **** #endif
 149:../Generated_Code/CLS1.c **** /* Internal method prototypes */
 150:../Generated_Code/CLS1.c **** static void SendSeparatedStrings(const uint8_t *strA, const uint8_t *strB, uint8_t tabChar, uint8_t
 151:../Generated_Code/CLS1.c **** 
 152:../Generated_Code/CLS1.c **** /*
 153:../Generated_Code/CLS1.c **** ** ===================================================================
 154:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendCh (component Shell)
 155:../Generated_Code/CLS1.c **** **     Description :
 156:../Generated_Code/CLS1.c **** **         Prints a character using an I/O function
 157:../Generated_Code/CLS1.c **** **     Parameters  :
 158:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 159:../Generated_Code/CLS1.c **** **         ch              - Character to send
 160:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 161:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 162:../Generated_Code/CLS1.c **** ** ===================================================================
 163:../Generated_Code/CLS1.c **** */
 164:../Generated_Code/CLS1.c **** void CLS1_SendCh(uint8_t ch, CLS1_StdIO_OutErr_FctType io)
 165:../Generated_Code/CLS1.c **** {
  36              		.loc 1 165 0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 8
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40 0000 80B5     		push	{r7, lr}
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 7, -8
  43              		.cfi_offset 14, -4
  44 0002 82B0     		sub	sp, sp, #8
  45              		.cfi_def_cfa_offset 16
  46 0004 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  48 0006 0346     		mov	r3, r0
  49 0008 3960     		str	r1, [r7]
  50 000a FB71     		strb	r3, [r7, #7]
 166:../Generated_Code/CLS1.c ****   if (io==NULL) {
  51              		.loc 1 166 0
  52 000c 3B68     		ldr	r3, [r7]
  53 000e 002B     		cmp	r3, #0
  54 0010 00D1     		bne	.L2
 167:../Generated_Code/CLS1.c ****     return;
  55              		.loc 1 167 0
  56 0012 03E0     		b	.L1
  57              	.L2:
 168:../Generated_Code/CLS1.c ****   }
 169:../Generated_Code/CLS1.c ****   io(ch);
  58              		.loc 1 169 0
  59 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  60 0016 3B68     		ldr	r3, [r7]
  61 0018 1046     		mov	r0, r2
  62 001a 9847     		blx	r3
  63              	.L1:
 170:../Generated_Code/CLS1.c **** }
  64              		.loc 1 170 0
  65 001c 0837     		adds	r7, r7, #8
  66 001e BD46     		mov	sp, r7
  67              		@ sp needed
  68 0020 80BD     		pop	{r7, pc}
  69              		.cfi_endproc
  70              	.LFE0:
  72 0022 00BF     		.section	.text.CLS1_SendStr,"ax",%progbits
  73              		.align	2
  74              		.global	CLS1_SendStr
  75              		.thumb
  76              		.thumb_func
  78              	CLS1_SendStr:
  79              	.LFB1:
 171:../Generated_Code/CLS1.c **** 
 172:../Generated_Code/CLS1.c **** /*
 173:../Generated_Code/CLS1.c **** ** ===================================================================
 174:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendStr (component Shell)
 175:../Generated_Code/CLS1.c **** **     Description :
 176:../Generated_Code/CLS1.c **** **         Prints a string using an I/O function
 177:../Generated_Code/CLS1.c **** **     Parameters  :
 178:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 179:../Generated_Code/CLS1.c **** **       * str             - Pointer to string (zero terminated) to be
 180:../Generated_Code/CLS1.c **** **                           printed.
 181:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 182:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 183:../Generated_Code/CLS1.c **** ** ===================================================================
 184:../Generated_Code/CLS1.c **** */
 185:../Generated_Code/CLS1.c **** /*!
 186:../Generated_Code/CLS1.c ****  * \brief Prints a string using I/O callbacks
 187:../Generated_Code/CLS1.c ****  * \param[in] str String (zero terminated) to be printed
 188:../Generated_Code/CLS1.c ****  * \param[in] io I/O function to be used for printing
 189:../Generated_Code/CLS1.c ****  */
 190:../Generated_Code/CLS1.c **** void CLS1_SendStr(const uint8_t *str, CLS1_StdIO_OutErr_FctType io)
 191:../Generated_Code/CLS1.c **** {
  80              		.loc 1 191 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 82B0     		sub	sp, sp, #8
  89              		.cfi_def_cfa_offset 16
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  92 0006 7860     		str	r0, [r7, #4]
  93 0008 3960     		str	r1, [r7]
 192:../Generated_Code/CLS1.c ****   if (io==NULL) {
  94              		.loc 1 192 0
  95 000a 3B68     		ldr	r3, [r7]
  96 000c 002B     		cmp	r3, #0
  97 000e 00D1     		bne	.L5
 193:../Generated_Code/CLS1.c ****     return;
  98              		.loc 1 193 0
  99 0010 0BE0     		b	.L4
 100              	.L5:
 194:../Generated_Code/CLS1.c ****   }
 195:../Generated_Code/CLS1.c ****   while(*str!='\0') {
 101              		.loc 1 195 0
 102 0012 06E0     		b	.L7
 103              	.L8:
 196:../Generated_Code/CLS1.c ****     io(*str++);
 104              		.loc 1 196 0
 105 0014 7B68     		ldr	r3, [r7, #4]
 106 0016 5A1C     		adds	r2, r3, #1
 107 0018 7A60     		str	r2, [r7, #4]
 108 001a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 109 001c 3B68     		ldr	r3, [r7]
 110 001e 1046     		mov	r0, r2
 111 0020 9847     		blx	r3
 112              	.L7:
 195:../Generated_Code/CLS1.c ****   while(*str!='\0') {
 113              		.loc 1 195 0 discriminator 1
 114 0022 7B68     		ldr	r3, [r7, #4]
 115 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 116 0026 002B     		cmp	r3, #0
 117 0028 F4D1     		bne	.L8
 118              	.L4:
 197:../Generated_Code/CLS1.c ****   }
 198:../Generated_Code/CLS1.c **** }
 119              		.loc 1 198 0
 120 002a 0837     		adds	r7, r7, #8
 121 002c BD46     		mov	sp, r7
 122              		@ sp needed
 123 002e 80BD     		pop	{r7, pc}
 124              		.cfi_endproc
 125              	.LFE1:
 127              		.section	.text.CLS1_SendNum32s,"ax",%progbits
 128              		.align	2
 129              		.global	CLS1_SendNum32s
 130              		.thumb
 131              		.thumb_func
 133              	CLS1_SendNum32s:
 134              	.LFB2:
 199:../Generated_Code/CLS1.c **** 
 200:../Generated_Code/CLS1.c **** /*
 201:../Generated_Code/CLS1.c **** ** ===================================================================
 202:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendNum32s (component Shell)
 203:../Generated_Code/CLS1.c **** **     Description :
 204:../Generated_Code/CLS1.c **** **         Sends a 32bit signed number to the given I/O
 205:../Generated_Code/CLS1.c **** **     Parameters  :
 206:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 207:../Generated_Code/CLS1.c **** **         val             - number to print
 208:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 209:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 210:../Generated_Code/CLS1.c **** ** ===================================================================
 211:../Generated_Code/CLS1.c **** */
 212:../Generated_Code/CLS1.c **** void CLS1_SendNum32s(int32_t val, CLS1_StdIO_OutErr_FctType io)
 213:../Generated_Code/CLS1.c **** {
 135              		.loc 1 213 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 24
 138              		@ frame_needed = 1, uses_anonymous_args = 0
 139 0000 80B5     		push	{r7, lr}
 140              		.cfi_def_cfa_offset 8
 141              		.cfi_offset 7, -8
 142              		.cfi_offset 14, -4
 143 0002 86B0     		sub	sp, sp, #24
 144              		.cfi_def_cfa_offset 32
 145 0004 00AF     		add	r7, sp, #0
 146              		.cfi_def_cfa_register 7
 147 0006 7860     		str	r0, [r7, #4]
 148 0008 3960     		str	r1, [r7]
 214:../Generated_Code/CLS1.c ****   unsigned char buf[sizeof("-1234567890")];
 215:../Generated_Code/CLS1.c **** 
 216:../Generated_Code/CLS1.c ****   UTIL1_Num32sToStr(buf, sizeof(buf), val);
 149              		.loc 1 216 0
 150 000a 07F10C03 		add	r3, r7, #12
 151 000e 1846     		mov	r0, r3
 152 0010 0C21     		movs	r1, #12
 153 0012 7A68     		ldr	r2, [r7, #4]
 154 0014 FFF7FEFF 		bl	UTIL1_Num32sToStr
 217:../Generated_Code/CLS1.c ****   CLS1_SendStr(buf, io);
 155              		.loc 1 217 0
 156 0018 07F10C03 		add	r3, r7, #12
 157 001c 1846     		mov	r0, r3
 158 001e 3968     		ldr	r1, [r7]
 159 0020 FFF7FEFF 		bl	CLS1_SendStr
 218:../Generated_Code/CLS1.c **** }
 160              		.loc 1 218 0
 161 0024 1837     		adds	r7, r7, #24
 162 0026 BD46     		mov	sp, r7
 163              		@ sp needed
 164 0028 80BD     		pop	{r7, pc}
 165              		.cfi_endproc
 166              	.LFE2:
 168 002a 00BF     		.section	.text.CLS1_SendNum32u,"ax",%progbits
 169              		.align	2
 170              		.global	CLS1_SendNum32u
 171              		.thumb
 172              		.thumb_func
 174              	CLS1_SendNum32u:
 175              	.LFB3:
 219:../Generated_Code/CLS1.c **** 
 220:../Generated_Code/CLS1.c **** /*
 221:../Generated_Code/CLS1.c **** ** ===================================================================
 222:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendNum32u (component Shell)
 223:../Generated_Code/CLS1.c **** **     Description :
 224:../Generated_Code/CLS1.c **** **         Sends a 32bit unsigned number to the given I/O
 225:../Generated_Code/CLS1.c **** **     Parameters  :
 226:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 227:../Generated_Code/CLS1.c **** **         val             - number to print
 228:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 229:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 230:../Generated_Code/CLS1.c **** ** ===================================================================
 231:../Generated_Code/CLS1.c **** */
 232:../Generated_Code/CLS1.c **** void CLS1_SendNum32u(uint32_t val, CLS1_StdIO_OutErr_FctType io)
 233:../Generated_Code/CLS1.c **** {
 176              		.loc 1 233 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 24
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 180 0000 80B5     		push	{r7, lr}
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 86B0     		sub	sp, sp, #24
 185              		.cfi_def_cfa_offset 32
 186 0004 00AF     		add	r7, sp, #0
 187              		.cfi_def_cfa_register 7
 188 0006 7860     		str	r0, [r7, #4]
 189 0008 3960     		str	r1, [r7]
 234:../Generated_Code/CLS1.c ****   unsigned char buf[sizeof("1234567890")];
 235:../Generated_Code/CLS1.c **** 
 236:../Generated_Code/CLS1.c ****   UTIL1_Num32uToStr(buf, sizeof(buf), val);
 190              		.loc 1 236 0
 191 000a 07F10C03 		add	r3, r7, #12
 192 000e 1846     		mov	r0, r3
 193 0010 0B21     		movs	r1, #11
 194 0012 7A68     		ldr	r2, [r7, #4]
 195 0014 FFF7FEFF 		bl	UTIL1_Num32uToStr
 237:../Generated_Code/CLS1.c ****   CLS1_SendStr(buf, io);
 196              		.loc 1 237 0
 197 0018 07F10C03 		add	r3, r7, #12
 198 001c 1846     		mov	r0, r3
 199 001e 3968     		ldr	r1, [r7]
 200 0020 FFF7FEFF 		bl	CLS1_SendStr
 238:../Generated_Code/CLS1.c **** }
 201              		.loc 1 238 0
 202 0024 1837     		adds	r7, r7, #24
 203 0026 BD46     		mov	sp, r7
 204              		@ sp needed
 205 0028 80BD     		pop	{r7, pc}
 206              		.cfi_endproc
 207              	.LFE3:
 209 002a 00BF     		.section	.text.CLS1_SendNum16s,"ax",%progbits
 210              		.align	2
 211              		.global	CLS1_SendNum16s
 212              		.thumb
 213              		.thumb_func
 215              	CLS1_SendNum16s:
 216              	.LFB4:
 239:../Generated_Code/CLS1.c **** 
 240:../Generated_Code/CLS1.c **** /*
 241:../Generated_Code/CLS1.c **** ** ===================================================================
 242:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendNum16s (component Shell)
 243:../Generated_Code/CLS1.c **** **     Description :
 244:../Generated_Code/CLS1.c **** **         Sends a 16bit signed number to the given I/O
 245:../Generated_Code/CLS1.c **** **     Parameters  :
 246:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 247:../Generated_Code/CLS1.c **** **         val             - number to print
 248:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 249:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 250:../Generated_Code/CLS1.c **** ** ===================================================================
 251:../Generated_Code/CLS1.c **** */
 252:../Generated_Code/CLS1.c **** void CLS1_SendNum16s(int16_t val, CLS1_StdIO_OutErr_FctType io)
 253:../Generated_Code/CLS1.c **** {
 217              		.loc 1 253 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 16
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221 0000 80B5     		push	{r7, lr}
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 7, -8
 224              		.cfi_offset 14, -4
 225 0002 84B0     		sub	sp, sp, #16
 226              		.cfi_def_cfa_offset 24
 227 0004 00AF     		add	r7, sp, #0
 228              		.cfi_def_cfa_register 7
 229 0006 0346     		mov	r3, r0
 230 0008 3960     		str	r1, [r7]
 231 000a FB80     		strh	r3, [r7, #6]	@ movhi
 254:../Generated_Code/CLS1.c ****   unsigned char buf[sizeof("-12345")];
 255:../Generated_Code/CLS1.c **** 
 256:../Generated_Code/CLS1.c ****   UTIL1_Num16sToStr(buf, sizeof(buf), val);
 232              		.loc 1 256 0
 233 000c 07F10802 		add	r2, r7, #8
 234 0010 B7F90630 		ldrsh	r3, [r7, #6]
 235 0014 1046     		mov	r0, r2
 236 0016 0721     		movs	r1, #7
 237 0018 1A46     		mov	r2, r3
 238 001a FFF7FEFF 		bl	UTIL1_Num16sToStr
 257:../Generated_Code/CLS1.c ****   CLS1_SendStr(buf, io);
 239              		.loc 1 257 0
 240 001e 07F10803 		add	r3, r7, #8
 241 0022 1846     		mov	r0, r3
 242 0024 3968     		ldr	r1, [r7]
 243 0026 FFF7FEFF 		bl	CLS1_SendStr
 258:../Generated_Code/CLS1.c **** }
 244              		.loc 1 258 0
 245 002a 1037     		adds	r7, r7, #16
 246 002c BD46     		mov	sp, r7
 247              		@ sp needed
 248 002e 80BD     		pop	{r7, pc}
 249              		.cfi_endproc
 250              	.LFE4:
 252              		.section	.text.CLS1_SendNum16u,"ax",%progbits
 253              		.align	2
 254              		.global	CLS1_SendNum16u
 255              		.thumb
 256              		.thumb_func
 258              	CLS1_SendNum16u:
 259              	.LFB5:
 259:../Generated_Code/CLS1.c **** 
 260:../Generated_Code/CLS1.c **** /*
 261:../Generated_Code/CLS1.c **** ** ===================================================================
 262:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendNum16u (component Shell)
 263:../Generated_Code/CLS1.c **** **     Description :
 264:../Generated_Code/CLS1.c **** **         Sends a 16bit unsigned number to the given I/O
 265:../Generated_Code/CLS1.c **** **     Parameters  :
 266:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 267:../Generated_Code/CLS1.c **** **         val             - number to print
 268:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 269:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 270:../Generated_Code/CLS1.c **** ** ===================================================================
 271:../Generated_Code/CLS1.c **** */
 272:../Generated_Code/CLS1.c **** void CLS1_SendNum16u(uint16_t val, CLS1_StdIO_OutErr_FctType io)
 273:../Generated_Code/CLS1.c **** {
 260              		.loc 1 273 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 16
 263              		@ frame_needed = 1, uses_anonymous_args = 0
 264 0000 80B5     		push	{r7, lr}
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268 0002 84B0     		sub	sp, sp, #16
 269              		.cfi_def_cfa_offset 24
 270 0004 00AF     		add	r7, sp, #0
 271              		.cfi_def_cfa_register 7
 272 0006 0346     		mov	r3, r0
 273 0008 3960     		str	r1, [r7]
 274 000a FB80     		strh	r3, [r7, #6]	@ movhi
 274:../Generated_Code/CLS1.c ****   unsigned char buf[sizeof("12345")];
 275:../Generated_Code/CLS1.c **** 
 276:../Generated_Code/CLS1.c ****   UTIL1_Num16uToStr(buf, sizeof(buf), val);
 275              		.loc 1 276 0
 276 000c 07F10802 		add	r2, r7, #8
 277 0010 FB88     		ldrh	r3, [r7, #6]
 278 0012 1046     		mov	r0, r2
 279 0014 0621     		movs	r1, #6
 280 0016 1A46     		mov	r2, r3
 281 0018 FFF7FEFF 		bl	UTIL1_Num16uToStr
 277:../Generated_Code/CLS1.c ****   CLS1_SendStr(buf, io);
 282              		.loc 1 277 0
 283 001c 07F10803 		add	r3, r7, #8
 284 0020 1846     		mov	r0, r3
 285 0022 3968     		ldr	r1, [r7]
 286 0024 FFF7FEFF 		bl	CLS1_SendStr
 278:../Generated_Code/CLS1.c **** }
 287              		.loc 1 278 0
 288 0028 1037     		adds	r7, r7, #16
 289 002a BD46     		mov	sp, r7
 290              		@ sp needed
 291 002c 80BD     		pop	{r7, pc}
 292              		.cfi_endproc
 293              	.LFE5:
 295 002e 00BF     		.section	.text.CLS1_SendNum8u,"ax",%progbits
 296              		.align	2
 297              		.global	CLS1_SendNum8u
 298              		.thumb
 299              		.thumb_func
 301              	CLS1_SendNum8u:
 302              	.LFB6:
 279:../Generated_Code/CLS1.c **** 
 280:../Generated_Code/CLS1.c **** /*
 281:../Generated_Code/CLS1.c **** ** ===================================================================
 282:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendNum8u (component Shell)
 283:../Generated_Code/CLS1.c **** **     Description :
 284:../Generated_Code/CLS1.c **** **         Sends an 8bit unsigned number to the given I/O
 285:../Generated_Code/CLS1.c **** **     Parameters  :
 286:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 287:../Generated_Code/CLS1.c **** **         val             - number to print
 288:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 289:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 290:../Generated_Code/CLS1.c **** ** ===================================================================
 291:../Generated_Code/CLS1.c **** */
 292:../Generated_Code/CLS1.c **** void CLS1_SendNum8u(uint8_t val, CLS1_StdIO_OutErr_FctType io)
 293:../Generated_Code/CLS1.c **** {
 303              		.loc 1 293 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 16
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307 0000 80B5     		push	{r7, lr}
 308              		.cfi_def_cfa_offset 8
 309              		.cfi_offset 7, -8
 310              		.cfi_offset 14, -4
 311 0002 84B0     		sub	sp, sp, #16
 312              		.cfi_def_cfa_offset 24
 313 0004 00AF     		add	r7, sp, #0
 314              		.cfi_def_cfa_register 7
 315 0006 0346     		mov	r3, r0
 316 0008 3960     		str	r1, [r7]
 317 000a FB71     		strb	r3, [r7, #7]
 294:../Generated_Code/CLS1.c ****   unsigned char buf[sizeof("123")];
 295:../Generated_Code/CLS1.c **** 
 296:../Generated_Code/CLS1.c ****   UTIL1_Num8uToStr(buf, sizeof(buf), val);
 318              		.loc 1 296 0
 319 000c 07F10C02 		add	r2, r7, #12
 320 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 321 0012 1046     		mov	r0, r2
 322 0014 0421     		movs	r1, #4
 323 0016 1A46     		mov	r2, r3
 324 0018 FFF7FEFF 		bl	UTIL1_Num8uToStr
 297:../Generated_Code/CLS1.c ****   CLS1_SendStr(buf, io);
 325              		.loc 1 297 0
 326 001c 07F10C03 		add	r3, r7, #12
 327 0020 1846     		mov	r0, r3
 328 0022 3968     		ldr	r1, [r7]
 329 0024 FFF7FEFF 		bl	CLS1_SendStr
 298:../Generated_Code/CLS1.c **** }
 330              		.loc 1 298 0
 331 0028 1037     		adds	r7, r7, #16
 332 002a BD46     		mov	sp, r7
 333              		@ sp needed
 334 002c 80BD     		pop	{r7, pc}
 335              		.cfi_endproc
 336              	.LFE6:
 338 002e 00BF     		.section	.text.CLS1_SendNum8s,"ax",%progbits
 339              		.align	2
 340              		.global	CLS1_SendNum8s
 341              		.thumb
 342              		.thumb_func
 344              	CLS1_SendNum8s:
 345              	.LFB7:
 299:../Generated_Code/CLS1.c **** 
 300:../Generated_Code/CLS1.c **** /*
 301:../Generated_Code/CLS1.c **** ** ===================================================================
 302:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendNum8s (component Shell)
 303:../Generated_Code/CLS1.c **** **     Description :
 304:../Generated_Code/CLS1.c **** **         Sends an 8bit signed number to the given I/O
 305:../Generated_Code/CLS1.c **** **     Parameters  :
 306:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 307:../Generated_Code/CLS1.c **** **         val             - number to print
 308:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 309:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 310:../Generated_Code/CLS1.c **** ** ===================================================================
 311:../Generated_Code/CLS1.c **** */
 312:../Generated_Code/CLS1.c **** void CLS1_SendNum8s(int8_t val, CLS1_StdIO_OutErr_FctType io)
 313:../Generated_Code/CLS1.c **** {
 346              		.loc 1 313 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 16
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 84B0     		sub	sp, sp, #16
 355              		.cfi_def_cfa_offset 24
 356 0004 00AF     		add	r7, sp, #0
 357              		.cfi_def_cfa_register 7
 358 0006 0346     		mov	r3, r0
 359 0008 3960     		str	r1, [r7]
 360 000a FB71     		strb	r3, [r7, #7]
 314:../Generated_Code/CLS1.c ****   unsigned char buf[sizeof("-123")];
 315:../Generated_Code/CLS1.c **** 
 316:../Generated_Code/CLS1.c ****   UTIL1_Num8sToStr(buf, sizeof(buf), val);
 361              		.loc 1 316 0
 362 000c 07F10802 		add	r2, r7, #8
 363 0010 97F90730 		ldrsb	r3, [r7, #7]
 364 0014 1046     		mov	r0, r2
 365 0016 0521     		movs	r1, #5
 366 0018 1A46     		mov	r2, r3
 367 001a FFF7FEFF 		bl	UTIL1_Num8sToStr
 317:../Generated_Code/CLS1.c ****   CLS1_SendStr(buf, io);
 368              		.loc 1 317 0
 369 001e 07F10803 		add	r3, r7, #8
 370 0022 1846     		mov	r0, r3
 371 0024 3968     		ldr	r1, [r7]
 372 0026 FFF7FEFF 		bl	CLS1_SendStr
 318:../Generated_Code/CLS1.c **** }
 373              		.loc 1 318 0
 374 002a 1037     		adds	r7, r7, #16
 375 002c BD46     		mov	sp, r7
 376              		@ sp needed
 377 002e 80BD     		pop	{r7, pc}
 378              		.cfi_endproc
 379              	.LFE7:
 381              		.section	.rodata
 382              		.align	2
 383              	.LC0:
 384 0000 68656C70 		.ascii	"help\000"
 384      00
 385 0005 000000   		.align	2
 386              	.LC1:
 387 0008 434C5331 		.ascii	"CLS1 help\000"
 387      2068656C 
 387      7000
 388 0012 0000     		.align	2
 389              	.LC2:
 390 0014 0D0A00   		.ascii	"\015\012\000"
 391 0017 00       		.align	2
 392              	.LC3:
 393 0018 2D2D2D2D 		.ascii	"---------------------------------------------------"
 393      2D2D2D2D 
 393      2D2D2D2D 
 393      2D2D2D2D 
 393      2D2D2D2D 
 394 004b 2D2D2D2D 		.ascii	"-----------\000"
 394      2D2D2D2D 
 394      2D2D2D00 
 395 0057 00       		.align	2
 396              	.LC4:
 397 0058 4B323220 		.ascii	"K22 Robot Master INTRO\000"
 397      526F626F 
 397      74204D61 
 397      73746572 
 397      20494E54 
 398 006f 00       		.align	2
 399              	.LC5:
 400 0070 434C5331 		.ascii	"CLS1\000"
 400      00
 401 0075 000000   		.align	2
 402              	.LC6:
 403 0078 47726F75 		.ascii	"Group of CLS1 commands\015\012\000"
 403      70206F66 
 403      20434C53 
 403      3120636F 
 403      6D6D616E 
 404 0091 000000   		.align	2
 405              	.LC7:
 406 0094 20206865 		.ascii	"  help|status\000"
 406      6C707C73 
 406      74617475 
 406      7300
 407 00a2 0000     		.align	2
 408              	.LC8:
 409 00a4 5072696E 		.ascii	"Print help or status information\015\012\000"
 409      74206865 
 409      6C70206F 
 409      72207374 
 409      61747573 
 410 00c7 00       		.align	2
 411              	.LC9:
 412 00c8 73746174 		.ascii	"status\000"
 412      757300
 413 00cf 00       		.align	2
 414              	.LC10:
 415 00d0 434C5331 		.ascii	"CLS1 status\000"
 415      20737461 
 415      74757300 
 416              		.section	.text.CLS1_ParseCommand,"ax",%progbits
 417              		.align	2
 418              		.global	CLS1_ParseCommand
 419              		.thumb
 420              		.thumb_func
 422              	CLS1_ParseCommand:
 423              	.LFB8:
 319:../Generated_Code/CLS1.c **** 
 320:../Generated_Code/CLS1.c **** /*
 321:../Generated_Code/CLS1.c **** ** ===================================================================
 322:../Generated_Code/CLS1.c **** **     Method      :  CLS1_ParseCommand (component Shell)
 323:../Generated_Code/CLS1.c **** **     Description :
 324:../Generated_Code/CLS1.c **** **         Parses a shell command. Use 'help' to get a list of
 325:../Generated_Code/CLS1.c **** **         supported commands.
 326:../Generated_Code/CLS1.c **** **     Parameters  :
 327:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 328:../Generated_Code/CLS1.c **** **       * cmd             - Pointer to command string
 329:../Generated_Code/CLS1.c **** **       * handled         - Pointer to variable to indicate if
 330:../Generated_Code/CLS1.c **** **                           the command has been handled. The caller
 331:../Generated_Code/CLS1.c **** **                           passes this variable to the command scanner
 332:../Generated_Code/CLS1.c **** **                           to find out if the passed command has been
 333:../Generated_Code/CLS1.c **** **                           handled. The variable is initialized by the
 334:../Generated_Code/CLS1.c **** **                           caller.
 335:../Generated_Code/CLS1.c **** **       * io              - Pointer to I/O callbacks
 336:../Generated_Code/CLS1.c **** **     Returns     :
 337:../Generated_Code/CLS1.c **** **         ---             - Error code
 338:../Generated_Code/CLS1.c **** ** ===================================================================
 339:../Generated_Code/CLS1.c **** */
 340:../Generated_Code/CLS1.c **** uint8_t CLS1_ParseCommand(const uint8_t *cmd, bool *handled, CLS1_ConstStdIOType *io)
 341:../Generated_Code/CLS1.c **** {
 424              		.loc 1 341 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 16
 427              		@ frame_needed = 1, uses_anonymous_args = 0
 428 0000 80B5     		push	{r7, lr}
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 0002 84B0     		sub	sp, sp, #16
 433              		.cfi_def_cfa_offset 24
 434 0004 00AF     		add	r7, sp, #0
 435              		.cfi_def_cfa_register 7
 436 0006 F860     		str	r0, [r7, #12]
 437 0008 B960     		str	r1, [r7, #8]
 438 000a 7A60     		str	r2, [r7, #4]
 342:../Generated_Code/CLS1.c ****   if (UTIL1_strcmp((char*)cmd, CLS1_CMD_HELP)==0 || UTIL1_strcmp((char*)cmd, "CLS1 help")==0) {
 439              		.loc 1 342 0
 440 000c F868     		ldr	r0, [r7, #12]
 441 000e 3249     		ldr	r1, .L21
 442 0010 FFF7FEFF 		bl	strcmp
 443 0014 0346     		mov	r3, r0
 444 0016 002B     		cmp	r3, #0
 445 0018 06D0     		beq	.L16
 446              		.loc 1 342 0 is_stmt 0 discriminator 1
 447 001a F868     		ldr	r0, [r7, #12]
 448 001c 2F49     		ldr	r1, .L21+4
 449 001e FFF7FEFF 		bl	strcmp
 450 0022 0346     		mov	r3, r0
 451 0024 002B     		cmp	r3, #0
 452 0026 3CD1     		bne	.L17
 453              	.L16:
 343:../Generated_Code/CLS1.c ****     CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
 454              		.loc 1 343 0 is_stmt 1
 455 0028 7B68     		ldr	r3, [r7, #4]
 456 002a 5B68     		ldr	r3, [r3, #4]
 457 002c 2C48     		ldr	r0, .L21+8
 458 002e 1946     		mov	r1, r3
 459 0030 FFF7FEFF 		bl	CLS1_SendStr
 344:../Generated_Code/CLS1.c ****     CLS1_SendStr((unsigned char*)CLS1_DASH_LINE, io->stdOut);
 460              		.loc 1 344 0
 461 0034 7B68     		ldr	r3, [r7, #4]
 462 0036 5B68     		ldr	r3, [r3, #4]
 463 0038 2A48     		ldr	r0, .L21+12
 464 003a 1946     		mov	r1, r3
 465 003c FFF7FEFF 		bl	CLS1_SendStr
 345:../Generated_Code/CLS1.c ****     CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
 466              		.loc 1 345 0
 467 0040 7B68     		ldr	r3, [r7, #4]
 468 0042 5B68     		ldr	r3, [r3, #4]
 469 0044 2648     		ldr	r0, .L21+8
 470 0046 1946     		mov	r1, r3
 471 0048 FFF7FEFF 		bl	CLS1_SendStr
 346:../Generated_Code/CLS1.c ****     CLS1_SendStr((unsigned char*)CLS1_CONFIG_PROJECT_NAME_STRING, io->stdOut);
 472              		.loc 1 346 0
 473 004c 7B68     		ldr	r3, [r7, #4]
 474 004e 5B68     		ldr	r3, [r3, #4]
 475 0050 2548     		ldr	r0, .L21+16
 476 0052 1946     		mov	r1, r3
 477 0054 FFF7FEFF 		bl	CLS1_SendStr
 347:../Generated_Code/CLS1.c ****     CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
 478              		.loc 1 347 0
 479 0058 7B68     		ldr	r3, [r7, #4]
 480 005a 5B68     		ldr	r3, [r3, #4]
 481 005c 2048     		ldr	r0, .L21+8
 482 005e 1946     		mov	r1, r3
 483 0060 FFF7FEFF 		bl	CLS1_SendStr
 348:../Generated_Code/CLS1.c ****     CLS1_SendStr((unsigned char*)CLS1_DASH_LINE, io->stdOut);
 484              		.loc 1 348 0
 485 0064 7B68     		ldr	r3, [r7, #4]
 486 0066 5B68     		ldr	r3, [r3, #4]
 487 0068 1E48     		ldr	r0, .L21+12
 488 006a 1946     		mov	r1, r3
 489 006c FFF7FEFF 		bl	CLS1_SendStr
 349:../Generated_Code/CLS1.c ****     CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
 490              		.loc 1 349 0
 491 0070 7B68     		ldr	r3, [r7, #4]
 492 0072 5B68     		ldr	r3, [r3, #4]
 493 0074 1A48     		ldr	r0, .L21+8
 494 0076 1946     		mov	r1, r3
 495 0078 FFF7FEFF 		bl	CLS1_SendStr
 350:../Generated_Code/CLS1.c ****     CLS1_SendHelpStr((unsigned char*)"CLS1", (const unsigned char*)"Group of CLS1 commands\r\n", io
 496              		.loc 1 350 0
 497 007c 7B68     		ldr	r3, [r7, #4]
 498 007e 5B68     		ldr	r3, [r3, #4]
 499 0080 1A48     		ldr	r0, .L21+20
 500 0082 1B49     		ldr	r1, .L21+24
 501 0084 1A46     		mov	r2, r3
 502 0086 FFF7FEFF 		bl	CLS1_SendHelpStr
 351:../Generated_Code/CLS1.c ****     CLS1_SendHelpStr((unsigned char*)"  help|status", (const unsigned char*)"Print help or status i
 503              		.loc 1 351 0
 504 008a 7B68     		ldr	r3, [r7, #4]
 505 008c 5B68     		ldr	r3, [r3, #4]
 506 008e 1948     		ldr	r0, .L21+28
 507 0090 1949     		ldr	r1, .L21+32
 508 0092 1A46     		mov	r2, r3
 509 0094 FFF7FEFF 		bl	CLS1_SendHelpStr
 352:../Generated_Code/CLS1.c **** #if CLS1_ECHO_ENABLED
 353:../Generated_Code/CLS1.c ****     CLS1_SendHelpStr((unsigned char*)"  echo (on|off)", (const unsigned char*)"Turn echo on or off\
 354:../Generated_Code/CLS1.c **** #endif
 355:../Generated_Code/CLS1.c ****     *handled = TRUE;
 510              		.loc 1 355 0
 511 0098 BB68     		ldr	r3, [r7, #8]
 512 009a 0122     		movs	r2, #1
 513 009c 1A70     		strb	r2, [r3]
 356:../Generated_Code/CLS1.c ****     return ERR_OK;
 514              		.loc 1 356 0
 515 009e 0023     		movs	r3, #0
 516 00a0 16E0     		b	.L18
 517              	.L17:
 357:../Generated_Code/CLS1.c **** #if CLS1_ECHO_ENABLED
 358:../Generated_Code/CLS1.c ****   } else if ((UTIL1_strcmp((char*)cmd, "CLS1 echo on")==0)) {
 359:../Generated_Code/CLS1.c ****     *handled = TRUE;
 360:../Generated_Code/CLS1.c ****     CLS1_EchoEnabled = TRUE;
 361:../Generated_Code/CLS1.c ****     return ERR_OK;
 362:../Generated_Code/CLS1.c ****   } else if ((UTIL1_strcmp((char*)cmd, "CLS1 echo off")==0)) {
 363:../Generated_Code/CLS1.c ****     *handled = TRUE;
 364:../Generated_Code/CLS1.c ****     CLS1_EchoEnabled = FALSE;
 365:../Generated_Code/CLS1.c ****     return ERR_OK;
 366:../Generated_Code/CLS1.c **** #endif
 367:../Generated_Code/CLS1.c ****   } else if ((UTIL1_strcmp((char*)cmd, CLS1_CMD_STATUS)==0) || (UTIL1_strcmp((char*)cmd, "CLS1 stat
 518              		.loc 1 367 0
 519 00a2 F868     		ldr	r0, [r7, #12]
 520 00a4 1549     		ldr	r1, .L21+36
 521 00a6 FFF7FEFF 		bl	strcmp
 522 00aa 0346     		mov	r3, r0
 523 00ac 002B     		cmp	r3, #0
 524 00ae 06D0     		beq	.L19
 525              		.loc 1 367 0 is_stmt 0 discriminator 1
 526 00b0 F868     		ldr	r0, [r7, #12]
 527 00b2 1349     		ldr	r1, .L21+40
 528 00b4 FFF7FEFF 		bl	strcmp
 529 00b8 0346     		mov	r3, r0
 530 00ba 002B     		cmp	r3, #0
 531 00bc 07D1     		bne	.L20
 532              	.L19:
 368:../Generated_Code/CLS1.c ****     *handled = TRUE;
 533              		.loc 1 368 0 is_stmt 1
 534 00be BB68     		ldr	r3, [r7, #8]
 535 00c0 0122     		movs	r2, #1
 536 00c2 1A70     		strb	r2, [r3]
 369:../Generated_Code/CLS1.c ****     return CLS1_PrintStatus(io);
 537              		.loc 1 369 0
 538 00c4 7868     		ldr	r0, [r7, #4]
 539 00c6 FFF7FEFF 		bl	CLS1_PrintStatus
 540 00ca 0346     		mov	r3, r0
 541 00cc 00E0     		b	.L18
 542              	.L20:
 370:../Generated_Code/CLS1.c ****   }
 371:../Generated_Code/CLS1.c ****   return ERR_OK; /* no error */
 543              		.loc 1 371 0
 544 00ce 0023     		movs	r3, #0
 545              	.L18:
 372:../Generated_Code/CLS1.c **** }
 546              		.loc 1 372 0
 547 00d0 1846     		mov	r0, r3
 548 00d2 1037     		adds	r7, r7, #16
 549 00d4 BD46     		mov	sp, r7
 550              		@ sp needed
 551 00d6 80BD     		pop	{r7, pc}
 552              	.L22:
 553              		.align	2
 554              	.L21:
 555 00d8 00000000 		.word	.LC0
 556 00dc 08000000 		.word	.LC1
 557 00e0 14000000 		.word	.LC2
 558 00e4 18000000 		.word	.LC3
 559 00e8 58000000 		.word	.LC4
 560 00ec 70000000 		.word	.LC5
 561 00f0 78000000 		.word	.LC6
 562 00f4 94000000 		.word	.LC7
 563 00f8 A4000000 		.word	.LC8
 564 00fc C8000000 		.word	.LC9
 565 0100 D0000000 		.word	.LC10
 566              		.cfi_endproc
 567              	.LFE8:
 569              		.section	.rodata
 570              		.align	2
 571              	.LC11:
 572 00dc 434D443E 		.ascii	"CMD> \000"
 572      2000
 573              		.section	.text.CLS1_PrintPrompt,"ax",%progbits
 574              		.align	2
 575              		.global	CLS1_PrintPrompt
 576              		.thumb
 577              		.thumb_func
 579              	CLS1_PrintPrompt:
 580              	.LFB9:
 373:../Generated_Code/CLS1.c **** 
 374:../Generated_Code/CLS1.c **** /*
 375:../Generated_Code/CLS1.c **** ** ===================================================================
 376:../Generated_Code/CLS1.c **** **     Method      :  CLS1_PrintPrompt (component Shell)
 377:../Generated_Code/CLS1.c **** **     Description :
 378:../Generated_Code/CLS1.c **** **         Prints the prompt to the stdOut channel
 379:../Generated_Code/CLS1.c **** **     Parameters  :
 380:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 381:../Generated_Code/CLS1.c **** **       * io              - Pointer to IO to be used
 382:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 383:../Generated_Code/CLS1.c **** ** ===================================================================
 384:../Generated_Code/CLS1.c **** */
 385:../Generated_Code/CLS1.c **** void CLS1_PrintPrompt(CLS1_ConstStdIOType *io)
 386:../Generated_Code/CLS1.c **** {
 581              		.loc 1 386 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 8
 584              		@ frame_needed = 1, uses_anonymous_args = 0
 585 0000 80B5     		push	{r7, lr}
 586              		.cfi_def_cfa_offset 8
 587              		.cfi_offset 7, -8
 588              		.cfi_offset 14, -4
 589 0002 82B0     		sub	sp, sp, #8
 590              		.cfi_def_cfa_offset 16
 591 0004 00AF     		add	r7, sp, #0
 592              		.cfi_def_cfa_register 7
 593 0006 7860     		str	r0, [r7, #4]
 387:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)"\r\n", io->stdOut); /* ensure that there is a new line */
 594              		.loc 1 387 0
 595 0008 7B68     		ldr	r3, [r7, #4]
 596 000a 5B68     		ldr	r3, [r3, #4]
 597 000c 0648     		ldr	r0, .L24
 598 000e 1946     		mov	r1, r3
 599 0010 FFF7FEFF 		bl	CLS1_SendStr
 388:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)CLS1_CONFIG_PROMPT_STRING, io->stdOut);
 600              		.loc 1 388 0
 601 0014 7B68     		ldr	r3, [r7, #4]
 602 0016 5B68     		ldr	r3, [r3, #4]
 603 0018 0448     		ldr	r0, .L24+4
 604 001a 1946     		mov	r1, r3
 605 001c FFF7FEFF 		bl	CLS1_SendStr
 389:../Generated_Code/CLS1.c **** }
 606              		.loc 1 389 0
 607 0020 0837     		adds	r7, r7, #8
 608 0022 BD46     		mov	sp, r7
 609              		@ sp needed
 610 0024 80BD     		pop	{r7, pc}
 611              	.L25:
 612 0026 00BF     		.align	2
 613              	.L24:
 614 0028 14000000 		.word	.LC2
 615 002c DC000000 		.word	.LC11
 616              		.cfi_endproc
 617              	.LFE9:
 619              		.section	.text.CLS1_IsHistoryCharacter,"ax",%progbits
 620              		.align	2
 621              		.global	CLS1_IsHistoryCharacter
 622              		.thumb
 623              		.thumb_func
 625              	CLS1_IsHistoryCharacter:
 626              	.LFB10:
 390:../Generated_Code/CLS1.c **** 
 391:../Generated_Code/CLS1.c **** /*
 392:../Generated_Code/CLS1.c **** ** ===================================================================
 393:../Generated_Code/CLS1.c **** **     Method      :  CLS1_IsHistoryCharacter (component Shell)
 394:../Generated_Code/CLS1.c **** **     Description :
 395:../Generated_Code/CLS1.c **** **         Returns TRUE if character is a history character
 396:../Generated_Code/CLS1.c **** **     Parameters  :
 397:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 398:../Generated_Code/CLS1.c **** **         ch              - current command character
 399:../Generated_Code/CLS1.c **** **       * cmdBuf          - Pointer to command line buffer read
 400:../Generated_Code/CLS1.c **** **                           so far
 401:../Generated_Code/CLS1.c **** **         cmdBufIdx       - Index of character into cmdBuf
 402:../Generated_Code/CLS1.c **** **       * isPrev          - Pointer to return value, if it is
 403:../Generated_Code/CLS1.c **** **                           'previous' history or not
 404:../Generated_Code/CLS1.c **** **     Returns     :
 405:../Generated_Code/CLS1.c **** **         ---             - TRUE if it is an accepted history character
 406:../Generated_Code/CLS1.c **** ** ===================================================================
 407:../Generated_Code/CLS1.c **** */
 408:../Generated_Code/CLS1.c **** bool CLS1_IsHistoryCharacter(uint8_t ch, uint8_t *cmdBuf, size_t cmdBufIdx, bool *isPrev)
 409:../Generated_Code/CLS1.c **** {
 627              		.loc 1 409 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 16
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632 0000 80B4     		push	{r7}
 633              		.cfi_def_cfa_offset 4
 634              		.cfi_offset 7, -4
 635 0002 85B0     		sub	sp, sp, #20
 636              		.cfi_def_cfa_offset 24
 637 0004 00AF     		add	r7, sp, #0
 638              		.cfi_def_cfa_register 7
 639 0006 B960     		str	r1, [r7, #8]
 640 0008 7A60     		str	r2, [r7, #4]
 641 000a 3B60     		str	r3, [r7]
 642 000c 0346     		mov	r3, r0
 643 000e FB73     		strb	r3, [r7, #15]
 410:../Generated_Code/CLS1.c ****   *isPrev = FALSE;
 644              		.loc 1 410 0
 645 0010 3B68     		ldr	r3, [r7]
 646 0012 0022     		movs	r2, #0
 647 0014 1A70     		strb	r2, [r3]
 411:../Generated_Code/CLS1.c **** #if CLS1_HISTORY_ENABLED
 412:../Generated_Code/CLS1.c ****   if (   cmdBufIdx==0 /* first character on command line */
 413:../Generated_Code/CLS1.c ****       || (UTIL1_strcmp((const char*)cmdBuf, (const char*)CLS1_history[CLS1_history_index])==0) /* p
 414:../Generated_Code/CLS1.c ****       )
 415:../Generated_Code/CLS1.c ****   {
 416:../Generated_Code/CLS1.c ****     if (ch==CLS1_HISTORY_PREV_CHAR) {
 417:../Generated_Code/CLS1.c ****       *isPrev = TRUE;
 418:../Generated_Code/CLS1.c ****       return TRUE;
 419:../Generated_Code/CLS1.c ****     } else if (ch==CLS1_HISTORY_NEXT_CHAR) {
 420:../Generated_Code/CLS1.c ****       *isPrev = FALSE;
 421:../Generated_Code/CLS1.c ****       return TRUE;
 422:../Generated_Code/CLS1.c ****     }
 423:../Generated_Code/CLS1.c ****   }
 424:../Generated_Code/CLS1.c **** #if 0
 425:../Generated_Code/CLS1.c ****   if (cmdBufIdx==0 || cmdBufIdx==2) { /* accept only first character or sequence as history sequenc
 426:../Generated_Code/CLS1.c ****     if (cmdBufIdx==2 && cmdBuf[0]==0x1b && cmdBuf[1]==0x5b) {
 427:../Generated_Code/CLS1.c ****       /* up:    0x27 0x5b 0x41
 428:../Generated_Code/CLS1.c ****        * down:  0x27 0x5b 0x42
 429:../Generated_Code/CLS1.c ****        * right: 0x27 0x5b 0x43
 430:../Generated_Code/CLS1.c ****        * left:  0x27 0x5b 0x44
 431:../Generated_Code/CLS1.c ****        */
 432:../Generated_Code/CLS1.c ****       if (cmdBuf[2]==0x41 /* up */ || cmdBuf[2]==0x44 /* left */) {
 433:../Generated_Code/CLS1.c ****         *isPrev = TRUE;
 434:../Generated_Code/CLS1.c ****         return TRUE;
 435:../Generated_Code/CLS1.c ****       } else if (cmdBuf[2]==0x42 /* down */ || cmdBuf[2]==0x43 /* right */) {
 436:../Generated_Code/CLS1.c ****         *isPrev = FALSE;
 437:../Generated_Code/CLS1.c ****         return TRUE;
 438:../Generated_Code/CLS1.c ****       }
 439:../Generated_Code/CLS1.c ****     }
 440:../Generated_Code/CLS1.c ****     /* \todo: handle TAB and SHIFT-TAB */
 441:../Generated_Code/CLS1.c ****   }
 442:../Generated_Code/CLS1.c **** #endif
 443:../Generated_Code/CLS1.c **** #else
 444:../Generated_Code/CLS1.c ****   (void)ch; /* not used */
 445:../Generated_Code/CLS1.c ****   (void)cmdBuf; /* not used */
 446:../Generated_Code/CLS1.c ****   (void)cmdBufIdx; /* not used */
 447:../Generated_Code/CLS1.c **** #endif
 448:../Generated_Code/CLS1.c ****   return FALSE;
 648              		.loc 1 448 0
 649 0016 0023     		movs	r3, #0
 449:../Generated_Code/CLS1.c **** }
 650              		.loc 1 449 0
 651 0018 1846     		mov	r0, r3
 652 001a 1437     		adds	r7, r7, #20
 653 001c BD46     		mov	sp, r7
 654              		@ sp needed
 655 001e 5DF8047B 		ldr	r7, [sp], #4
 656 0022 7047     		bx	lr
 657              		.cfi_endproc
 658              	.LFE10:
 660              		.section	.text.CLS1_ReadLine,"ax",%progbits
 661              		.align	2
 662              		.global	CLS1_ReadLine
 663              		.thumb
 664              		.thumb_func
 666              	CLS1_ReadLine:
 667              	.LFB11:
 450:../Generated_Code/CLS1.c **** 
 451:../Generated_Code/CLS1.c **** /*
 452:../Generated_Code/CLS1.c **** ** ===================================================================
 453:../Generated_Code/CLS1.c **** **     Method      :  CLS1_ReadLine (component Shell)
 454:../Generated_Code/CLS1.c **** **     Description :
 455:../Generated_Code/CLS1.c **** **         Reads a line from stdIn and returns TRUE if we have a line,
 456:../Generated_Code/CLS1.c **** **         FALSE otherwise.
 457:../Generated_Code/CLS1.c **** **     Parameters  :
 458:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 459:../Generated_Code/CLS1.c **** **       * bufStart        - Pointer to start of buffer
 460:../Generated_Code/CLS1.c **** **       * buf             - Pointer to buffer where to read in the
 461:../Generated_Code/CLS1.c **** **                           information
 462:../Generated_Code/CLS1.c **** **         bufSize         - size of buffer
 463:../Generated_Code/CLS1.c **** **       * io              - Pointer to I/O callbacks
 464:../Generated_Code/CLS1.c **** **     Returns     :
 465:../Generated_Code/CLS1.c **** **         ---             - TRUE if something has been read, FALSE
 466:../Generated_Code/CLS1.c **** **                           otherwise
 467:../Generated_Code/CLS1.c **** ** ===================================================================
 468:../Generated_Code/CLS1.c **** */
 469:../Generated_Code/CLS1.c **** bool CLS1_ReadLine(uint8_t *bufStart, uint8_t *buf, size_t bufSize, CLS1_ConstStdIOType *io)
 470:../Generated_Code/CLS1.c **** {
 668              		.loc 1 470 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 24
 671              		@ frame_needed = 1, uses_anonymous_args = 0
 672 0000 80B5     		push	{r7, lr}
 673              		.cfi_def_cfa_offset 8
 674              		.cfi_offset 7, -8
 675              		.cfi_offset 14, -4
 676 0002 86B0     		sub	sp, sp, #24
 677              		.cfi_def_cfa_offset 32
 678 0004 00AF     		add	r7, sp, #0
 679              		.cfi_def_cfa_register 7
 680 0006 F860     		str	r0, [r7, #12]
 681 0008 B960     		str	r1, [r7, #8]
 682 000a 7A60     		str	r2, [r7, #4]
 683 000c 3B60     		str	r3, [r7]
 471:../Generated_Code/CLS1.c ****   uint8_t c;
 472:../Generated_Code/CLS1.c ****   bool isBackwardHistory;
 473:../Generated_Code/CLS1.c **** 
 474:../Generated_Code/CLS1.c ****   if (io->keyPressed()) {
 684              		.loc 1 474 0
 685 000e 3B68     		ldr	r3, [r7]
 686 0010 DB68     		ldr	r3, [r3, #12]
 687 0012 9847     		blx	r3
 688 0014 0346     		mov	r3, r0
 689 0016 002B     		cmp	r3, #0
 690 0018 54D0     		beq	.L29
 691              	.L39:
 475:../Generated_Code/CLS1.c ****     for(;;) {                          /* while not '\r' or '\n' */
 476:../Generated_Code/CLS1.c ****       c = '\0';                        /* initialize character */
 692              		.loc 1 476 0
 693 001a 0023     		movs	r3, #0
 694 001c FB75     		strb	r3, [r7, #23]
 477:../Generated_Code/CLS1.c ****       io->stdIn(&c);                   /* read character */
 695              		.loc 1 477 0
 696 001e 3B68     		ldr	r3, [r7]
 697 0020 1B68     		ldr	r3, [r3]
 698 0022 07F11702 		add	r2, r7, #23
 699 0026 1046     		mov	r0, r2
 700 0028 9847     		blx	r3
 478:../Generated_Code/CLS1.c ****       if (c=='\0') { /* nothing in rx buffer? Something is wrong... */
 701              		.loc 1 478 0
 702 002a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 703 002c 002B     		cmp	r3, #0
 704 002e 00D1     		bne	.L30
 479:../Generated_Code/CLS1.c ****         break; /* get out of loop */
 705              		.loc 1 479 0
 706 0030 43E0     		b	.L31
 707              	.L30:
 480:../Generated_Code/CLS1.c ****       }
 481:../Generated_Code/CLS1.c ****       if (c=='\b' || c=='\177') {      /* check for backspace */
 708              		.loc 1 481 0
 709 0032 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 710 0034 082B     		cmp	r3, #8
 711 0036 02D0     		beq	.L32
 712              		.loc 1 481 0 is_stmt 0 discriminator 1
 713 0038 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 714 003a 7F2B     		cmp	r3, #127
 715 003c 0ED1     		bne	.L33
 716              	.L32:
 482:../Generated_Code/CLS1.c ****         if (buf > bufStart) {          /* Avoid buffer underflow */
 717              		.loc 1 482 0 is_stmt 1
 718 003e BA68     		ldr	r2, [r7, #8]
 719 0040 FB68     		ldr	r3, [r7, #12]
 720 0042 9A42     		cmp	r2, r3
 721 0044 09D9     		bls	.L34
 483:../Generated_Code/CLS1.c **** #if CLS1_ECHO_ENABLED
 484:../Generated_Code/CLS1.c ****            if (CLS1_EchoEnabled) {
 485:../Generated_Code/CLS1.c ****              io->stdOut('\b');         /* delete character on terminal */
 486:../Generated_Code/CLS1.c ****              io->stdOut(' ');
 487:../Generated_Code/CLS1.c ****              io->stdOut('\b');
 488:../Generated_Code/CLS1.c ****            }
 489:../Generated_Code/CLS1.c **** #endif
 490:../Generated_Code/CLS1.c ****            buf--;                      /* delete last character in buffer */
 722              		.loc 1 490 0
 723 0046 BB68     		ldr	r3, [r7, #8]
 724 0048 013B     		subs	r3, r3, #1
 725 004a BB60     		str	r3, [r7, #8]
 491:../Generated_Code/CLS1.c ****            *buf = '\0';
 726              		.loc 1 491 0
 727 004c BB68     		ldr	r3, [r7, #8]
 728 004e 0022     		movs	r2, #0
 729 0050 1A70     		strb	r2, [r3]
 492:../Generated_Code/CLS1.c ****            bufSize++;
 730              		.loc 1 492 0
 731 0052 7B68     		ldr	r3, [r7, #4]
 732 0054 0133     		adds	r3, r3, #1
 733 0056 7B60     		str	r3, [r7, #4]
 482:../Generated_Code/CLS1.c ****         if (buf > bufStart) {          /* Avoid buffer underflow */
 734              		.loc 1 482 0
 735 0058 2EE0     		b	.L35
 736              	.L34:
 482:../Generated_Code/CLS1.c ****         if (buf > bufStart) {          /* Avoid buffer underflow */
 737              		.loc 1 482 0 is_stmt 0 discriminator 1
 738 005a 2DE0     		b	.L35
 739              	.L33:
 493:../Generated_Code/CLS1.c ****         }
 494:../Generated_Code/CLS1.c ****       } else if (CLS1_IsHistoryCharacter(c, bufStart, (size_t)(buf-bufStart), &isBackwardHistory)) 
 740              		.loc 1 494 0 is_stmt 1
 741 005c F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 742 005e BA68     		ldr	r2, [r7, #8]
 743 0060 FB68     		ldr	r3, [r7, #12]
 744 0062 D31A     		subs	r3, r2, r3
 745 0064 1A46     		mov	r2, r3
 746 0066 07F11603 		add	r3, r7, #22
 747 006a 0846     		mov	r0, r1
 748 006c F968     		ldr	r1, [r7, #12]
 749 006e FFF7FEFF 		bl	CLS1_IsHistoryCharacter
 750 0072 0346     		mov	r3, r0
 751 0074 002B     		cmp	r3, #0
 752 0076 0CD0     		beq	.L36
 495:../Generated_Code/CLS1.c **** #if CLS1_HISTORY_ENABLED
 496:../Generated_Code/CLS1.c ****         uint8_t cBuf[3]={'\0','\0','\0'}, cBufIdx = 0;
 497:../Generated_Code/CLS1.c ****         bool prevInHistory;
 498:../Generated_Code/CLS1.c **** #endif
 499:../Generated_Code/CLS1.c **** 
 500:../Generated_Code/CLS1.c ****         while (c!='\0') {              /* empty the rx buffer (escape sequence) */
 753              		.loc 1 500 0
 754 0078 07E0     		b	.L37
 755              	.L38:
 501:../Generated_Code/CLS1.c **** #if CLS1_HISTORY_ENABLED
 502:../Generated_Code/CLS1.c ****            cBuf[cBufIdx] = c;
 503:../Generated_Code/CLS1.c ****            cBufIdx++;
 504:../Generated_Code/CLS1.c ****            if (cBufIdx==sizeof(cBuf)) {
 505:../Generated_Code/CLS1.c ****              cBufIdx = 0; /* ring buffer */
 506:../Generated_Code/CLS1.c ****            }
 507:../Generated_Code/CLS1.c **** #endif
 508:../Generated_Code/CLS1.c ****            c = '\0';                   /* initialize character */
 756              		.loc 1 508 0
 757 007a 0023     		movs	r3, #0
 758 007c FB75     		strb	r3, [r7, #23]
 509:../Generated_Code/CLS1.c ****            io->stdIn(&c);              /* read character */
 759              		.loc 1 509 0
 760 007e 3B68     		ldr	r3, [r7]
 761 0080 1B68     		ldr	r3, [r3]
 762 0082 07F11702 		add	r2, r7, #23
 763 0086 1046     		mov	r0, r2
 764 0088 9847     		blx	r3
 765              	.L37:
 500:../Generated_Code/CLS1.c ****         while (c!='\0') {              /* empty the rx buffer (escape sequence) */
 766              		.loc 1 500 0 discriminator 1
 767 008a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 768 008c 002B     		cmp	r3, #0
 769 008e F4D1     		bne	.L38
 510:../Generated_Code/CLS1.c ****         }
 511:../Generated_Code/CLS1.c **** #if CLS1_HISTORY_ENABLED
 512:../Generated_Code/CLS1.c ****         /* if not an alphanumeric switch to history  */
 513:../Generated_Code/CLS1.c ****         prevInHistory = cBufIdx==0 && cBuf[0]==0x1b && cBuf[1]==0x5b && (cBuf[2]==0x41 /*up*/ || cB
 514:../Generated_Code/CLS1.c ****         /* up:    0x27 0x5b 0x41
 515:../Generated_Code/CLS1.c ****          * down:  0x27 0x5b 0x42
 516:../Generated_Code/CLS1.c ****          * right: 0x27 0x5b 0x43
 517:../Generated_Code/CLS1.c ****          * left:  0x27 0x5b 0x44
 518:../Generated_Code/CLS1.c ****          */
 519:../Generated_Code/CLS1.c ****         if (prevInHistory) {
 520:../Generated_Code/CLS1.c ****           UTIL1_strcpy(bufStart, CLS1_HIST_LEN, CLS1_history[CLS1_history_index]);
 521:../Generated_Code/CLS1.c ****           CLS1_history_index++;        /* update the index */
 522:../Generated_Code/CLS1.c ****           if (CLS1_history_index==CLS1_NOF_HISTORY) {
 523:../Generated_Code/CLS1.c ****             CLS1_history_index = 0;
 524:../Generated_Code/CLS1.c ****           }
 525:../Generated_Code/CLS1.c ****         } else {
 526:../Generated_Code/CLS1.c ****           if (CLS1_history_index==0) {
 527:../Generated_Code/CLS1.c ****             CLS1_history_index = (CLS1_NOF_HISTORY-1);
 528:../Generated_Code/CLS1.c ****           } else {
 529:../Generated_Code/CLS1.c ****             CLS1_history_index--;
 530:../Generated_Code/CLS1.c ****           }
 531:../Generated_Code/CLS1.c ****           UTIL1_strcpy(bufStart, CLS1_HIST_LEN, CLS1_history[CLS1_history_index]);
 532:../Generated_Code/CLS1.c ****         }
 533:../Generated_Code/CLS1.c ****         bufSize = bufSize + buf - bufStart - UTIL1_strlen((const char*)bufStart); /* update the buf
 534:../Generated_Code/CLS1.c ****         buf = bufStart + UTIL1_strlen((const char*)bufStart);
 535:../Generated_Code/CLS1.c **** #endif
 536:../Generated_Code/CLS1.c **** #if CLS1_ECHO_ENABLED
 537:../Generated_Code/CLS1.c ****         if (CLS1_EchoEnabled) {
 538:../Generated_Code/CLS1.c ****           CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
 539:../Generated_Code/CLS1.c ****           CLS1_PrintPrompt(io);
 540:../Generated_Code/CLS1.c ****           CLS1_SendStr(bufStart, io->stdOut);
 541:../Generated_Code/CLS1.c ****         }
 542:../Generated_Code/CLS1.c **** #endif
 543:../Generated_Code/CLS1.c ****       } else {
 544:../Generated_Code/CLS1.c **** #if CLS1_ECHO_ENABLED
 545:../Generated_Code/CLS1.c ****         if (CLS1_EchoEnabled) {
 546:../Generated_Code/CLS1.c ****           io->stdOut(c);               /* echo character */
 547:../Generated_Code/CLS1.c ****         }
 548:../Generated_Code/CLS1.c **** #endif
 549:../Generated_Code/CLS1.c ****         *buf = (uint8_t)c;             /* append character to the string */
 550:../Generated_Code/CLS1.c ****         buf++;
 551:../Generated_Code/CLS1.c ****         bufSize--;
 552:../Generated_Code/CLS1.c ****         if ((c=='\r') || (c=='\n')) {
 553:../Generated_Code/CLS1.c **** #if CLS1_ECHO_ENABLED
 554:../Generated_Code/CLS1.c ****           if (CLS1_EchoEnabled) {
 555:../Generated_Code/CLS1.c ****             CLS1_SendStr((unsigned char*)"\n", io->stdOut);
 556:../Generated_Code/CLS1.c ****           }
 557:../Generated_Code/CLS1.c **** #endif
 558:../Generated_Code/CLS1.c **** #if CLS1_HISTORY_ENABLED
 559:../Generated_Code/CLS1.c ****           if ((bufStart[0] != '\0') && (bufStart[0] != '\r') && (bufStart[0] != '\n')) {
 560:../Generated_Code/CLS1.c ****             int i;
 561:../Generated_Code/CLS1.c **** 
 562:../Generated_Code/CLS1.c ****             for(i=CLS1_NOF_HISTORY-1; i>0;i--) {
 563:../Generated_Code/CLS1.c ****               UTIL1_strcpy(CLS1_history[i], CLS1_HIST_LEN, CLS1_history[i-1]); /* move previous com
 564:../Generated_Code/CLS1.c ****             }
 565:../Generated_Code/CLS1.c ****             CLS1_history_index = 0;    /* update the history with the current command */
 566:../Generated_Code/CLS1.c ****             UTIL1_strcpy(CLS1_history[0], CLS1_HIST_LEN, bufStart); /* add the current command to t
 567:../Generated_Code/CLS1.c ****             if (buf-bufStart <= CLS1_HIST_LEN) { /* size check */
 568:../Generated_Code/CLS1.c ****               CLS1_history[0][buf-bufStart-1] = '\0';
 569:../Generated_Code/CLS1.c ****             } else {
 570:../Generated_Code/CLS1.c ****               CLS1_history[0][CLS1_HIST_LEN-1] = '\0';
 571:../Generated_Code/CLS1.c ****             }
 572:../Generated_Code/CLS1.c ****           }
 573:../Generated_Code/CLS1.c **** #endif
 574:../Generated_Code/CLS1.c ****           break;
 575:../Generated_Code/CLS1.c ****         }
 576:../Generated_Code/CLS1.c ****         if (bufSize <= 1) {            /* buffer full */
 577:../Generated_Code/CLS1.c ****           break;
 578:../Generated_Code/CLS1.c ****         }
 579:../Generated_Code/CLS1.c ****       }
 580:../Generated_Code/CLS1.c ****     } /* for */
 770              		.loc 1 580 0
 771 0090 C3E7     		b	.L39
 772              	.L36:
 549:../Generated_Code/CLS1.c ****         *buf = (uint8_t)c;             /* append character to the string */
 773              		.loc 1 549 0
 774 0092 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 775 0094 BB68     		ldr	r3, [r7, #8]
 776 0096 1A70     		strb	r2, [r3]
 550:../Generated_Code/CLS1.c ****         buf++;
 777              		.loc 1 550 0
 778 0098 BB68     		ldr	r3, [r7, #8]
 779 009a 0133     		adds	r3, r3, #1
 780 009c BB60     		str	r3, [r7, #8]
 551:../Generated_Code/CLS1.c ****         bufSize--;
 781              		.loc 1 551 0
 782 009e 7B68     		ldr	r3, [r7, #4]
 783 00a0 013B     		subs	r3, r3, #1
 784 00a2 7B60     		str	r3, [r7, #4]
 552:../Generated_Code/CLS1.c ****         if ((c=='\r') || (c=='\n')) {
 785              		.loc 1 552 0
 786 00a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 787 00a6 0D2B     		cmp	r3, #13
 788 00a8 07D0     		beq	.L31
 552:../Generated_Code/CLS1.c ****         if ((c=='\r') || (c=='\n')) {
 789              		.loc 1 552 0 is_stmt 0 discriminator 1
 790 00aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 791 00ac 0A2B     		cmp	r3, #10
 792 00ae 04D0     		beq	.L31
 576:../Generated_Code/CLS1.c ****         if (bufSize <= 1) {            /* buffer full */
 793              		.loc 1 576 0 is_stmt 1
 794 00b0 7B68     		ldr	r3, [r7, #4]
 795 00b2 012B     		cmp	r3, #1
 796 00b4 00D8     		bhi	.L35
 577:../Generated_Code/CLS1.c ****           break;
 797              		.loc 1 577 0
 798 00b6 00E0     		b	.L31
 799              	.L35:
 800              		.loc 1 580 0
 801 00b8 AFE7     		b	.L39
 802              	.L31:
 581:../Generated_Code/CLS1.c ****     *buf = '\0';                       /* zero terminate string */
 803              		.loc 1 581 0
 804 00ba BB68     		ldr	r3, [r7, #8]
 805 00bc 0022     		movs	r2, #0
 806 00be 1A70     		strb	r2, [r3]
 582:../Generated_Code/CLS1.c ****     return TRUE;
 807              		.loc 1 582 0
 808 00c0 0123     		movs	r3, #1
 809 00c2 00E0     		b	.L41
 810              	.L29:
 583:../Generated_Code/CLS1.c ****   } else {
 584:../Generated_Code/CLS1.c ****     return FALSE;
 811              		.loc 1 584 0
 812 00c4 0023     		movs	r3, #0
 813              	.L41:
 585:../Generated_Code/CLS1.c ****   }
 586:../Generated_Code/CLS1.c **** }
 814              		.loc 1 586 0
 815 00c6 1846     		mov	r0, r3
 816 00c8 1837     		adds	r7, r7, #24
 817 00ca BD46     		mov	sp, r7
 818              		@ sp needed
 819 00cc 80BD     		pop	{r7, pc}
 820              		.cfi_endproc
 821              	.LFE11:
 823 00ce 00BF     		.section	.rodata
 824 00e2 0000     		.align	2
 825              	.LC12:
 826 00e4 20204275 		.ascii	"  Build\000"
 826      696C6400 
 827              		.align	2
 828              	.LC13:
 829 00ec 53657020 		.ascii	"Sep 28 2018\000"
 829      32382032 
 829      30313800 
 830              		.align	2
 831              	.LC14:
 832 00f8 2000     		.ascii	" \000"
 833 00fa 0000     		.align	2
 834              	.LC15:
 835 00fc 31363A30 		.ascii	"16:02:41\000"
 835      323A3431 
 835      00
 836              		.section	.text.CLS1_PrintStatus,"ax",%progbits
 837              		.align	2
 838              		.global	CLS1_PrintStatus
 839              		.thumb
 840              		.thumb_func
 842              	CLS1_PrintStatus:
 843              	.LFB12:
 587:../Generated_Code/CLS1.c **** 
 588:../Generated_Code/CLS1.c **** /*
 589:../Generated_Code/CLS1.c **** ** ===================================================================
 590:../Generated_Code/CLS1.c **** **     Method      :  CLS1_PrintStatus (component Shell)
 591:../Generated_Code/CLS1.c **** **     Description :
 592:../Generated_Code/CLS1.c **** **         Prints various available system status information
 593:../Generated_Code/CLS1.c **** **     Parameters  :
 594:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 595:../Generated_Code/CLS1.c **** **       * io              - Pointer to I/O callbacks
 596:../Generated_Code/CLS1.c **** **     Returns     :
 597:../Generated_Code/CLS1.c **** **         ---             - Error code
 598:../Generated_Code/CLS1.c **** ** ===================================================================
 599:../Generated_Code/CLS1.c **** */
 600:../Generated_Code/CLS1.c **** uint8_t CLS1_PrintStatus(CLS1_ConstStdIOType *io)
 601:../Generated_Code/CLS1.c **** {
 844              		.loc 1 601 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 8
 847              		@ frame_needed = 1, uses_anonymous_args = 0
 848 0000 80B5     		push	{r7, lr}
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 0002 82B0     		sub	sp, sp, #8
 853              		.cfi_def_cfa_offset 16
 854 0004 00AF     		add	r7, sp, #0
 855              		.cfi_def_cfa_register 7
 856 0006 7860     		str	r0, [r7, #4]
 602:../Generated_Code/CLS1.c ****   CLS1_SendStatusStr((const unsigned char*)"CLS1", (const unsigned char*)"\r\n", io->stdOut);
 857              		.loc 1 602 0
 858 0008 7B68     		ldr	r3, [r7, #4]
 859 000a 5B68     		ldr	r3, [r3, #4]
 860 000c 1148     		ldr	r0, .L44
 861 000e 1249     		ldr	r1, .L44+4
 862 0010 1A46     		mov	r2, r3
 863 0012 FFF7FEFF 		bl	CLS1_SendStatusStr
 603:../Generated_Code/CLS1.c ****   CLS1_SendStatusStr((const unsigned char*)"  Build", (const unsigned char*)__DATE__, io->stdOut);
 864              		.loc 1 603 0
 865 0016 7B68     		ldr	r3, [r7, #4]
 866 0018 5B68     		ldr	r3, [r3, #4]
 867 001a 1048     		ldr	r0, .L44+8
 868 001c 1049     		ldr	r1, .L44+12
 869 001e 1A46     		mov	r2, r3
 870 0020 FFF7FEFF 		bl	CLS1_SendStatusStr
 604:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)" ", io->stdOut);
 871              		.loc 1 604 0
 872 0024 7B68     		ldr	r3, [r7, #4]
 873 0026 5B68     		ldr	r3, [r3, #4]
 874 0028 0E48     		ldr	r0, .L44+16
 875 002a 1946     		mov	r1, r3
 876 002c FFF7FEFF 		bl	CLS1_SendStr
 605:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)__TIME__, io->stdOut);
 877              		.loc 1 605 0
 878 0030 7B68     		ldr	r3, [r7, #4]
 879 0032 5B68     		ldr	r3, [r3, #4]
 880 0034 0C48     		ldr	r0, .L44+20
 881 0036 1946     		mov	r1, r3
 882 0038 FFF7FEFF 		bl	CLS1_SendStr
 606:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
 883              		.loc 1 606 0
 884 003c 7B68     		ldr	r3, [r7, #4]
 885 003e 5B68     		ldr	r3, [r3, #4]
 886 0040 0548     		ldr	r0, .L44+4
 887 0042 1946     		mov	r1, r3
 888 0044 FFF7FEFF 		bl	CLS1_SendStr
 607:../Generated_Code/CLS1.c **** #if CLS1_ECHO_ENABLED
 608:../Generated_Code/CLS1.c ****   CLS1_SendStatusStr((const unsigned char*)"  echo", CLS1_EchoEnabled?(const unsigned char*)"On\r\n
 609:../Generated_Code/CLS1.c **** #endif
 610:../Generated_Code/CLS1.c ****   return ERR_OK;
 889              		.loc 1 610 0
 890 0048 0023     		movs	r3, #0
 611:../Generated_Code/CLS1.c **** }
 891              		.loc 1 611 0
 892 004a 1846     		mov	r0, r3
 893 004c 0837     		adds	r7, r7, #8
 894 004e BD46     		mov	sp, r7
 895              		@ sp needed
 896 0050 80BD     		pop	{r7, pc}
 897              	.L45:
 898 0052 00BF     		.align	2
 899              	.L44:
 900 0054 70000000 		.word	.LC5
 901 0058 14000000 		.word	.LC2
 902 005c E4000000 		.word	.LC12
 903 0060 EC000000 		.word	.LC13
 904 0064 F8000000 		.word	.LC14
 905 0068 FC000000 		.word	.LC15
 906              		.cfi_endproc
 907              	.LFE12:
 909              		.section	.rodata
 910 0105 000000   		.align	2
 911              	.LC16:
 912 0108 2A2A2A20 		.ascii	"*** Failed or unknown command: \000"
 912      4661696C 
 912      6564206F 
 912      7220756E 
 912      6B6E6F77 
 913              		.align	2
 914              	.LC17:
 915 0128 2A2A2A20 		.ascii	"*** Type \000"
 915      54797065 
 915      2000
 916 0132 0000     		.align	2
 917              	.LC18:
 918 0134 20746F20 		.ascii	" to get a list of available commands\015\012\000"
 918      67657420 
 918      61206C69 
 918      7374206F 
 918      66206176 
 919 015b 00       		.section	.text.CLS1_PrintCommandFailed,"ax",%progbits
 920              		.align	2
 921              		.global	CLS1_PrintCommandFailed
 922              		.thumb
 923              		.thumb_func
 925              	CLS1_PrintCommandFailed:
 926              	.LFB13:
 612:../Generated_Code/CLS1.c **** 
 613:../Generated_Code/CLS1.c **** /*
 614:../Generated_Code/CLS1.c **** ** ===================================================================
 615:../Generated_Code/CLS1.c **** **     Method      :  CLS1_PrintCommandFailed (component Shell)
 616:../Generated_Code/CLS1.c **** **     Description :
 617:../Generated_Code/CLS1.c **** **         Prints a standard message for failed or unknown commands
 618:../Generated_Code/CLS1.c **** **     Parameters  :
 619:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 620:../Generated_Code/CLS1.c **** **       * cmd             - Pointer to command which was failing
 621:../Generated_Code/CLS1.c **** **       * io              - Pointer to I/O callbacks
 622:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 623:../Generated_Code/CLS1.c **** ** ===================================================================
 624:../Generated_Code/CLS1.c **** */
 625:../Generated_Code/CLS1.c **** void CLS1_PrintCommandFailed(const uint8_t *cmd, CLS1_ConstStdIOType *io)
 626:../Generated_Code/CLS1.c **** {
 927              		.loc 1 626 0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 8
 930              		@ frame_needed = 1, uses_anonymous_args = 0
 931 0000 80B5     		push	{r7, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 7, -8
 934              		.cfi_offset 14, -4
 935 0002 82B0     		sub	sp, sp, #8
 936              		.cfi_def_cfa_offset 16
 937 0004 00AF     		add	r7, sp, #0
 938              		.cfi_def_cfa_register 7
 939 0006 7860     		str	r0, [r7, #4]
 940 0008 3960     		str	r1, [r7]
 627:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)"*** Failed or unknown command: ", io->stdErr);
 941              		.loc 1 627 0
 942 000a 3B68     		ldr	r3, [r7]
 943 000c 9B68     		ldr	r3, [r3, #8]
 944 000e 1248     		ldr	r0, .L47
 945 0010 1946     		mov	r1, r3
 946 0012 FFF7FEFF 		bl	CLS1_SendStr
 628:../Generated_Code/CLS1.c ****   CLS1_SendStr(cmd, io->stdErr);
 947              		.loc 1 628 0
 948 0016 3B68     		ldr	r3, [r7]
 949 0018 9B68     		ldr	r3, [r3, #8]
 950 001a 7868     		ldr	r0, [r7, #4]
 951 001c 1946     		mov	r1, r3
 952 001e FFF7FEFF 		bl	CLS1_SendStr
 629:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)"\r\n", io->stdErr);
 953              		.loc 1 629 0
 954 0022 3B68     		ldr	r3, [r7]
 955 0024 9B68     		ldr	r3, [r3, #8]
 956 0026 0D48     		ldr	r0, .L47+4
 957 0028 1946     		mov	r1, r3
 958 002a FFF7FEFF 		bl	CLS1_SendStr
 630:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)"*** Type ", io->stdErr);
 959              		.loc 1 630 0
 960 002e 3B68     		ldr	r3, [r7]
 961 0030 9B68     		ldr	r3, [r3, #8]
 962 0032 0B48     		ldr	r0, .L47+8
 963 0034 1946     		mov	r1, r3
 964 0036 FFF7FEFF 		bl	CLS1_SendStr
 631:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)CLS1_CMD_HELP, io->stdErr);
 965              		.loc 1 631 0
 966 003a 3B68     		ldr	r3, [r7]
 967 003c 9B68     		ldr	r3, [r3, #8]
 968 003e 0948     		ldr	r0, .L47+12
 969 0040 1946     		mov	r1, r3
 970 0042 FFF7FEFF 		bl	CLS1_SendStr
 632:../Generated_Code/CLS1.c ****   CLS1_SendStr((unsigned char*)" to get a list of available commands\r\n", io->stdErr);
 971              		.loc 1 632 0
 972 0046 3B68     		ldr	r3, [r7]
 973 0048 9B68     		ldr	r3, [r3, #8]
 974 004a 0748     		ldr	r0, .L47+16
 975 004c 1946     		mov	r1, r3
 976 004e FFF7FEFF 		bl	CLS1_SendStr
 633:../Generated_Code/CLS1.c **** }
 977              		.loc 1 633 0
 978 0052 0837     		adds	r7, r7, #8
 979 0054 BD46     		mov	sp, r7
 980              		@ sp needed
 981 0056 80BD     		pop	{r7, pc}
 982              	.L48:
 983              		.align	2
 984              	.L47:
 985 0058 08010000 		.word	.LC16
 986 005c 14000000 		.word	.LC2
 987 0060 28010000 		.word	.LC17
 988 0064 00000000 		.word	.LC0
 989 0068 34010000 		.word	.LC18
 990              		.cfi_endproc
 991              	.LFE13:
 993              		.section	.text.CLS1_IterateTable,"ax",%progbits
 994              		.align	2
 995              		.global	CLS1_IterateTable
 996              		.thumb
 997              		.thumb_func
 999              	CLS1_IterateTable:
 1000              	.LFB14:
 634:../Generated_Code/CLS1.c **** 
 635:../Generated_Code/CLS1.c **** /*
 636:../Generated_Code/CLS1.c **** ** ===================================================================
 637:../Generated_Code/CLS1.c **** **     Method      :  CLS1_IterateTable (component Shell)
 638:../Generated_Code/CLS1.c **** **     Description :
 639:../Generated_Code/CLS1.c **** **         Parses a shell command. It handles first the internal
 640:../Generated_Code/CLS1.c **** **         commands and will call the provided callback.
 641:../Generated_Code/CLS1.c **** **     Parameters  :
 642:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 643:../Generated_Code/CLS1.c **** **       * cmd             - Pointer to command string
 644:../Generated_Code/CLS1.c **** **       * handled         - Pointer to boolean which is set to
 645:../Generated_Code/CLS1.c **** **                           TRUE if a command parser has handled the
 646:../Generated_Code/CLS1.c **** **                           command.
 647:../Generated_Code/CLS1.c **** **       * io              - Pointer to I/O callbacks
 648:../Generated_Code/CLS1.c **** **       * parserTable     - Pointer to callback which
 649:../Generated_Code/CLS1.c **** **                           will be called to parse commands in the
 650:../Generated_Code/CLS1.c **** **                           user application, or NULL if not used.
 651:../Generated_Code/CLS1.c **** **     Returns     :
 652:../Generated_Code/CLS1.c **** **         ---             - Error code
 653:../Generated_Code/CLS1.c **** ** ===================================================================
 654:../Generated_Code/CLS1.c **** */
 655:../Generated_Code/CLS1.c **** uint8_t CLS1_IterateTable(const uint8_t *cmd, bool *handled, CLS1_ConstStdIOType *io, CLS1_ConstPar
 656:../Generated_Code/CLS1.c **** {
 1001              		.loc 1 656 0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 24
 1004              		@ frame_needed = 1, uses_anonymous_args = 0
 1005 0000 80B5     		push	{r7, lr}
 1006              		.cfi_def_cfa_offset 8
 1007              		.cfi_offset 7, -8
 1008              		.cfi_offset 14, -4
 1009 0002 86B0     		sub	sp, sp, #24
 1010              		.cfi_def_cfa_offset 32
 1011 0004 00AF     		add	r7, sp, #0
 1012              		.cfi_def_cfa_register 7
 1013 0006 F860     		str	r0, [r7, #12]
 1014 0008 B960     		str	r1, [r7, #8]
 1015 000a 7A60     		str	r2, [r7, #4]
 1016 000c 3B60     		str	r3, [r7]
 657:../Generated_Code/CLS1.c ****   uint8_t res = ERR_OK;
 1017              		.loc 1 657 0
 1018 000e 0023     		movs	r3, #0
 1019 0010 FB75     		strb	r3, [r7, #23]
 658:../Generated_Code/CLS1.c **** 
 659:../Generated_Code/CLS1.c ****   if (parserTable==NULL) { /* no table??? */
 1020              		.loc 1 659 0
 1021 0012 3B68     		ldr	r3, [r7]
 1022 0014 002B     		cmp	r3, #0
 1023 0016 01D1     		bne	.L50
 660:../Generated_Code/CLS1.c ****     return ERR_FAILED;
 1024              		.loc 1 660 0
 1025 0018 1B23     		movs	r3, #27
 1026 001a 18E0     		b	.L51
 1027              	.L50:
 661:../Generated_Code/CLS1.c ****   }
 662:../Generated_Code/CLS1.c ****   if (io==NULL) { /* no IO handler??? */
 1028              		.loc 1 662 0
 1029 001c 7B68     		ldr	r3, [r7, #4]
 1030 001e 002B     		cmp	r3, #0
 1031 0020 01D1     		bne	.L52
 663:../Generated_Code/CLS1.c ****     return ERR_FAILED;
 1032              		.loc 1 663 0
 1033 0022 1B23     		movs	r3, #27
 1034 0024 13E0     		b	.L51
 1035              	.L52:
 664:../Generated_Code/CLS1.c ****   }
 665:../Generated_Code/CLS1.c ****   /* iterate through all parser functions in table */
 666:../Generated_Code/CLS1.c ****   while(*parserTable!=NULL) {
 1036              		.loc 1 666 0
 1037 0026 0DE0     		b	.L53
 1038              	.L55:
 667:../Generated_Code/CLS1.c ****     if ((*parserTable)(cmd, handled, io)!=ERR_OK) {
 1039              		.loc 1 667 0
 1040 0028 3B68     		ldr	r3, [r7]
 1041 002a 1B68     		ldr	r3, [r3]
 1042 002c F868     		ldr	r0, [r7, #12]
 1043 002e B968     		ldr	r1, [r7, #8]
 1044 0030 7A68     		ldr	r2, [r7, #4]
 1045 0032 9847     		blx	r3
 1046 0034 0346     		mov	r3, r0
 1047 0036 002B     		cmp	r3, #0
 1048 0038 01D0     		beq	.L54
 668:../Generated_Code/CLS1.c ****       res = ERR_FAILED;
 1049              		.loc 1 668 0
 1050 003a 1B23     		movs	r3, #27
 1051 003c FB75     		strb	r3, [r7, #23]
 1052              	.L54:
 669:../Generated_Code/CLS1.c ****     }
 670:../Generated_Code/CLS1.c ****     parserTable++;
 1053              		.loc 1 670 0
 1054 003e 3B68     		ldr	r3, [r7]
 1055 0040 0433     		adds	r3, r3, #4
 1056 0042 3B60     		str	r3, [r7]
 1057              	.L53:
 666:../Generated_Code/CLS1.c ****   while(*parserTable!=NULL) {
 1058              		.loc 1 666 0 discriminator 1
 1059 0044 3B68     		ldr	r3, [r7]
 1060 0046 1B68     		ldr	r3, [r3]
 1061 0048 002B     		cmp	r3, #0
 1062 004a EDD1     		bne	.L55
 671:../Generated_Code/CLS1.c ****   }
 672:../Generated_Code/CLS1.c ****   return res;
 1063              		.loc 1 672 0
 1064 004c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1065              	.L51:
 673:../Generated_Code/CLS1.c **** }
 1066              		.loc 1 673 0
 1067 004e 1846     		mov	r0, r3
 1068 0050 1837     		adds	r7, r7, #24
 1069 0052 BD46     		mov	sp, r7
 1070              		@ sp needed
 1071 0054 80BD     		pop	{r7, pc}
 1072              		.cfi_endproc
 1073              	.LFE14:
 1075 0056 00BF     		.section	.text.CLS1_ParseWithCommandTable,"ax",%progbits
 1076              		.align	2
 1077              		.global	CLS1_ParseWithCommandTable
 1078              		.thumb
 1079              		.thumb_func
 1081              	CLS1_ParseWithCommandTable:
 1082              	.LFB15:
 674:../Generated_Code/CLS1.c **** 
 675:../Generated_Code/CLS1.c **** /*
 676:../Generated_Code/CLS1.c **** ** ===================================================================
 677:../Generated_Code/CLS1.c **** **     Method      :  CLS1_ParseWithCommandTable (component Shell)
 678:../Generated_Code/CLS1.c **** **     Description :
 679:../Generated_Code/CLS1.c **** **         Parses a shell command. It handles first the internal
 680:../Generated_Code/CLS1.c **** **         commands and will call the provided callback.
 681:../Generated_Code/CLS1.c **** **     Parameters  :
 682:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 683:../Generated_Code/CLS1.c **** **       * cmd             - Pointer to command string
 684:../Generated_Code/CLS1.c **** **       * io              - Pointer to I/O callbacks
 685:../Generated_Code/CLS1.c **** **       * parseCallback   - Pointer to callback
 686:../Generated_Code/CLS1.c **** **                           which will be called to parse commands in
 687:../Generated_Code/CLS1.c **** **                           the user application, or NULL if not used.
 688:../Generated_Code/CLS1.c **** **     Returns     :
 689:../Generated_Code/CLS1.c **** **         ---             - Error code
 690:../Generated_Code/CLS1.c **** ** ===================================================================
 691:../Generated_Code/CLS1.c **** */
 692:../Generated_Code/CLS1.c **** uint8_t CLS1_ParseWithCommandTable(const uint8_t *cmd, CLS1_ConstStdIOType *io, CLS1_ConstParseComm
 693:../Generated_Code/CLS1.c **** {
 1083              		.loc 1 693 0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 56
 1086              		@ frame_needed = 1, uses_anonymous_args = 0
 1087 0000 80B5     		push	{r7, lr}
 1088              		.cfi_def_cfa_offset 8
 1089              		.cfi_offset 7, -8
 1090              		.cfi_offset 14, -4
 1091 0002 8EB0     		sub	sp, sp, #56
 1092              		.cfi_def_cfa_offset 64
 1093 0004 00AF     		add	r7, sp, #0
 1094              		.cfi_def_cfa_register 7
 1095 0006 F860     		str	r0, [r7, #12]
 1096 0008 B960     		str	r1, [r7, #8]
 1097 000a 7A60     		str	r2, [r7, #4]
 694:../Generated_Code/CLS1.c ****   uint8_t res = ERR_OK;
 1098              		.loc 1 694 0
 1099 000c 0023     		movs	r3, #0
 1100 000e 87F83730 		strb	r3, [r7, #55]
 695:../Generated_Code/CLS1.c ****   bool handled;
 696:../Generated_Code/CLS1.c **** #if CLS1_SILENT_PREFIX_CHAR_ENABLED
 697:../Generated_Code/CLS1.c ****   bool silent = FALSE;
 1101              		.loc 1 697 0
 1102 0012 0023     		movs	r3, #0
 1103 0014 87F83630 		strb	r3, [r7, #54]
 698:../Generated_Code/CLS1.c **** #endif
 699:../Generated_Code/CLS1.c **** #if CLS1_MULTI_CMD_ENABLED
 700:../Generated_Code/CLS1.c ****   uint8_t buf[CLS1_MULTI_CMD_SIZE];
 701:../Generated_Code/CLS1.c ****   uint8_t i;
 702:../Generated_Code/CLS1.c ****   bool parseBuffer, finished;
 703:../Generated_Code/CLS1.c **** #endif
 704:../Generated_Code/CLS1.c **** 
 705:../Generated_Code/CLS1.c ****   if (io==NULL) { /* no I/O handler? */
 1104              		.loc 1 705 0
 1105 0018 BB68     		ldr	r3, [r7, #8]
 1106 001a 002B     		cmp	r3, #0
 1107 001c 01D1     		bne	.L57
 706:../Generated_Code/CLS1.c ****     return ERR_FAILED;
 1108              		.loc 1 706 0
 1109 001e 1B23     		movs	r3, #27
 1110 0020 A2E0     		b	.L71
 1111              	.L57:
 707:../Generated_Code/CLS1.c ****   }
 708:../Generated_Code/CLS1.c ****   if (*cmd=='\0') { /* empty command */
 1112              		.loc 1 708 0
 1113 0022 FB68     		ldr	r3, [r7, #12]
 1114 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1115 0026 002B     		cmp	r3, #0
 1116 0028 01D1     		bne	.L59
 709:../Generated_Code/CLS1.c ****     return ERR_OK;
 1117              		.loc 1 709 0
 1118 002a 0023     		movs	r3, #0
 1119 002c 9CE0     		b	.L71
 1120              	.L59:
 710:../Generated_Code/CLS1.c ****   }
 711:../Generated_Code/CLS1.c **** #if CLS1_MULTI_CMD_ENABLED
 712:../Generated_Code/CLS1.c ****   parseBuffer = FALSE;
 1121              		.loc 1 712 0
 1122 002e 0023     		movs	r3, #0
 1123 0030 87F83430 		strb	r3, [r7, #52]
 713:../Generated_Code/CLS1.c ****   finished = FALSE;
 1124              		.loc 1 713 0
 1125 0034 0023     		movs	r3, #0
 1126 0036 87F83330 		strb	r3, [r7, #51]
 714:../Generated_Code/CLS1.c ****   i = 0;
 1127              		.loc 1 714 0
 1128 003a 0023     		movs	r3, #0
 1129 003c 87F83530 		strb	r3, [r7, #53]
 1130              	.L69:
 715:../Generated_Code/CLS1.c ****   for(;;) { /* breaks */
 716:../Generated_Code/CLS1.c ****     if (i>sizeof(buf)-2) {
 1131              		.loc 1 716 0
 1132 0040 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1133 0044 1E2B     		cmp	r3, #30
 1134 0046 03D9     		bls	.L60
 717:../Generated_Code/CLS1.c ****       res = ERR_FAILED;
 1135              		.loc 1 717 0
 1136 0048 1B23     		movs	r3, #27
 1137 004a 87F83730 		strb	r3, [r7, #55]
 718:../Generated_Code/CLS1.c ****       break; /* buffer overflow */
 1138              		.loc 1 718 0
 1139 004e 82E0     		b	.L61
 1140              	.L60:
 719:../Generated_Code/CLS1.c ****     }
 720:../Generated_Code/CLS1.c ****     buf[i] = *cmd;
 1141              		.loc 1 720 0
 1142 0050 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1143 0054 FA68     		ldr	r2, [r7, #12]
 1144 0056 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1145 0058 07F13801 		add	r1, r7, #56
 1146 005c 0B44     		add	r3, r3, r1
 1147 005e 03F8282C 		strb	r2, [r3, #-40]
 721:../Generated_Code/CLS1.c ****     cmd++; i++;
 1148              		.loc 1 721 0
 1149 0062 FB68     		ldr	r3, [r7, #12]
 1150 0064 0133     		adds	r3, r3, #1
 1151 0066 FB60     		str	r3, [r7, #12]
 1152 0068 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1153 006c 0133     		adds	r3, r3, #1
 1154 006e 87F83530 		strb	r3, [r7, #53]
 722:../Generated_Code/CLS1.c ****   #if CLS1_SILENT_PREFIX_CHAR_ENABLED
 723:../Generated_Code/CLS1.c ****     if (i==1 && buf[0]==CLS1_SILENT_PREFIX_CHAR) { /* first character is silent character */
 1155              		.loc 1 723 0
 1156 0072 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1157 0076 012B     		cmp	r3, #1
 1158 0078 15D1     		bne	.L62
 1159              		.loc 1 723 0 is_stmt 0 discriminator 1
 1160 007a 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 1161 007c 232B     		cmp	r3, #35
 1162 007e 12D1     		bne	.L62
 724:../Generated_Code/CLS1.c ****       silent |= (bool)(buf[0]==CLS1_SILENT_PREFIX_CHAR);
 1163              		.loc 1 724 0 is_stmt 1
 1164 0080 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 1165 0082 232B     		cmp	r3, #35
 1166 0084 14BF     		ite	ne
 1167 0086 0023     		movne	r3, #0
 1168 0088 0123     		moveq	r3, #1
 1169 008a DBB2     		uxtb	r3, r3
 1170 008c DAB2     		uxtb	r2, r3
 1171 008e 97F83630 		ldrb	r3, [r7, #54]	@ zero_extendqisi2
 1172 0092 1343     		orrs	r3, r3, r2
 1173 0094 DBB2     		uxtb	r3, r3
 1174 0096 87F83630 		strb	r3, [r7, #54]
 725:../Generated_Code/CLS1.c ****       buf[0] = *cmd; /* skip silent character */
 1175              		.loc 1 725 0
 1176 009a FB68     		ldr	r3, [r7, #12]
 1177 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1178 009e 3B74     		strb	r3, [r7, #16]
 726:../Generated_Code/CLS1.c ****       cmd++;
 1179              		.loc 1 726 0
 1180 00a0 FB68     		ldr	r3, [r7, #12]
 1181 00a2 0133     		adds	r3, r3, #1
 1182 00a4 FB60     		str	r3, [r7, #12]
 1183              	.L62:
 727:../Generated_Code/CLS1.c ****     }
 728:../Generated_Code/CLS1.c ****   #endif
 729:../Generated_Code/CLS1.c ****     if (buf[i-1] == CLS1_MULTI_CMD_CHAR) { /* found separator */
 1184              		.loc 1 729 0
 1185 00a6 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1186 00aa 013B     		subs	r3, r3, #1
 1187 00ac 07F13802 		add	r2, r7, #56
 1188 00b0 1344     		add	r3, r3, r2
 1189 00b2 13F8283C 		ldrb	r3, [r3, #-40]	@ zero_extendqisi2
 1190 00b6 3B2B     		cmp	r3, #59
 1191 00b8 0CD1     		bne	.L63
 730:../Generated_Code/CLS1.c ****       buf[i-1] = '\0';
 1192              		.loc 1 730 0
 1193 00ba 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1194 00be 013B     		subs	r3, r3, #1
 1195 00c0 07F13801 		add	r1, r7, #56
 1196 00c4 0B44     		add	r3, r3, r1
 1197 00c6 0022     		movs	r2, #0
 1198 00c8 03F8282C 		strb	r2, [r3, #-40]
 731:../Generated_Code/CLS1.c ****       parseBuffer = TRUE;
 1199              		.loc 1 731 0
 1200 00cc 0123     		movs	r3, #1
 1201 00ce 87F83430 		strb	r3, [r7, #52]
 1202 00d2 0FE0     		b	.L64
 1203              	.L63:
 732:../Generated_Code/CLS1.c ****     } else if (buf[i-1]=='\0') {
 1204              		.loc 1 732 0
 1205 00d4 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1206 00d8 013B     		subs	r3, r3, #1
 1207 00da 07F13802 		add	r2, r7, #56
 1208 00de 1344     		add	r3, r3, r2
 1209 00e0 13F8283C 		ldrb	r3, [r3, #-40]	@ zero_extendqisi2
 1210 00e4 002B     		cmp	r3, #0
 1211 00e6 05D1     		bne	.L64
 733:../Generated_Code/CLS1.c ****       parseBuffer = TRUE;
 1212              		.loc 1 733 0
 1213 00e8 0123     		movs	r3, #1
 1214 00ea 87F83430 		strb	r3, [r7, #52]
 734:../Generated_Code/CLS1.c ****       finished = TRUE;
 1215              		.loc 1 734 0
 1216 00ee 0123     		movs	r3, #1
 1217 00f0 87F83330 		strb	r3, [r7, #51]
 1218              	.L64:
 735:../Generated_Code/CLS1.c ****     }
 736:../Generated_Code/CLS1.c ****     if (parseBuffer) {
 1219              		.loc 1 736 0
 1220 00f4 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
 1221 00f8 002B     		cmp	r3, #0
 1222 00fa 26D0     		beq	.L65
 737:../Generated_Code/CLS1.c ****       handled = FALSE;
 1223              		.loc 1 737 0
 1224 00fc 0023     		movs	r3, #0
 1225 00fe 87F83230 		strb	r3, [r7, #50]
 738:../Generated_Code/CLS1.c ****       res = CLS1_IterateTable(buf, &handled, io, parseCallback); /* iterate through all parser func
 1226              		.loc 1 738 0
 1227 0102 07F11002 		add	r2, r7, #16
 1228 0106 07F13203 		add	r3, r7, #50
 1229 010a 1046     		mov	r0, r2
 1230 010c 1946     		mov	r1, r3
 1231 010e BA68     		ldr	r2, [r7, #8]
 1232 0110 7B68     		ldr	r3, [r7, #4]
 1233 0112 FFF7FEFF 		bl	CLS1_IterateTable
 1234 0116 0346     		mov	r3, r0
 1235 0118 87F83730 		strb	r3, [r7, #55]
 739:../Generated_Code/CLS1.c ****       if (!handled || res!=ERR_OK) { /* no handler has handled the command, or error? */
 1236              		.loc 1 739 0
 1237 011c 97F83230 		ldrb	r3, [r7, #50]	@ zero_extendqisi2
 1238 0120 002B     		cmp	r3, #0
 1239 0122 03D0     		beq	.L66
 1240              		.loc 1 739 0 is_stmt 0 discriminator 1
 1241 0124 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1242 0128 002B     		cmp	r3, #0
 1243 012a 08D0     		beq	.L67
 1244              	.L66:
 740:../Generated_Code/CLS1.c ****         CLS1_PrintCommandFailed(buf, io);
 1245              		.loc 1 740 0 is_stmt 1
 1246 012c 07F11003 		add	r3, r7, #16
 1247 0130 1846     		mov	r0, r3
 1248 0132 B968     		ldr	r1, [r7, #8]
 1249 0134 FFF7FEFF 		bl	CLS1_PrintCommandFailed
 741:../Generated_Code/CLS1.c ****         res = ERR_FAILED;
 1250              		.loc 1 741 0
 1251 0138 1B23     		movs	r3, #27
 1252 013a 87F83730 		strb	r3, [r7, #55]
 1253              	.L67:
 742:../Generated_Code/CLS1.c ****       }
 743:../Generated_Code/CLS1.c ****       parseBuffer = FALSE;
 1254              		.loc 1 743 0
 1255 013e 0023     		movs	r3, #0
 1256 0140 87F83430 		strb	r3, [r7, #52]
 744:../Generated_Code/CLS1.c ****       i = 0; /* restart */
 1257              		.loc 1 744 0
 1258 0144 0023     		movs	r3, #0
 1259 0146 87F83530 		strb	r3, [r7, #53]
 1260              	.L65:
 745:../Generated_Code/CLS1.c ****     }
 746:../Generated_Code/CLS1.c ****     if (finished) {
 1261              		.loc 1 746 0
 1262 014a 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 1263 014e 002B     		cmp	r3, #0
 1264 0150 00D0     		beq	.L68
 747:../Generated_Code/CLS1.c ****       break; /* get out of loop */
 1265              		.loc 1 747 0
 1266 0152 00E0     		b	.L61
 1267              	.L68:
 748:../Generated_Code/CLS1.c ****     }
 749:../Generated_Code/CLS1.c ****   } /* for */
 1268              		.loc 1 749 0
 1269 0154 74E7     		b	.L69
 1270              	.L61:
 750:../Generated_Code/CLS1.c **** #else
 751:../Generated_Code/CLS1.c ****   #if CLS1_SILENT_PREFIX_CHAR_ENABLED
 752:../Generated_Code/CLS1.c ****   silent = (bool)(*cmd==CLS1_SILENT_PREFIX_CHAR);
 753:../Generated_Code/CLS1.c ****   if (silent) {
 754:../Generated_Code/CLS1.c ****     cmd++; /* skip silent character */
 755:../Generated_Code/CLS1.c ****   }
 756:../Generated_Code/CLS1.c ****   #endif
 757:../Generated_Code/CLS1.c ****   handled = FALSE;
 758:../Generated_Code/CLS1.c ****   res = CLS1_IterateTable(cmd, &handled, io, parseCallback); /* iterate through all parser function
 759:../Generated_Code/CLS1.c ****   if (!handled || res!=ERR_OK) { /* no handler has handled the command? */
 760:../Generated_Code/CLS1.c ****     CLS1_PrintCommandFailed(cmd, io);
 761:../Generated_Code/CLS1.c ****     res = ERR_FAILED;
 762:../Generated_Code/CLS1.c ****   }
 763:../Generated_Code/CLS1.c **** #endif
 764:../Generated_Code/CLS1.c **** #if CLS1_SILENT_PREFIX_CHAR_ENABLED
 765:../Generated_Code/CLS1.c ****   if (!silent) {
 1271              		.loc 1 765 0
 1272 0156 97F83630 		ldrb	r3, [r7, #54]	@ zero_extendqisi2
 1273 015a 002B     		cmp	r3, #0
 1274 015c 02D1     		bne	.L70
 766:../Generated_Code/CLS1.c ****     CLS1_PrintPrompt(io);
 1275              		.loc 1 766 0
 1276 015e B868     		ldr	r0, [r7, #8]
 1277 0160 FFF7FEFF 		bl	CLS1_PrintPrompt
 1278              	.L70:
 767:../Generated_Code/CLS1.c ****   }
 768:../Generated_Code/CLS1.c **** #else
 769:../Generated_Code/CLS1.c ****   CLS1_PrintPrompt(io);
 770:../Generated_Code/CLS1.c **** #endif
 771:../Generated_Code/CLS1.c ****   return res;
 1279              		.loc 1 771 0
 1280 0164 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1281              	.L71:
 772:../Generated_Code/CLS1.c **** }
 1282              		.loc 1 772 0
 1283 0168 1846     		mov	r0, r3
 1284 016a 3837     		adds	r7, r7, #56
 1285 016c BD46     		mov	sp, r7
 1286              		@ sp needed
 1287 016e 80BD     		pop	{r7, pc}
 1288              		.cfi_endproc
 1289              	.LFE15:
 1291              		.section	.text.CLS1_SetStdio,"ax",%progbits
 1292              		.align	2
 1293              		.global	CLS1_SetStdio
 1294              		.thumb
 1295              		.thumb_func
 1297              	CLS1_SetStdio:
 1298              	.LFB16:
 773:../Generated_Code/CLS1.c **** 
 774:../Generated_Code/CLS1.c **** /*
 775:../Generated_Code/CLS1.c **** ** ===================================================================
 776:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SetStdio (component Shell)
 777:../Generated_Code/CLS1.c **** **     Description :
 778:../Generated_Code/CLS1.c **** **         Sets an StdIO structure which is returned by GetStdio()
 779:../Generated_Code/CLS1.c **** **     Parameters  :
 780:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 781:../Generated_Code/CLS1.c **** **         stdio           - New stdio structure to be used.
 782:../Generated_Code/CLS1.c **** **     Returns     :
 783:../Generated_Code/CLS1.c **** **         ---             - Error code
 784:../Generated_Code/CLS1.c **** ** ===================================================================
 785:../Generated_Code/CLS1.c **** */
 786:../Generated_Code/CLS1.c **** uint8_t CLS1_SetStdio(CLS1_ConstStdIOTypePtr stdio)
 787:../Generated_Code/CLS1.c **** {
 1299              		.loc 1 787 0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 8
 1302              		@ frame_needed = 1, uses_anonymous_args = 0
 1303              		@ link register save eliminated.
 1304 0000 80B4     		push	{r7}
 1305              		.cfi_def_cfa_offset 4
 1306              		.cfi_offset 7, -4
 1307 0002 83B0     		sub	sp, sp, #12
 1308              		.cfi_def_cfa_offset 16
 1309 0004 00AF     		add	r7, sp, #0
 1310              		.cfi_def_cfa_register 7
 1311 0006 7860     		str	r0, [r7, #4]
 788:../Generated_Code/CLS1.c ****   CLS1_currStdIO = stdio;
 1312              		.loc 1 788 0
 1313 0008 044B     		ldr	r3, .L74
 1314 000a 7A68     		ldr	r2, [r7, #4]
 1315 000c 1A60     		str	r2, [r3]
 789:../Generated_Code/CLS1.c ****   return ERR_OK;
 1316              		.loc 1 789 0
 1317 000e 0023     		movs	r3, #0
 790:../Generated_Code/CLS1.c **** }
 1318              		.loc 1 790 0
 1319 0010 1846     		mov	r0, r3
 1320 0012 0C37     		adds	r7, r7, #12
 1321 0014 BD46     		mov	sp, r7
 1322              		@ sp needed
 1323 0016 5DF8047B 		ldr	r7, [sp], #4
 1324 001a 7047     		bx	lr
 1325              	.L75:
 1326              		.align	2
 1327              	.L74:
 1328 001c 00000000 		.word	CLS1_currStdIO
 1329              		.cfi_endproc
 1330              	.LFE16:
 1332              		.section	.text.CLS1_GetStdio,"ax",%progbits
 1333              		.align	2
 1334              		.global	CLS1_GetStdio
 1335              		.thumb
 1336              		.thumb_func
 1338              	CLS1_GetStdio:
 1339              	.LFB17:
 791:../Generated_Code/CLS1.c **** 
 792:../Generated_Code/CLS1.c **** /*
 793:../Generated_Code/CLS1.c **** ** ===================================================================
 794:../Generated_Code/CLS1.c **** **     Method      :  CLS1_GetStdio (component Shell)
 795:../Generated_Code/CLS1.c **** **     Description :
 796:../Generated_Code/CLS1.c **** **         Returns the default stdio channel. This method is only
 797:../Generated_Code/CLS1.c **** **         available if a shell is enabled in the component properties.
 798:../Generated_Code/CLS1.c **** **     Parameters  : None
 799:../Generated_Code/CLS1.c **** **     Returns     :
 800:../Generated_Code/CLS1.c **** **         ---             - Pointer to the stdio descriptor
 801:../Generated_Code/CLS1.c **** ** ===================================================================
 802:../Generated_Code/CLS1.c **** */
 803:../Generated_Code/CLS1.c **** CLS1_ConstStdIOTypePtr CLS1_GetStdio(void)
 804:../Generated_Code/CLS1.c **** {
 1340              		.loc 1 804 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 0
 1343              		@ frame_needed = 1, uses_anonymous_args = 0
 1344              		@ link register save eliminated.
 1345 0000 80B4     		push	{r7}
 1346              		.cfi_def_cfa_offset 4
 1347              		.cfi_offset 7, -4
 1348 0002 00AF     		add	r7, sp, #0
 1349              		.cfi_def_cfa_register 7
 805:../Generated_Code/CLS1.c ****   return CLS1_currStdIO;
 1350              		.loc 1 805 0
 1351 0004 034B     		ldr	r3, .L78
 1352 0006 1B68     		ldr	r3, [r3]
 806:../Generated_Code/CLS1.c **** }
 1353              		.loc 1 806 0
 1354 0008 1846     		mov	r0, r3
 1355 000a BD46     		mov	sp, r7
 1356              		@ sp needed
 1357 000c 5DF8047B 		ldr	r7, [sp], #4
 1358 0010 7047     		bx	lr
 1359              	.L79:
 1360 0012 00BF     		.align	2
 1361              	.L78:
 1362 0014 00000000 		.word	CLS1_currStdIO
 1363              		.cfi_endproc
 1364              	.LFE17:
 1366              		.section	.text.CLS1_ReadAndParseWithCommandTable,"ax",%progbits
 1367              		.align	2
 1368              		.global	CLS1_ReadAndParseWithCommandTable
 1369              		.thumb
 1370              		.thumb_func
 1372              	CLS1_ReadAndParseWithCommandTable:
 1373              	.LFB18:
 807:../Generated_Code/CLS1.c **** 
 808:../Generated_Code/CLS1.c **** /*
 809:../Generated_Code/CLS1.c **** ** ===================================================================
 810:../Generated_Code/CLS1.c **** **     Method      :  CLS1_ReadAndParseWithCommandTable (component Shell)
 811:../Generated_Code/CLS1.c **** **     Description :
 812:../Generated_Code/CLS1.c **** **         Reads characters from the default input channel and appends
 813:../Generated_Code/CLS1.c **** **         it to the buffer. Once a new line has been detected, the
 814:../Generated_Code/CLS1.c **** **         line will be parsed using the handlers in the table.
 815:../Generated_Code/CLS1.c **** **     Parameters  :
 816:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 817:../Generated_Code/CLS1.c **** **       * cmdBuf          - Pointer to buffer provided by the
 818:../Generated_Code/CLS1.c **** **                           caller where to store the command to read
 819:../Generated_Code/CLS1.c **** **                           in. Characters will be appended, so make
 820:../Generated_Code/CLS1.c **** **                           sure string buffer is initialized with a
 821:../Generated_Code/CLS1.c **** **                           zero byte at the beginning.
 822:../Generated_Code/CLS1.c **** **         cmdBufSize      - Size of buffer
 823:../Generated_Code/CLS1.c **** **       * io              - Pointer to I/O channels to be used
 824:../Generated_Code/CLS1.c **** **       * parseCallback   - Pointer to callback
 825:../Generated_Code/CLS1.c **** **                           table provided by the user application to
 826:../Generated_Code/CLS1.c **** **                           parse commands. The table has a NULL
 827:../Generated_Code/CLS1.c **** **                           sentinel.
 828:../Generated_Code/CLS1.c **** **     Returns     :
 829:../Generated_Code/CLS1.c **** **         ---             - Error code
 830:../Generated_Code/CLS1.c **** ** ===================================================================
 831:../Generated_Code/CLS1.c **** */
 832:../Generated_Code/CLS1.c **** uint8_t CLS1_ReadAndParseWithCommandTable(uint8_t *cmdBuf, size_t cmdBufSize, CLS1_ConstStdIOType *
 833:../Generated_Code/CLS1.c **** {
 1374              		.loc 1 833 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 24
 1377              		@ frame_needed = 1, uses_anonymous_args = 0
 1378 0000 80B5     		push	{r7, lr}
 1379              		.cfi_def_cfa_offset 8
 1380              		.cfi_offset 7, -8
 1381              		.cfi_offset 14, -4
 1382 0002 86B0     		sub	sp, sp, #24
 1383              		.cfi_def_cfa_offset 32
 1384 0004 00AF     		add	r7, sp, #0
 1385              		.cfi_def_cfa_register 7
 1386 0006 F860     		str	r0, [r7, #12]
 1387 0008 B960     		str	r1, [r7, #8]
 1388 000a 7A60     		str	r2, [r7, #4]
 1389 000c 3B60     		str	r3, [r7]
 834:../Generated_Code/CLS1.c ****   /* IMPORTANT NOTE: this function *appends* to the buffer, so the buffer needs to be initialized f
 835:../Generated_Code/CLS1.c ****   uint8_t res = ERR_OK;
 1390              		.loc 1 835 0
 1391 000e 0023     		movs	r3, #0
 1392 0010 FB75     		strb	r3, [r7, #23]
 836:../Generated_Code/CLS1.c ****   size_t len;
 837:../Generated_Code/CLS1.c **** 
 838:../Generated_Code/CLS1.c ****   if (io==NULL) { /* no I/O handler? */
 1393              		.loc 1 838 0
 1394 0012 7B68     		ldr	r3, [r7, #4]
 1395 0014 002B     		cmp	r3, #0
 1396 0016 01D1     		bne	.L81
 839:../Generated_Code/CLS1.c ****     return ERR_FAILED;
 1397              		.loc 1 839 0
 1398 0018 1B23     		movs	r3, #27
 1399 001a 58E0     		b	.L82
 1400              	.L81:
 840:../Generated_Code/CLS1.c ****   }
 841:../Generated_Code/CLS1.c ****   len = UTIL1_strlen((const char*)cmdBuf);
 1401              		.loc 1 841 0
 1402 001c F868     		ldr	r0, [r7, #12]
 1403 001e FFF7FEFF 		bl	strlen
 1404 0022 3861     		str	r0, [r7, #16]
 842:../Generated_Code/CLS1.c ****   if (CLS1_ReadLine(cmdBuf, cmdBuf+len, cmdBufSize-len, io)) {
 1405              		.loc 1 842 0
 1406 0024 FA68     		ldr	r2, [r7, #12]
 1407 0026 3B69     		ldr	r3, [r7, #16]
 1408 0028 1A44     		add	r2, r2, r3
 1409 002a B968     		ldr	r1, [r7, #8]
 1410 002c 3B69     		ldr	r3, [r7, #16]
 1411 002e CB1A     		subs	r3, r1, r3
 1412 0030 F868     		ldr	r0, [r7, #12]
 1413 0032 1146     		mov	r1, r2
 1414 0034 1A46     		mov	r2, r3
 1415 0036 7B68     		ldr	r3, [r7, #4]
 1416 0038 FFF7FEFF 		bl	CLS1_ReadLine
 1417 003c 0346     		mov	r3, r0
 1418 003e 002B     		cmp	r3, #0
 1419 0040 44D0     		beq	.L83
 843:../Generated_Code/CLS1.c ****     len = UTIL1_strlen((const char*)cmdBuf); /* length of buffer string */
 1420              		.loc 1 843 0
 1421 0042 F868     		ldr	r0, [r7, #12]
 1422 0044 FFF7FEFF 		bl	strlen
 1423 0048 3861     		str	r0, [r7, #16]
 844:../Generated_Code/CLS1.c ****     if (len==0) { /* error case */
 1424              		.loc 1 844 0
 1425 004a 3B69     		ldr	r3, [r7, #16]
 1426 004c 002B     		cmp	r3, #0
 1427 004e 01D1     		bne	.L84
 845:../Generated_Code/CLS1.c ****       return ERR_FAILED;
 1428              		.loc 1 845 0
 1429 0050 1B23     		movs	r3, #27
 1430 0052 3CE0     		b	.L82
 1431              	.L84:
 846:../Generated_Code/CLS1.c ****     } else if (len==1 && (cmdBuf[0]=='\n' || cmdBuf[0]=='\r')) { /* eat preceding newline character
 1432              		.loc 1 846 0
 1433 0054 3B69     		ldr	r3, [r7, #16]
 1434 0056 012B     		cmp	r3, #1
 1435 0058 0AD1     		bne	.L85
 1436              		.loc 1 846 0 is_stmt 0 discriminator 1
 1437 005a FB68     		ldr	r3, [r7, #12]
 1438 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1439 005e 0A2B     		cmp	r3, #10
 1440 0060 03D0     		beq	.L86
 1441 0062 FB68     		ldr	r3, [r7, #12]
 1442 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1443 0066 0D2B     		cmp	r3, #13
 1444 0068 02D1     		bne	.L85
 1445              	.L86:
 847:../Generated_Code/CLS1.c ****       cmdBuf[0] = '\0';
 1446              		.loc 1 847 0 is_stmt 1
 1447 006a FB68     		ldr	r3, [r7, #12]
 1448 006c 0022     		movs	r2, #0
 1449 006e 1A70     		strb	r2, [r3]
 1450              	.L85:
 848:../Generated_Code/CLS1.c ****     }
 849:../Generated_Code/CLS1.c ****     if (len>=cmdBufSize-1) {           /* buffer overflow? Parse what we have, will be likely retur
 1451              		.loc 1 849 0
 1452 0070 BB68     		ldr	r3, [r7, #8]
 1453 0072 5A1E     		subs	r2, r3, #1
 1454 0074 3B69     		ldr	r3, [r7, #16]
 1455 0076 9A42     		cmp	r2, r3
 1456 0078 0AD8     		bhi	.L87
 850:../Generated_Code/CLS1.c ****       (void)CLS1_ParseWithCommandTable(cmdBuf, io, parseCallback);
 1457              		.loc 1 850 0
 1458 007a F868     		ldr	r0, [r7, #12]
 1459 007c 7968     		ldr	r1, [r7, #4]
 1460 007e 3A68     		ldr	r2, [r7]
 1461 0080 FFF7FEFF 		bl	CLS1_ParseWithCommandTable
 851:../Generated_Code/CLS1.c ****       cmdBuf[0] = '\0'; /* start again */
 1462              		.loc 1 851 0
 1463 0084 FB68     		ldr	r3, [r7, #12]
 1464 0086 0022     		movs	r2, #0
 1465 0088 1A70     		strb	r2, [r3]
 852:../Generated_Code/CLS1.c ****       res = ERR_OVERFLOW;
 1466              		.loc 1 852 0
 1467 008a 0423     		movs	r3, #4
 1468 008c FB75     		strb	r3, [r7, #23]
 1469 008e 1DE0     		b	.L83
 1470              	.L87:
 853:../Generated_Code/CLS1.c ****     } else if (cmdBuf[len-1]=='\n' || cmdBuf[len-1]=='\r') { /* line end: parse command */
 1471              		.loc 1 853 0
 1472 0090 3B69     		ldr	r3, [r7, #16]
 1473 0092 013B     		subs	r3, r3, #1
 1474 0094 FA68     		ldr	r2, [r7, #12]
 1475 0096 1344     		add	r3, r3, r2
 1476 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1477 009a 0A2B     		cmp	r3, #10
 1478 009c 06D0     		beq	.L88
 1479              		.loc 1 853 0 is_stmt 0 discriminator 1
 1480 009e 3B69     		ldr	r3, [r7, #16]
 1481 00a0 013B     		subs	r3, r3, #1
 1482 00a2 FA68     		ldr	r2, [r7, #12]
 1483 00a4 1344     		add	r3, r3, r2
 1484 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1485 00a8 0D2B     		cmp	r3, #13
 1486 00aa 0FD1     		bne	.L83
 1487              	.L88:
 854:../Generated_Code/CLS1.c ****       cmdBuf[len-1] = '\0';            /* remove line end character for parser */
 1488              		.loc 1 854 0 is_stmt 1
 1489 00ac 3B69     		ldr	r3, [r7, #16]
 1490 00ae 013B     		subs	r3, r3, #1
 1491 00b0 FA68     		ldr	r2, [r7, #12]
 1492 00b2 1344     		add	r3, r3, r2
 1493 00b4 0022     		movs	r2, #0
 1494 00b6 1A70     		strb	r2, [r3]
 855:../Generated_Code/CLS1.c ****       res = CLS1_ParseWithCommandTable(cmdBuf, io, parseCallback);
 1495              		.loc 1 855 0
 1496 00b8 F868     		ldr	r0, [r7, #12]
 1497 00ba 7968     		ldr	r1, [r7, #4]
 1498 00bc 3A68     		ldr	r2, [r7]
 1499 00be FFF7FEFF 		bl	CLS1_ParseWithCommandTable
 1500 00c2 0346     		mov	r3, r0
 1501 00c4 FB75     		strb	r3, [r7, #23]
 856:../Generated_Code/CLS1.c ****       cmdBuf[0] = '\0';                /* start again */
 1502              		.loc 1 856 0
 1503 00c6 FB68     		ldr	r3, [r7, #12]
 1504 00c8 0022     		movs	r2, #0
 1505 00ca 1A70     		strb	r2, [r3]
 1506              	.L83:
 857:../Generated_Code/CLS1.c ****     } else {
 858:../Generated_Code/CLS1.c ****       /* continue to append to buffer */
 859:../Generated_Code/CLS1.c ****     }
 860:../Generated_Code/CLS1.c ****   }
 861:../Generated_Code/CLS1.c ****   return res;
 1507              		.loc 1 861 0
 1508 00cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1509              	.L82:
 862:../Generated_Code/CLS1.c **** }
 1510              		.loc 1 862 0
 1511 00ce 1846     		mov	r0, r3
 1512 00d0 1837     		adds	r7, r7, #24
 1513 00d2 BD46     		mov	sp, r7
 1514              		@ sp needed
 1515 00d4 80BD     		pop	{r7, pc}
 1516              		.cfi_endproc
 1517              	.LFE18:
 1519 00d6 00BF     		.section	.text.CLS1_RequestSerial,"ax",%progbits
 1520              		.align	2
 1521              		.global	CLS1_RequestSerial
 1522              		.thumb
 1523              		.thumb_func
 1525              	CLS1_RequestSerial:
 1526              	.LFB19:
 863:../Generated_Code/CLS1.c **** 
 864:../Generated_Code/CLS1.c **** /*
 865:../Generated_Code/CLS1.c **** ** ===================================================================
 866:../Generated_Code/CLS1.c **** **     Method      :  CLS1_RequestSerial (component Shell)
 867:../Generated_Code/CLS1.c **** **     Description :
 868:../Generated_Code/CLS1.c **** **         Used to get mutual access to the shell console. Only has an
 869:../Generated_Code/CLS1.c **** **         effect if using an RTOS with semaphore for the console
 870:../Generated_Code/CLS1.c **** **         access.
 871:../Generated_Code/CLS1.c **** **     Parameters  : None
 872:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 873:../Generated_Code/CLS1.c **** ** ===================================================================
 874:../Generated_Code/CLS1.c **** */
 875:../Generated_Code/CLS1.c **** void CLS1_RequestSerial(void)
 876:../Generated_Code/CLS1.c **** {
 1527              		.loc 1 876 0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 1, uses_anonymous_args = 0
 1531              		@ link register save eliminated.
 1532 0000 80B4     		push	{r7}
 1533              		.cfi_def_cfa_offset 4
 1534              		.cfi_offset 7, -4
 1535 0002 00AF     		add	r7, sp, #0
 1536              		.cfi_def_cfa_register 7
 877:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
 878:../Generated_Code/CLS1.c ****   (void)xSemaphoreTakeRecursive(ShellSem, portMAX_DELAY);
 879:../Generated_Code/CLS1.c **** #endif
 880:../Generated_Code/CLS1.c **** }
 1537              		.loc 1 880 0
 1538 0004 BD46     		mov	sp, r7
 1539              		@ sp needed
 1540 0006 5DF8047B 		ldr	r7, [sp], #4
 1541 000a 7047     		bx	lr
 1542              		.cfi_endproc
 1543              	.LFE19:
 1545              		.section	.text.CLS1_ReleaseSerial,"ax",%progbits
 1546              		.align	2
 1547              		.global	CLS1_ReleaseSerial
 1548              		.thumb
 1549              		.thumb_func
 1551              	CLS1_ReleaseSerial:
 1552              	.LFB20:
 881:../Generated_Code/CLS1.c **** 
 882:../Generated_Code/CLS1.c **** /*
 883:../Generated_Code/CLS1.c **** ** ===================================================================
 884:../Generated_Code/CLS1.c **** **     Method      :  CLS1_ReleaseSerial (component Shell)
 885:../Generated_Code/CLS1.c **** **     Description :
 886:../Generated_Code/CLS1.c **** **         Used to release mutual access to the shell console. Only has
 887:../Generated_Code/CLS1.c **** **         an effect if using an RTOS with semaphore for the console
 888:../Generated_Code/CLS1.c **** **         access.
 889:../Generated_Code/CLS1.c **** **     Parameters  : None
 890:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 891:../Generated_Code/CLS1.c **** ** ===================================================================
 892:../Generated_Code/CLS1.c **** */
 893:../Generated_Code/CLS1.c **** void CLS1_ReleaseSerial(void)
 894:../Generated_Code/CLS1.c **** {
 1553              		.loc 1 894 0
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 0
 1556              		@ frame_needed = 1, uses_anonymous_args = 0
 1557              		@ link register save eliminated.
 1558 0000 80B4     		push	{r7}
 1559              		.cfi_def_cfa_offset 4
 1560              		.cfi_offset 7, -4
 1561 0002 00AF     		add	r7, sp, #0
 1562              		.cfi_def_cfa_register 7
 895:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
 896:../Generated_Code/CLS1.c ****   (void)xSemaphoreGiveRecursive(ShellSem);
 897:../Generated_Code/CLS1.c **** #endif
 898:../Generated_Code/CLS1.c **** }
 1563              		.loc 1 898 0
 1564 0004 BD46     		mov	sp, r7
 1565              		@ sp needed
 1566 0006 5DF8047B 		ldr	r7, [sp], #4
 1567 000a 7047     		bx	lr
 1568              		.cfi_endproc
 1569              	.LFE20:
 1571              		.section	.text.CLS1_GetSemaphore,"ax",%progbits
 1572              		.align	2
 1573              		.global	CLS1_GetSemaphore
 1574              		.thumb
 1575              		.thumb_func
 1577              	CLS1_GetSemaphore:
 1578              	.LFB21:
 899:../Generated_Code/CLS1.c **** 
 900:../Generated_Code/CLS1.c **** /*
 901:../Generated_Code/CLS1.c **** ** ===================================================================
 902:../Generated_Code/CLS1.c **** **     Method      :  CLS1_GetSemaphore (component Shell)
 903:../Generated_Code/CLS1.c **** **     Description :
 904:../Generated_Code/CLS1.c **** **         Return the semaphore of the shell.
 905:../Generated_Code/CLS1.c **** **     Parameters  : None
 906:../Generated_Code/CLS1.c **** **     Returns     :
 907:../Generated_Code/CLS1.c **** **         ---             - semaphore, or NULL if not used or not
 908:../Generated_Code/CLS1.c **** **                           allocated.
 909:../Generated_Code/CLS1.c **** ** ===================================================================
 910:../Generated_Code/CLS1.c **** */
 911:../Generated_Code/CLS1.c **** void* CLS1_GetSemaphore(void)
 912:../Generated_Code/CLS1.c **** {
 1579              		.loc 1 912 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 0
 1582              		@ frame_needed = 1, uses_anonymous_args = 0
 1583              		@ link register save eliminated.
 1584 0000 80B4     		push	{r7}
 1585              		.cfi_def_cfa_offset 4
 1586              		.cfi_offset 7, -4
 1587 0002 00AF     		add	r7, sp, #0
 1588              		.cfi_def_cfa_register 7
 913:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
 914:../Generated_Code/CLS1.c ****   return ShellSem;
 915:../Generated_Code/CLS1.c **** #else
 916:../Generated_Code/CLS1.c ****   return NULL;
 1589              		.loc 1 916 0
 1590 0004 0023     		movs	r3, #0
 917:../Generated_Code/CLS1.c **** #endif
 918:../Generated_Code/CLS1.c **** }
 1591              		.loc 1 918 0
 1592 0006 1846     		mov	r0, r3
 1593 0008 BD46     		mov	sp, r7
 1594              		@ sp needed
 1595 000a 5DF8047B 		ldr	r7, [sp], #4
 1596 000e 7047     		bx	lr
 1597              		.cfi_endproc
 1598              	.LFE21:
 1600              		.section	.text.SendSeparatedStrings,"ax",%progbits
 1601              		.align	2
 1602              		.thumb
 1603              		.thumb_func
 1605              	SendSeparatedStrings:
 1606              	.LFB22:
 919:../Generated_Code/CLS1.c **** 
 920:../Generated_Code/CLS1.c **** /*
 921:../Generated_Code/CLS1.c **** ** ===================================================================
 922:../Generated_Code/CLS1.c **** **     Method      :  SendSeparatedStrings (component Shell)
 923:../Generated_Code/CLS1.c **** **
 924:../Generated_Code/CLS1.c **** **     Description :
 925:../Generated_Code/CLS1.c **** **         Prints a string using an I/O function, formated for the 'help' 
 926:../Generated_Code/CLS1.c **** **         command
 927:../Generated_Code/CLS1.c **** **         This method is internal. It is used by Processor Expert only.
 928:../Generated_Code/CLS1.c **** ** ===================================================================
 929:../Generated_Code/CLS1.c **** */
 930:../Generated_Code/CLS1.c **** static void SendSeparatedStrings(const uint8_t *strA, const uint8_t *strB, uint8_t tabChar, uint8_t
 931:../Generated_Code/CLS1.c **** {
 1607              		.loc 1 931 0
 1608              		.cfi_startproc
 1609              		@ args = 4, pretend = 0, frame = 16
 1610              		@ frame_needed = 1, uses_anonymous_args = 0
 1611 0000 80B5     		push	{r7, lr}
 1612              		.cfi_def_cfa_offset 8
 1613              		.cfi_offset 7, -8
 1614              		.cfi_offset 14, -4
 1615 0002 84B0     		sub	sp, sp, #16
 1616              		.cfi_def_cfa_offset 24
 1617 0004 00AF     		add	r7, sp, #0
 1618              		.cfi_def_cfa_register 7
 1619 0006 F860     		str	r0, [r7, #12]
 1620 0008 B960     		str	r1, [r7, #8]
 1621 000a FA71     		strb	r2, [r7, #7]
 1622 000c BB71     		strb	r3, [r7, #6]
 932:../Generated_Code/CLS1.c ****   /* write command part */
 933:../Generated_Code/CLS1.c ****   if (strA!=NULL) {
 1623              		.loc 1 933 0
 1624 000e FB68     		ldr	r3, [r7, #12]
 1625 0010 002B     		cmp	r3, #0
 1626 0012 11D0     		beq	.L94
 934:../Generated_Code/CLS1.c ****     while(*strA!='\0' && tabPos>0) {
 1627              		.loc 1 934 0
 1628 0014 09E0     		b	.L95
 1629              	.L96:
 935:../Generated_Code/CLS1.c ****       io(*strA++);
 1630              		.loc 1 935 0
 1631 0016 FB68     		ldr	r3, [r7, #12]
 1632 0018 5A1C     		adds	r2, r3, #1
 1633 001a FA60     		str	r2, [r7, #12]
 1634 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1635 001e BB69     		ldr	r3, [r7, #24]
 1636 0020 1046     		mov	r0, r2
 1637 0022 9847     		blx	r3
 936:../Generated_Code/CLS1.c ****       tabPos--;
 1638              		.loc 1 936 0
 1639 0024 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1640 0026 013B     		subs	r3, r3, #1
 1641 0028 BB71     		strb	r3, [r7, #6]
 1642              	.L95:
 934:../Generated_Code/CLS1.c ****     while(*strA!='\0' && tabPos>0) {
 1643              		.loc 1 934 0 discriminator 1
 1644 002a FB68     		ldr	r3, [r7, #12]
 1645 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1646 002e 002B     		cmp	r3, #0
 1647 0030 02D0     		beq	.L94
 934:../Generated_Code/CLS1.c ****     while(*strA!='\0' && tabPos>0) {
 1648              		.loc 1 934 0 is_stmt 0 discriminator 2
 1649 0032 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1650 0034 002B     		cmp	r3, #0
 1651 0036 EED1     		bne	.L96
 1652              	.L94:
 937:../Generated_Code/CLS1.c ****     }
 938:../Generated_Code/CLS1.c ****   }
 939:../Generated_Code/CLS1.c ****   /* fill up until ';' */
 940:../Generated_Code/CLS1.c ****   while(tabPos>0) {
 1653              		.loc 1 940 0 is_stmt 1
 1654 0038 05E0     		b	.L97
 1655              	.L98:
 941:../Generated_Code/CLS1.c ****     io(' ');
 1656              		.loc 1 941 0
 1657 003a BB69     		ldr	r3, [r7, #24]
 1658 003c 2020     		movs	r0, #32
 1659 003e 9847     		blx	r3
 942:../Generated_Code/CLS1.c ****     tabPos--;
 1660              		.loc 1 942 0
 1661 0040 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1662 0042 013B     		subs	r3, r3, #1
 1663 0044 BB71     		strb	r3, [r7, #6]
 1664              	.L97:
 940:../Generated_Code/CLS1.c ****   while(tabPos>0) {
 1665              		.loc 1 940 0 discriminator 1
 1666 0046 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1667 0048 002B     		cmp	r3, #0
 1668 004a F6D1     		bne	.L98
 943:../Generated_Code/CLS1.c ****   }
 944:../Generated_Code/CLS1.c ****   /* write separator */
 945:../Generated_Code/CLS1.c ****   io(tabChar);
 1669              		.loc 1 945 0
 1670 004c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1671 004e BB69     		ldr	r3, [r7, #24]
 1672 0050 1046     		mov	r0, r2
 1673 0052 9847     		blx	r3
 946:../Generated_Code/CLS1.c ****   io(' ');
 1674              		.loc 1 946 0
 1675 0054 BB69     		ldr	r3, [r7, #24]
 1676 0056 2020     		movs	r0, #32
 1677 0058 9847     		blx	r3
 947:../Generated_Code/CLS1.c ****   if (strB!=NULL) {
 1678              		.loc 1 947 0
 1679 005a BB68     		ldr	r3, [r7, #8]
 1680 005c 002B     		cmp	r3, #0
 1681 005e 03D0     		beq	.L93
 948:../Generated_Code/CLS1.c ****     /* write help text */
 949:../Generated_Code/CLS1.c ****     CLS1_SendStr(strB, io);
 1682              		.loc 1 949 0
 1683 0060 B868     		ldr	r0, [r7, #8]
 1684 0062 B969     		ldr	r1, [r7, #24]
 1685 0064 FFF7FEFF 		bl	CLS1_SendStr
 1686              	.L93:
 950:../Generated_Code/CLS1.c ****   }
 951:../Generated_Code/CLS1.c **** }
 1687              		.loc 1 951 0
 1688 0068 1037     		adds	r7, r7, #16
 1689 006a BD46     		mov	sp, r7
 1690              		@ sp needed
 1691 006c 80BD     		pop	{r7, pc}
 1692              		.cfi_endproc
 1693              	.LFE22:
 1695 006e 00BF     		.section	.text.CLS1_SendHelpStr,"ax",%progbits
 1696              		.align	2
 1697              		.global	CLS1_SendHelpStr
 1698              		.thumb
 1699              		.thumb_func
 1701              	CLS1_SendHelpStr:
 1702              	.LFB23:
 952:../Generated_Code/CLS1.c **** 
 953:../Generated_Code/CLS1.c **** /*
 954:../Generated_Code/CLS1.c **** ** ===================================================================
 955:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendHelpStr (component Shell)
 956:../Generated_Code/CLS1.c **** **     Description :
 957:../Generated_Code/CLS1.c **** **         Prints a string using an I/O function, formated for the
 958:../Generated_Code/CLS1.c **** **         'help' command
 959:../Generated_Code/CLS1.c **** **     Parameters  :
 960:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 961:../Generated_Code/CLS1.c **** **       * strCmd          - Pointer to string of the command
 962:../Generated_Code/CLS1.c **** **       * strHelp         - Pointer to help text string
 963:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 964:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 965:../Generated_Code/CLS1.c **** ** ===================================================================
 966:../Generated_Code/CLS1.c **** */
 967:../Generated_Code/CLS1.c **** void CLS1_SendHelpStr(const uint8_t *strCmd, const uint8_t *strHelp, CLS1_StdIO_OutErr_FctType io)
 968:../Generated_Code/CLS1.c **** {
 1703              		.loc 1 968 0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 16
 1706              		@ frame_needed = 1, uses_anonymous_args = 0
 1707 0000 80B5     		push	{r7, lr}
 1708              		.cfi_def_cfa_offset 8
 1709              		.cfi_offset 7, -8
 1710              		.cfi_offset 14, -4
 1711 0002 86B0     		sub	sp, sp, #24
 1712              		.cfi_def_cfa_offset 32
 1713 0004 02AF     		add	r7, sp, #8
 1714              		.cfi_def_cfa 7, 24
 1715 0006 F860     		str	r0, [r7, #12]
 1716 0008 B960     		str	r1, [r7, #8]
 1717 000a 7A60     		str	r2, [r7, #4]
 969:../Generated_Code/CLS1.c ****   #define HELP_SEMICOLON_POS  26 /* position of the ';' after the command string */
 970:../Generated_Code/CLS1.c ****   SendSeparatedStrings(strCmd, strHelp, ';', HELP_SEMICOLON_POS, io);
 1718              		.loc 1 970 0
 1719 000c 7B68     		ldr	r3, [r7, #4]
 1720 000e 0093     		str	r3, [sp]
 1721 0010 F868     		ldr	r0, [r7, #12]
 1722 0012 B968     		ldr	r1, [r7, #8]
 1723 0014 3B22     		movs	r2, #59
 1724 0016 1A23     		movs	r3, #26
 1725 0018 FFF7FEFF 		bl	SendSeparatedStrings
 971:../Generated_Code/CLS1.c **** }
 1726              		.loc 1 971 0
 1727 001c 1037     		adds	r7, r7, #16
 1728 001e BD46     		mov	sp, r7
 1729              		@ sp needed
 1730 0020 80BD     		pop	{r7, pc}
 1731              		.cfi_endproc
 1732              	.LFE23:
 1734 0022 00BF     		.section	.text.CLS1_SendStatusStr,"ax",%progbits
 1735              		.align	2
 1736              		.global	CLS1_SendStatusStr
 1737              		.thumb
 1738              		.thumb_func
 1740              	CLS1_SendStatusStr:
 1741              	.LFB24:
 972:../Generated_Code/CLS1.c **** 
 973:../Generated_Code/CLS1.c **** /*
 974:../Generated_Code/CLS1.c **** ** ===================================================================
 975:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendStatusStr (component Shell)
 976:../Generated_Code/CLS1.c **** **     Description :
 977:../Generated_Code/CLS1.c **** **         Prints a status string using an I/O function, formated for
 978:../Generated_Code/CLS1.c **** **         the 'status' command
 979:../Generated_Code/CLS1.c **** **     Parameters  :
 980:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
 981:../Generated_Code/CLS1.c **** **       * strItem         - Pointer to string of the command
 982:../Generated_Code/CLS1.c **** **       * strStatus       - Pointer to help text string
 983:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
 984:../Generated_Code/CLS1.c **** **     Returns     : Nothing
 985:../Generated_Code/CLS1.c **** ** ===================================================================
 986:../Generated_Code/CLS1.c **** */
 987:../Generated_Code/CLS1.c **** void CLS1_SendStatusStr(const uint8_t *strItem, const uint8_t *strStatus, CLS1_StdIO_OutErr_FctType
 988:../Generated_Code/CLS1.c **** {
 1742              		.loc 1 988 0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 16
 1745              		@ frame_needed = 1, uses_anonymous_args = 0
 1746 0000 80B5     		push	{r7, lr}
 1747              		.cfi_def_cfa_offset 8
 1748              		.cfi_offset 7, -8
 1749              		.cfi_offset 14, -4
 1750 0002 86B0     		sub	sp, sp, #24
 1751              		.cfi_def_cfa_offset 32
 1752 0004 02AF     		add	r7, sp, #8
 1753              		.cfi_def_cfa 7, 24
 1754 0006 F860     		str	r0, [r7, #12]
 1755 0008 B960     		str	r1, [r7, #8]
 1756 000a 7A60     		str	r2, [r7, #4]
 989:../Generated_Code/CLS1.c ****   #define STATUS_COLON_POS  13 /* position of the ':' after the item string */
 990:../Generated_Code/CLS1.c ****   SendSeparatedStrings(strItem, strStatus, ':', STATUS_COLON_POS, io);
 1757              		.loc 1 990 0
 1758 000c 7B68     		ldr	r3, [r7, #4]
 1759 000e 0093     		str	r3, [sp]
 1760 0010 F868     		ldr	r0, [r7, #12]
 1761 0012 B968     		ldr	r1, [r7, #8]
 1762 0014 3A22     		movs	r2, #58
 1763 0016 0D23     		movs	r3, #13
 1764 0018 FFF7FEFF 		bl	SendSeparatedStrings
 991:../Generated_Code/CLS1.c **** }
 1765              		.loc 1 991 0
 1766 001c 1037     		adds	r7, r7, #16
 1767 001e BD46     		mov	sp, r7
 1768              		@ sp needed
 1769 0020 80BD     		pop	{r7, pc}
 1770              		.cfi_endproc
 1771              	.LFE24:
 1773 0022 00BF     		.section	.text.CLS1_ReadChar,"ax",%progbits
 1774              		.align	2
 1775              		.global	CLS1_ReadChar
 1776              		.thumb
 1777              		.thumb_func
 1779              	CLS1_ReadChar:
 1780              	.LFB25:
 992:../Generated_Code/CLS1.c **** 
 993:../Generated_Code/CLS1.c **** /*
 994:../Generated_Code/CLS1.c **** ** ===================================================================
 995:../Generated_Code/CLS1.c **** **     Method      :  CLS1_ReadChar (component Shell)
 996:../Generated_Code/CLS1.c **** **     Description :
 997:../Generated_Code/CLS1.c **** **         Reads a character (blocking)
 998:../Generated_Code/CLS1.c **** **     Parameters  :
 999:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
1000:../Generated_Code/CLS1.c **** **       * c               - Pointer to character to be used to store the
1001:../Generated_Code/CLS1.c **** **                           result
1002:../Generated_Code/CLS1.c **** **     Returns     : Nothing
1003:../Generated_Code/CLS1.c **** ** ===================================================================
1004:../Generated_Code/CLS1.c **** */
1005:../Generated_Code/CLS1.c **** void CLS1_ReadChar(uint8_t *c)
1006:../Generated_Code/CLS1.c **** {
 1781              		.loc 1 1006 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 8
 1784              		@ frame_needed = 1, uses_anonymous_args = 0
 1785              		@ link register save eliminated.
 1786 0000 80B4     		push	{r7}
 1787              		.cfi_def_cfa_offset 4
 1788              		.cfi_offset 7, -4
 1789 0002 83B0     		sub	sp, sp, #12
 1790              		.cfi_def_cfa_offset 16
 1791 0004 00AF     		add	r7, sp, #0
 1792              		.cfi_def_cfa_register 7
 1793 0006 7860     		str	r0, [r7, #4]
1007:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_DEFAULT_SERIAL
1008:../Generated_Code/CLS1.c ****   uint8_t res;
1009:../Generated_Code/CLS1.c **** 
1010:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
1011:../Generated_Code/CLS1.c ****   (void)xSemaphoreTakeRecursive(ShellSem, portMAX_DELAY);
1012:../Generated_Code/CLS1.c **** #endif
1013:../Generated_Code/CLS1.c ****   res = CLS1_CONFIG_DEFAULT_SERIAL_RECEIVE_FCT_NAME((uint8_t*)c);
1014:../Generated_Code/CLS1.c ****   if (res==ERR_RXEMPTY) {
1015:../Generated_Code/CLS1.c ****     /* no character in buffer */
1016:../Generated_Code/CLS1.c ****     *c = '\0';
1017:../Generated_Code/CLS1.c ****   }
1018:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
1019:../Generated_Code/CLS1.c ****   (void)xSemaphoreGiveRecursive(ShellSem);
1020:../Generated_Code/CLS1.c **** #endif
1021:../Generated_Code/CLS1.c **** #else
1022:../Generated_Code/CLS1.c ****   *c = '\0';
 1794              		.loc 1 1022 0
 1795 0008 7B68     		ldr	r3, [r7, #4]
 1796 000a 0022     		movs	r2, #0
 1797 000c 1A70     		strb	r2, [r3]
1023:../Generated_Code/CLS1.c ****   return; /* no serial component set up in properties */
 1798              		.loc 1 1023 0
 1799 000e 00BF     		nop
1024:../Generated_Code/CLS1.c **** #endif
1025:../Generated_Code/CLS1.c **** }
 1800              		.loc 1 1025 0
 1801 0010 0C37     		adds	r7, r7, #12
 1802 0012 BD46     		mov	sp, r7
 1803              		@ sp needed
 1804 0014 5DF8047B 		ldr	r7, [sp], #4
 1805 0018 7047     		bx	lr
 1806              		.cfi_endproc
 1807              	.LFE25:
 1809 001a 00BF     		.section	.text.CLS1_SendChar,"ax",%progbits
 1810              		.align	2
 1811              		.global	CLS1_SendChar
 1812              		.thumb
 1813              		.thumb_func
 1815              	CLS1_SendChar:
 1816              	.LFB26:
1026:../Generated_Code/CLS1.c **** 
1027:../Generated_Code/CLS1.c **** /*
1028:../Generated_Code/CLS1.c **** ** ===================================================================
1029:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendChar (component Shell)
1030:../Generated_Code/CLS1.c **** **     Description :
1031:../Generated_Code/CLS1.c **** **         Sends a character (blocking)
1032:../Generated_Code/CLS1.c **** **     Parameters  :
1033:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
1034:../Generated_Code/CLS1.c **** **         ch              - character to be sent
1035:../Generated_Code/CLS1.c **** **     Returns     : Nothing
1036:../Generated_Code/CLS1.c **** ** ===================================================================
1037:../Generated_Code/CLS1.c **** */
1038:../Generated_Code/CLS1.c **** void CLS1_SendChar(uint8_t ch)
1039:../Generated_Code/CLS1.c **** {
 1817              		.loc 1 1039 0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 8
 1820              		@ frame_needed = 1, uses_anonymous_args = 0
 1821              		@ link register save eliminated.
 1822 0000 80B4     		push	{r7}
 1823              		.cfi_def_cfa_offset 4
 1824              		.cfi_offset 7, -4
 1825 0002 83B0     		sub	sp, sp, #12
 1826              		.cfi_def_cfa_offset 16
 1827 0004 00AF     		add	r7, sp, #0
 1828              		.cfi_def_cfa_register 7
 1829 0006 0346     		mov	r3, r0
 1830 0008 FB71     		strb	r3, [r7, #7]
1040:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_DEFAULT_SERIAL
1041:../Generated_Code/CLS1.c ****   CLS1_SendCharFct(ch, CLS1_CONFIG_DEFAULT_SERIAL_SEND_FCT_NAME);
1042:../Generated_Code/CLS1.c **** #else
1043:../Generated_Code/CLS1.c ****   (void)ch;                            /* avoid compiler warning about unused argument */
1044:../Generated_Code/CLS1.c **** #endif
1045:../Generated_Code/CLS1.c **** }
 1831              		.loc 1 1045 0
 1832 000a 0C37     		adds	r7, r7, #12
 1833 000c BD46     		mov	sp, r7
 1834              		@ sp needed
 1835 000e 5DF8047B 		ldr	r7, [sp], #4
 1836 0012 7047     		bx	lr
 1837              		.cfi_endproc
 1838              	.LFE26:
 1840              		.section	.text.CLS1_KeyPressed,"ax",%progbits
 1841              		.align	2
 1842              		.global	CLS1_KeyPressed
 1843              		.thumb
 1844              		.thumb_func
 1846              	CLS1_KeyPressed:
 1847              	.LFB27:
1046:../Generated_Code/CLS1.c **** 
1047:../Generated_Code/CLS1.c **** /*
1048:../Generated_Code/CLS1.c **** ** ===================================================================
1049:../Generated_Code/CLS1.c **** **     Method      :  CLS1_KeyPressed (component Shell)
1050:../Generated_Code/CLS1.c **** **     Description :
1051:../Generated_Code/CLS1.c **** **         Checks if a key has been pressed (a character is present in
1052:../Generated_Code/CLS1.c **** **         the input buffer)
1053:../Generated_Code/CLS1.c **** **     Parameters  : None
1054:../Generated_Code/CLS1.c **** **     Returns     :
1055:../Generated_Code/CLS1.c **** **         ---             - Error code
1056:../Generated_Code/CLS1.c **** ** ===================================================================
1057:../Generated_Code/CLS1.c **** */
1058:../Generated_Code/CLS1.c **** bool CLS1_KeyPressed(void)
1059:../Generated_Code/CLS1.c **** {
 1848              		.loc 1 1059 0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 0
 1851              		@ frame_needed = 1, uses_anonymous_args = 0
 1852              		@ link register save eliminated.
 1853 0000 80B4     		push	{r7}
 1854              		.cfi_def_cfa_offset 4
 1855              		.cfi_offset 7, -4
 1856 0002 00AF     		add	r7, sp, #0
 1857              		.cfi_def_cfa_register 7
1060:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_DEFAULT_SERIAL
1061:../Generated_Code/CLS1.c ****   bool res;
1062:../Generated_Code/CLS1.c **** 
1063:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
1064:../Generated_Code/CLS1.c ****   (void)xSemaphoreTakeRecursive(ShellSem, portMAX_DELAY);
1065:../Generated_Code/CLS1.c **** #endif
1066:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_DEFAULT_SERIAL
1067:../Generated_Code/CLS1.c ****   res = (bool)((CLS1_CONFIG_DEFAULT_SERIAL_RXAVAIL_FCT_NAME()==0U) ? FALSE : TRUE); /* true if ther
1068:../Generated_Code/CLS1.c **** #endif
1069:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
1070:../Generated_Code/CLS1.c ****   (void)xSemaphoreGiveRecursive(ShellSem);
1071:../Generated_Code/CLS1.c **** #endif
1072:../Generated_Code/CLS1.c ****   return res;
1073:../Generated_Code/CLS1.c **** #else
1074:../Generated_Code/CLS1.c ****   return FALSE; /* no serial component set up in properties */
 1858              		.loc 1 1074 0
 1859 0004 0023     		movs	r3, #0
1075:../Generated_Code/CLS1.c **** #endif
1076:../Generated_Code/CLS1.c **** }
 1860              		.loc 1 1076 0
 1861 0006 1846     		mov	r0, r3
 1862 0008 BD46     		mov	sp, r7
 1863              		@ sp needed
 1864 000a 5DF8047B 		ldr	r7, [sp], #4
 1865 000e 7047     		bx	lr
 1866              		.cfi_endproc
 1867              	.LFE27:
 1869              		.section	.text.CLS1_Init,"ax",%progbits
 1870              		.align	2
 1871              		.global	CLS1_Init
 1872              		.thumb
 1873              		.thumb_func
 1875              	CLS1_Init:
 1876              	.LFB28:
1077:../Generated_Code/CLS1.c **** 
1078:../Generated_Code/CLS1.c **** /*
1079:../Generated_Code/CLS1.c **** ** ===================================================================
1080:../Generated_Code/CLS1.c **** **     Method      :  CLS1_Init (component Shell)
1081:../Generated_Code/CLS1.c **** **     Description :
1082:../Generated_Code/CLS1.c **** **         Initializes the module, especially creates the mutex
1083:../Generated_Code/CLS1.c **** **         semaphore if an RTOS is used.
1084:../Generated_Code/CLS1.c **** **     Parameters  : None
1085:../Generated_Code/CLS1.c **** **     Returns     : Nothing
1086:../Generated_Code/CLS1.c **** ** ===================================================================
1087:../Generated_Code/CLS1.c **** */
1088:../Generated_Code/CLS1.c **** void CLS1_Init(void)
1089:../Generated_Code/CLS1.c **** {
 1877              		.loc 1 1089 0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 0
 1880              		@ frame_needed = 1, uses_anonymous_args = 0
 1881              		@ link register save eliminated.
 1882 0000 80B4     		push	{r7}
 1883              		.cfi_def_cfa_offset 4
 1884              		.cfi_offset 7, -4
 1885 0002 00AF     		add	r7, sp, #0
 1886              		.cfi_def_cfa_register 7
1090:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
1091:../Generated_Code/CLS1.c **** #if configSUPPORT_STATIC_ALLOCATION
1092:../Generated_Code/CLS1.c ****   static StaticSemaphore_t xMutexBuffer;
1093:../Generated_Code/CLS1.c **** #endif
1094:../Generated_Code/CLS1.c ****   bool schedulerStarted;
1095:../Generated_Code/CLS1.c ****   CS1_CriticalVariable();
1096:../Generated_Code/CLS1.c **** 
1097:../Generated_Code/CLS1.c ****   schedulerStarted = (bool)(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED);
1098:../Generated_Code/CLS1.c ****   if (!schedulerStarted) { /* FreeRTOS not started yet. We are called in PE_low_level_init(), and i
1099:../Generated_Code/CLS1.c ****     CS1_EnterCritical();
1100:../Generated_Code/CLS1.c ****   }
1101:../Generated_Code/CLS1.c **** #if configSUPPORT_STATIC_ALLOCATION
1102:../Generated_Code/CLS1.c ****   ShellSem = xSemaphoreCreateRecursiveMutexStatic(&xMutexBuffer);
1103:../Generated_Code/CLS1.c **** #else
1104:../Generated_Code/CLS1.c ****   ShellSem = xSemaphoreCreateRecursiveMutex();
1105:../Generated_Code/CLS1.c **** #endif
1106:../Generated_Code/CLS1.c ****   if (!schedulerStarted) { /* above RTOS call might have enabled interrupts! Make sure we restore t
1107:../Generated_Code/CLS1.c ****     CS1_ExitCritical();
1108:../Generated_Code/CLS1.c ****   }
1109:../Generated_Code/CLS1.c ****   if (ShellSem==NULL) { /* semaphore creation failed */
1110:../Generated_Code/CLS1.c ****     for(;;) {} /* error, not enough memory? */
1111:../Generated_Code/CLS1.c ****   }
1112:../Generated_Code/CLS1.c ****   vQueueAddToRegistry(ShellSem, "CLS1_Sem");
1113:../Generated_Code/CLS1.c **** #endif
1114:../Generated_Code/CLS1.c **** #if CLS1_HISTORY_ENABLED
1115:../Generated_Code/CLS1.c ****   {
1116:../Generated_Code/CLS1.c ****     int i;
1117:../Generated_Code/CLS1.c **** 
1118:../Generated_Code/CLS1.c ****     CLS1_history_index = 0;
1119:../Generated_Code/CLS1.c ****     for(i=0; i<CLS1_NOF_HISTORY;i++) {
1120:../Generated_Code/CLS1.c ****       CLS1_history[i][0] = '\0';
1121:../Generated_Code/CLS1.c ****     }
1122:../Generated_Code/CLS1.c ****   }
1123:../Generated_Code/CLS1.c **** #endif
1124:../Generated_Code/CLS1.c **** #if CLS1_ECHO_ENABLED
1125:../Generated_Code/CLS1.c ****   CLS1_EchoEnabled = TRUE;
1126:../Generated_Code/CLS1.c **** #endif
1127:../Generated_Code/CLS1.c **** }
 1887              		.loc 1 1127 0
 1888 0004 BD46     		mov	sp, r7
 1889              		@ sp needed
 1890 0006 5DF8047B 		ldr	r7, [sp], #4
 1891 000a 7047     		bx	lr
 1892              		.cfi_endproc
 1893              	.LFE28:
 1895              		.section	.text.CLS1_Deinit,"ax",%progbits
 1896              		.align	2
 1897              		.global	CLS1_Deinit
 1898              		.thumb
 1899              		.thumb_func
 1901              	CLS1_Deinit:
 1902              	.LFB29:
1128:../Generated_Code/CLS1.c **** 
1129:../Generated_Code/CLS1.c **** /*
1130:../Generated_Code/CLS1.c **** ** ===================================================================
1131:../Generated_Code/CLS1.c **** **     Method      :  CLS1_Deinit (component Shell)
1132:../Generated_Code/CLS1.c **** **     Description :
1133:../Generated_Code/CLS1.c **** **         De-Initializes the module, especially frees the mutex
1134:../Generated_Code/CLS1.c **** **         semaphore if an RTOS is used.
1135:../Generated_Code/CLS1.c **** **     Parameters  : None
1136:../Generated_Code/CLS1.c **** **     Returns     : Nothing
1137:../Generated_Code/CLS1.c **** ** ===================================================================
1138:../Generated_Code/CLS1.c **** */
1139:../Generated_Code/CLS1.c **** void CLS1_Deinit(void)
1140:../Generated_Code/CLS1.c **** {
 1903              		.loc 1 1140 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 0
 1906              		@ frame_needed = 1, uses_anonymous_args = 0
 1907              		@ link register save eliminated.
 1908 0000 80B4     		push	{r7}
 1909              		.cfi_def_cfa_offset 4
 1910              		.cfi_offset 7, -4
 1911 0002 00AF     		add	r7, sp, #0
 1912              		.cfi_def_cfa_register 7
1141:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
1142:../Generated_Code/CLS1.c ****   vQueueUnregisterQueue(ShellSem);
1143:../Generated_Code/CLS1.c ****   vSemaphoreDelete(ShellSem);
1144:../Generated_Code/CLS1.c ****   ShellSem = NULL;
1145:../Generated_Code/CLS1.c **** #endif
1146:../Generated_Code/CLS1.c **** }
 1913              		.loc 1 1146 0
 1914 0004 BD46     		mov	sp, r7
 1915              		@ sp needed
 1916 0006 5DF8047B 		ldr	r7, [sp], #4
 1917 000a 7047     		bx	lr
 1918              		.cfi_endproc
 1919              	.LFE29:
 1921              		.section	.text.CLS1_SendData,"ax",%progbits
 1922              		.align	2
 1923              		.global	CLS1_SendData
 1924              		.thumb
 1925              		.thumb_func
 1927              	CLS1_SendData:
 1928              	.LFB30:
1147:../Generated_Code/CLS1.c **** 
1148:../Generated_Code/CLS1.c **** /*
1149:../Generated_Code/CLS1.c **** ** ===================================================================
1150:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendData (component Shell)
1151:../Generated_Code/CLS1.c **** **     Description :
1152:../Generated_Code/CLS1.c **** **         Sends data using an I/O function. Unlike SendStr(), with
1153:../Generated_Code/CLS1.c **** **         this method it is possible to send binary data, including
1154:../Generated_Code/CLS1.c **** **         zero bytes.
1155:../Generated_Code/CLS1.c **** **     Parameters  :
1156:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
1157:../Generated_Code/CLS1.c **** **       * data            - Pointer to data to be sent
1158:../Generated_Code/CLS1.c **** **         dataSize        - Number of bytes to be sent.
1159:../Generated_Code/CLS1.c **** **         io              - I/O callbacks to be used for printing.
1160:../Generated_Code/CLS1.c **** **     Returns     : Nothing
1161:../Generated_Code/CLS1.c **** ** ===================================================================
1162:../Generated_Code/CLS1.c **** */
1163:../Generated_Code/CLS1.c **** /*!
1164:../Generated_Code/CLS1.c ****  * \brief Sends data using I/O callbacks
1165:../Generated_Code/CLS1.c ****  * \param[in] data Pointer to data to be sent
1166:../Generated_Code/CLS1.c ****  * \param[in] io I/O function to be used for sending
1167:../Generated_Code/CLS1.c ****  */
1168:../Generated_Code/CLS1.c **** void CLS1_SendData(const uint8_t *data, uint16_t dataSize, CLS1_StdIO_OutErr_FctType io)
1169:../Generated_Code/CLS1.c **** {
 1929              		.loc 1 1169 0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 16
 1932              		@ frame_needed = 1, uses_anonymous_args = 0
 1933 0000 80B5     		push	{r7, lr}
 1934              		.cfi_def_cfa_offset 8
 1935              		.cfi_offset 7, -8
 1936              		.cfi_offset 14, -4
 1937 0002 84B0     		sub	sp, sp, #16
 1938              		.cfi_def_cfa_offset 24
 1939 0004 00AF     		add	r7, sp, #0
 1940              		.cfi_def_cfa_register 7
 1941 0006 F860     		str	r0, [r7, #12]
 1942 0008 0B46     		mov	r3, r1
 1943 000a 7A60     		str	r2, [r7, #4]
 1944 000c 7B81     		strh	r3, [r7, #10]	@ movhi
1170:../Generated_Code/CLS1.c ****   while(dataSize>0) {
 1945              		.loc 1 1170 0
 1946 000e 09E0     		b	.L110
 1947              	.L111:
1171:../Generated_Code/CLS1.c ****     io(*data++);
 1948              		.loc 1 1171 0
 1949 0010 FB68     		ldr	r3, [r7, #12]
 1950 0012 5A1C     		adds	r2, r3, #1
 1951 0014 FA60     		str	r2, [r7, #12]
 1952 0016 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1953 0018 7B68     		ldr	r3, [r7, #4]
 1954 001a 1046     		mov	r0, r2
 1955 001c 9847     		blx	r3
1172:../Generated_Code/CLS1.c ****     dataSize--;
 1956              		.loc 1 1172 0
 1957 001e 7B89     		ldrh	r3, [r7, #10]
 1958 0020 013B     		subs	r3, r3, #1
 1959 0022 7B81     		strh	r3, [r7, #10]	@ movhi
 1960              	.L110:
1170:../Generated_Code/CLS1.c ****   while(dataSize>0) {
 1961              		.loc 1 1170 0 discriminator 1
 1962 0024 7B89     		ldrh	r3, [r7, #10]
 1963 0026 002B     		cmp	r3, #0
 1964 0028 F2D1     		bne	.L111
1173:../Generated_Code/CLS1.c ****   }
1174:../Generated_Code/CLS1.c **** }
 1965              		.loc 1 1174 0
 1966 002a 1037     		adds	r7, r7, #16
 1967 002c BD46     		mov	sp, r7
 1968              		@ sp needed
 1969 002e 80BD     		pop	{r7, pc}
 1970              		.cfi_endproc
 1971              	.LFE30:
 1973              		.section	.text.CLS1_printfPutChar,"ax",%progbits
 1974              		.align	2
 1975              		.global	CLS1_printfPutChar
 1976              		.thumb
 1977              		.thumb_func
 1979              	CLS1_printfPutChar:
 1980              	.LFB31:
1175:../Generated_Code/CLS1.c **** 
1176:../Generated_Code/CLS1.c **** /*
1177:../Generated_Code/CLS1.c **** ** ===================================================================
1178:../Generated_Code/CLS1.c **** **     Method      :  CLS1_printfPutChar (component Shell)
1179:../Generated_Code/CLS1.c **** **
1180:../Generated_Code/CLS1.c **** **     Description :
1181:../Generated_Code/CLS1.c **** **         Helper routine for printf
1182:../Generated_Code/CLS1.c **** **         This method is internal. It is used by Processor Expert only.
1183:../Generated_Code/CLS1.c **** ** ===================================================================
1184:../Generated_Code/CLS1.c **** */
1185:../Generated_Code/CLS1.c **** void CLS1_printfPutChar(void *arg, char c)
1186:../Generated_Code/CLS1.c **** {
 1981              		.loc 1 1186 0
 1982              		.cfi_startproc
 1983              		@ args = 0, pretend = 0, frame = 16
 1984              		@ frame_needed = 1, uses_anonymous_args = 0
 1985 0000 80B5     		push	{r7, lr}
 1986              		.cfi_def_cfa_offset 8
 1987              		.cfi_offset 7, -8
 1988              		.cfi_offset 14, -4
 1989 0002 84B0     		sub	sp, sp, #16
 1990              		.cfi_def_cfa_offset 24
 1991 0004 00AF     		add	r7, sp, #0
 1992              		.cfi_def_cfa_register 7
 1993 0006 7860     		str	r0, [r7, #4]
 1994 0008 0B46     		mov	r3, r1
 1995 000a FB70     		strb	r3, [r7, #3]
1187:../Generated_Code/CLS1.c ****   CLS1_StdIO_OutErr_FctType fct = (CLS1_StdIO_OutErr_FctType)arg;
 1996              		.loc 1 1187 0
 1997 000c 7B68     		ldr	r3, [r7, #4]
 1998 000e FB60     		str	r3, [r7, #12]
1188:../Generated_Code/CLS1.c **** 
1189:../Generated_Code/CLS1.c ****   fct(c); /* print character */
 1999              		.loc 1 1189 0
 2000 0010 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2001 0012 FB68     		ldr	r3, [r7, #12]
 2002 0014 1046     		mov	r0, r2
 2003 0016 9847     		blx	r3
1190:../Generated_Code/CLS1.c **** }
 2004              		.loc 1 1190 0
 2005 0018 1037     		adds	r7, r7, #16
 2006 001a BD46     		mov	sp, r7
 2007              		@ sp needed
 2008 001c 80BD     		pop	{r7, pc}
 2009              		.cfi_endproc
 2010              	.LFE31:
 2012 001e 00BF     		.section	.text.CLS1_printfIO,"ax",%progbits
 2013              		.align	2
 2014              		.global	CLS1_printfIO
 2015              		.thumb
 2016              		.thumb_func
 2018              	CLS1_printfIO:
 2019              	.LFB32:
1191:../Generated_Code/CLS1.c **** 
1192:../Generated_Code/CLS1.c **** /*
1193:../Generated_Code/CLS1.c **** ** ===================================================================
1194:../Generated_Code/CLS1.c **** **     Method      :  CLS1_printfIO (component Shell)
1195:../Generated_Code/CLS1.c **** **     Description :
1196:../Generated_Code/CLS1.c **** **         Printf() style function using XFormat component, using a
1197:../Generated_Code/CLS1.c **** **         custom I/O handler.
1198:../Generated_Code/CLS1.c **** **     Parameters  :
1199:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
1200:../Generated_Code/CLS1.c **** **       * io              - Pointer to 
1201:../Generated_Code/CLS1.c **** **         fmt             - printf style format string
1202:../Generated_Code/CLS1.c **** **     Returns     :
1203:../Generated_Code/CLS1.c **** **         ---             - number of characters written
1204:../Generated_Code/CLS1.c **** ** ===================================================================
1205:../Generated_Code/CLS1.c **** */
1206:../Generated_Code/CLS1.c **** unsigned CLS1_printfIO(CLS1_ConstStdIOType *io, const char *fmt, ...)
1207:../Generated_Code/CLS1.c **** {
 2020              		.loc 1 1207 0
 2021              		.cfi_startproc
 2022              		@ args = 4, pretend = 12, frame = 16
 2023              		@ frame_needed = 1, uses_anonymous_args = 1
 2024 0000 0EB4     		push	{r1, r2, r3}
 2025              		.cfi_def_cfa_offset 12
 2026              		.cfi_offset 1, -12
 2027              		.cfi_offset 2, -8
 2028              		.cfi_offset 3, -4
 2029 0002 80B5     		push	{r7, lr}
 2030              		.cfi_def_cfa_offset 20
 2031              		.cfi_offset 7, -20
 2032              		.cfi_offset 14, -16
 2033 0004 85B0     		sub	sp, sp, #20
 2034              		.cfi_def_cfa_offset 40
 2035 0006 00AF     		add	r7, sp, #0
 2036              		.cfi_def_cfa_register 7
 2037 0008 7860     		str	r0, [r7, #4]
1208:../Generated_Code/CLS1.c ****   va_list args;
1209:../Generated_Code/CLS1.c ****   unsigned int count = 0;
 2038              		.loc 1 1209 0
 2039 000a 0023     		movs	r3, #0
 2040 000c FB60     		str	r3, [r7, #12]
1210:../Generated_Code/CLS1.c **** 
1211:../Generated_Code/CLS1.c ****   va_start(args,fmt);
 2041              		.loc 1 1211 0
 2042 000e 07F12003 		add	r3, r7, #32
 2043 0012 BB60     		str	r3, [r7, #8]
1212:../Generated_Code/CLS1.c ****   count = XF1_xvformat(CLS1_printfPutChar, (void*)io->stdOut, fmt, args);
 2044              		.loc 1 1212 0
 2045 0014 7B68     		ldr	r3, [r7, #4]
 2046 0016 5B68     		ldr	r3, [r3, #4]
 2047 0018 0748     		ldr	r0, .L115
 2048 001a 1946     		mov	r1, r3
 2049 001c FA69     		ldr	r2, [r7, #28]
 2050 001e BB68     		ldr	r3, [r7, #8]
 2051 0020 FFF7FEFF 		bl	XF1_xvformat
 2052 0024 F860     		str	r0, [r7, #12]
1213:../Generated_Code/CLS1.c ****   va_end(args);
1214:../Generated_Code/CLS1.c ****   return count;
 2053              		.loc 1 1214 0
 2054 0026 FB68     		ldr	r3, [r7, #12]
1215:../Generated_Code/CLS1.c **** }
 2055              		.loc 1 1215 0
 2056 0028 1846     		mov	r0, r3
 2057 002a 1437     		adds	r7, r7, #20
 2058 002c BD46     		mov	sp, r7
 2059              		@ sp needed
 2060 002e BDE88040 		pop	{r7, lr}
 2061 0032 03B0     		add	sp, sp, #12
 2062 0034 7047     		bx	lr
 2063              	.L116:
 2064 0036 00BF     		.align	2
 2065              	.L115:
 2066 0038 00000000 		.word	CLS1_printfPutChar
 2067              		.cfi_endproc
 2068              	.LFE32:
 2070              		.section	.text.CLS1_printf,"ax",%progbits
 2071              		.align	2
 2072              		.global	CLS1_printf
 2073              		.thumb
 2074              		.thumb_func
 2076              	CLS1_printf:
 2077              	.LFB33:
1216:../Generated_Code/CLS1.c **** 
1217:../Generated_Code/CLS1.c **** /*
1218:../Generated_Code/CLS1.c **** ** ===================================================================
1219:../Generated_Code/CLS1.c **** **     Method      :  CLS1_printf (component Shell)
1220:../Generated_Code/CLS1.c **** **     Description :
1221:../Generated_Code/CLS1.c **** **         Printf() style function using XFormat component, using the
1222:../Generated_Code/CLS1.c **** **         shell default I/O handler.
1223:../Generated_Code/CLS1.c **** **     Parameters  :
1224:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
1225:../Generated_Code/CLS1.c **** **         fmt             - printf style format string
1226:../Generated_Code/CLS1.c **** **     Returns     :
1227:../Generated_Code/CLS1.c **** **         ---             - number of characters written
1228:../Generated_Code/CLS1.c **** ** ===================================================================
1229:../Generated_Code/CLS1.c **** */
1230:../Generated_Code/CLS1.c **** unsigned CLS1_printf(const char *fmt, ...)
1231:../Generated_Code/CLS1.c **** {
 2078              		.loc 1 1231 0
 2079              		.cfi_startproc
 2080              		@ args = 4, pretend = 16, frame = 8
 2081              		@ frame_needed = 1, uses_anonymous_args = 1
 2082 0000 0FB4     		push	{r0, r1, r2, r3}
 2083              		.cfi_def_cfa_offset 16
 2084              		.cfi_offset 0, -16
 2085              		.cfi_offset 1, -12
 2086              		.cfi_offset 2, -8
 2087              		.cfi_offset 3, -4
 2088 0002 80B5     		push	{r7, lr}
 2089              		.cfi_def_cfa_offset 24
 2090              		.cfi_offset 7, -24
 2091              		.cfi_offset 14, -20
 2092 0004 82B0     		sub	sp, sp, #8
 2093              		.cfi_def_cfa_offset 32
 2094 0006 00AF     		add	r7, sp, #0
 2095              		.cfi_def_cfa_register 7
1232:../Generated_Code/CLS1.c ****   va_list args;
1233:../Generated_Code/CLS1.c ****   unsigned int count = 0;
 2096              		.loc 1 1233 0
 2097 0008 0023     		movs	r3, #0
 2098 000a 7B60     		str	r3, [r7, #4]
1234:../Generated_Code/CLS1.c **** 
1235:../Generated_Code/CLS1.c ****   va_start(args,fmt);
 2099              		.loc 1 1235 0
 2100 000c 07F11403 		add	r3, r7, #20
 2101 0010 3B60     		str	r3, [r7]
1236:../Generated_Code/CLS1.c ****   count = XF1_xvformat(CLS1_printfPutChar, (void*)CLS1_GetStdio()->stdOut, fmt, args);
 2102              		.loc 1 1236 0
 2103 0012 FFF7FEFF 		bl	CLS1_GetStdio
 2104 0016 0346     		mov	r3, r0
 2105 0018 5B68     		ldr	r3, [r3, #4]
 2106 001a 0748     		ldr	r0, .L119
 2107 001c 1946     		mov	r1, r3
 2108 001e 3A69     		ldr	r2, [r7, #16]
 2109 0020 3B68     		ldr	r3, [r7]
 2110 0022 FFF7FEFF 		bl	XF1_xvformat
 2111 0026 7860     		str	r0, [r7, #4]
1237:../Generated_Code/CLS1.c ****   va_end(args);
1238:../Generated_Code/CLS1.c ****   return count;
 2112              		.loc 1 1238 0
 2113 0028 7B68     		ldr	r3, [r7, #4]
1239:../Generated_Code/CLS1.c **** }
 2114              		.loc 1 1239 0
 2115 002a 1846     		mov	r0, r3
 2116 002c 0837     		adds	r7, r7, #8
 2117 002e BD46     		mov	sp, r7
 2118              		@ sp needed
 2119 0030 BDE88040 		pop	{r7, lr}
 2120 0034 04B0     		add	sp, sp, #16
 2121 0036 7047     		bx	lr
 2122              	.L120:
 2123              		.align	2
 2124              	.L119:
 2125 0038 00000000 		.word	CLS1_printfPutChar
 2126              		.cfi_endproc
 2127              	.LFE33:
 2129              		.section	.text.CLS1_SendCharFct,"ax",%progbits
 2130              		.align	2
 2131              		.global	CLS1_SendCharFct
 2132              		.thumb
 2133              		.thumb_func
 2135              	CLS1_SendCharFct:
 2136              	.LFB34:
1240:../Generated_Code/CLS1.c **** 
1241:../Generated_Code/CLS1.c **** /*
1242:../Generated_Code/CLS1.c **** ** ===================================================================
1243:../Generated_Code/CLS1.c **** **     Method      :  CLS1_SendCharFct (component Shell)
1244:../Generated_Code/CLS1.c **** **     Description :
1245:../Generated_Code/CLS1.c **** **         Method to send a character using a standard I/O handle.
1246:../Generated_Code/CLS1.c **** **     Parameters  :
1247:../Generated_Code/CLS1.c **** **         NAME            - DESCRIPTION
1248:../Generated_Code/CLS1.c **** **         ch              - character to be sent
1249:../Generated_Code/CLS1.c **** **       * fct             - Function pointer to output function: takes
1250:../Generated_Code/CLS1.c **** **                           a byte to write and returns error code.
1251:../Generated_Code/CLS1.c **** **     Returns     : Nothing
1252:../Generated_Code/CLS1.c **** ** ===================================================================
1253:../Generated_Code/CLS1.c **** */
1254:../Generated_Code/CLS1.c **** void CLS1_SendCharFct(uint8_t ch, uint8_t (*fct)(uint8_t ch))
1255:../Generated_Code/CLS1.c **** {
 2137              		.loc 1 1255 0
 2138              		.cfi_startproc
 2139              		@ args = 0, pretend = 0, frame = 16
 2140              		@ frame_needed = 1, uses_anonymous_args = 0
 2141 0000 80B5     		push	{r7, lr}
 2142              		.cfi_def_cfa_offset 8
 2143              		.cfi_offset 7, -8
 2144              		.cfi_offset 14, -4
 2145 0002 84B0     		sub	sp, sp, #16
 2146              		.cfi_def_cfa_offset 24
 2147 0004 00AF     		add	r7, sp, #0
 2148              		.cfi_def_cfa_register 7
 2149 0006 0346     		mov	r3, r0
 2150 0008 3960     		str	r1, [r7]
 2151 000a FB71     		strb	r3, [r7, #7]
1256:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_BLOCKING_SEND_ENABLED
1257:../Generated_Code/CLS1.c ****   uint8_t res;
1258:../Generated_Code/CLS1.c **** #endif
1259:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_BLOCKING_SEND_TIMEOUT_WAIT_MS>0
1260:../Generated_Code/CLS1.c ****   int timeoutMs = CLS1_CONFIG_BLOCKING_SEND_TIMEOUT_WAIT_MS;
 2152              		.loc 1 1260 0
 2153 000c 0223     		movs	r3, #2
 2154 000e FB60     		str	r3, [r7, #12]
 2155              	.L125:
1261:../Generated_Code/CLS1.c **** #endif
1262:../Generated_Code/CLS1.c **** 
1263:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
1264:../Generated_Code/CLS1.c ****   (void)xSemaphoreTakeRecursive(ShellSem, portMAX_DELAY);
1265:../Generated_Code/CLS1.c **** #endif
1266:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_BLOCKING_SEND_ENABLED
1267:../Generated_Code/CLS1.c ****   do {
1268:../Generated_Code/CLS1.c ****     res = fct((uint8_t)ch);            /* Send char, returns error code */
 2156              		.loc 1 1268 0
 2157 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2158 0012 3B68     		ldr	r3, [r7]
 2159 0014 1046     		mov	r0, r2
 2160 0016 9847     		blx	r3
 2161 0018 0346     		mov	r3, r0
 2162 001a FB72     		strb	r3, [r7, #11]
1269:../Generated_Code/CLS1.c ****   #if CLS1_CONFIG_BLOCKING_SEND_TIMEOUT_WAIT_MS
1270:../Generated_Code/CLS1.c ****     if (res==ERR_TXFULL) {
 2163              		.loc 1 1270 0
 2164 001c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2165 001e 0B2B     		cmp	r3, #11
 2166 0020 02D1     		bne	.L122
1271:../Generated_Code/CLS1.c ****     #if CLS1_CONFIG_BLOCKING_SEND_RTOS_WAIT
1272:../Generated_Code/CLS1.c ****       WAIT1_WaitOSms(CLS1_CONFIG_BLOCKING_SEND_RTOS_WAIT);
 2167              		.loc 1 1272 0
 2168 0022 0120     		movs	r0, #1
 2169 0024 FFF7FEFF 		bl	WAIT1_Waitms
 2170              	.L122:
1273:../Generated_Code/CLS1.c ****     #else
1274:../Generated_Code/CLS1.c ****       WAIT1_Waitms(CLS1_CONFIG_BLOCKING_SEND_RTOS_WAIT);
1275:../Generated_Code/CLS1.c ****     #endif
1276:../Generated_Code/CLS1.c ****     }
1277:../Generated_Code/CLS1.c ****   #endif
1278:../Generated_Code/CLS1.c ****   #if CLS1_CONFIG_BLOCKING_SEND_TIMEOUT_WAIT_MS>0
1279:../Generated_Code/CLS1.c ****     if(timeoutMs<=0) {
 2171              		.loc 1 1279 0
 2172 0028 FB68     		ldr	r3, [r7, #12]
 2173 002a 002B     		cmp	r3, #0
 2174 002c 00DC     		bgt	.L123
1280:../Generated_Code/CLS1.c ****       break; /* timeout */
 2175              		.loc 1 1280 0
 2176 002e 05E0     		b	.L121
 2177              	.L123:
1281:../Generated_Code/CLS1.c ****     }
1282:../Generated_Code/CLS1.c ****     timeoutMs -= CLS1_CONFIG_BLOCKING_SEND_TIMEOUT_WAIT_MS;
 2178              		.loc 1 1282 0
 2179 0030 FB68     		ldr	r3, [r7, #12]
 2180 0032 023B     		subs	r3, r3, #2
 2181 0034 FB60     		str	r3, [r7, #12]
1283:../Generated_Code/CLS1.c ****   #endif
1284:../Generated_Code/CLS1.c ****   } while(res==ERR_TXFULL);
 2182              		.loc 1 1284 0
 2183 0036 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2184 0038 0B2B     		cmp	r3, #11
 2185 003a E9D0     		beq	.L125
 2186              	.L121:
1285:../Generated_Code/CLS1.c **** #else
1286:../Generated_Code/CLS1.c ****   (void)fct((uint8_t)ch);              /* non blocking send */
1287:../Generated_Code/CLS1.c **** #endif
1288:../Generated_Code/CLS1.c **** #if CLS1_CONFIG_USE_MUTEX
1289:../Generated_Code/CLS1.c ****   (void)xSemaphoreGiveRecursive(ShellSem);
1290:../Generated_Code/CLS1.c **** #endif
1291:../Generated_Code/CLS1.c **** }
 2187              		.loc 1 1291 0
 2188 003c 1037     		adds	r7, r7, #16
 2189 003e BD46     		mov	sp, r7
 2190              		@ sp needed
 2191 0040 80BD     		pop	{r7, pc}
 2192              		.cfi_endproc
 2193              	.LFE34:
 2195 0042 00BF     		.text
 2196              	.Letext0:
 2197              		.file 2 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 2198              		.file 3 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\stdint.h"
 2199              		.file 4 "../Generated_Code/PE_Types.h"
 2200              		.file 5 "../Generated_Code/CLS1.h"
 2201              		.file 6 "c:\\freescale\\kds_v3\\toolchain\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h"
 2202              		.file 7 "c:\\freescale\\kds_v3\\toolchain\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stdarg.h"
 2203              		.file 8 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 CLS1.c
                            *COM*:00000030 CLS1_DefaultShellBuffer
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:22     .bss.CLS1_currStdIO:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:25     .bss.CLS1_currStdIO:00000000 CLS1_currStdIO
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:28     .text.CLS1_SendCh:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:33     .text.CLS1_SendCh:00000000 CLS1_SendCh
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:73     .text.CLS1_SendStr:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:78     .text.CLS1_SendStr:00000000 CLS1_SendStr
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:128    .text.CLS1_SendNum32s:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:133    .text.CLS1_SendNum32s:00000000 CLS1_SendNum32s
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:169    .text.CLS1_SendNum32u:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:174    .text.CLS1_SendNum32u:00000000 CLS1_SendNum32u
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:210    .text.CLS1_SendNum16s:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:215    .text.CLS1_SendNum16s:00000000 CLS1_SendNum16s
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:253    .text.CLS1_SendNum16u:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:258    .text.CLS1_SendNum16u:00000000 CLS1_SendNum16u
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:296    .text.CLS1_SendNum8u:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:301    .text.CLS1_SendNum8u:00000000 CLS1_SendNum8u
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:339    .text.CLS1_SendNum8s:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:344    .text.CLS1_SendNum8s:00000000 CLS1_SendNum8s
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:382    .rodata:00000000 $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:417    .text.CLS1_ParseCommand:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:422    .text.CLS1_ParseCommand:00000000 CLS1_ParseCommand
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1701   .text.CLS1_SendHelpStr:00000000 CLS1_SendHelpStr
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:842    .text.CLS1_PrintStatus:00000000 CLS1_PrintStatus
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:555    .text.CLS1_ParseCommand:000000d8 $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:574    .text.CLS1_PrintPrompt:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:579    .text.CLS1_PrintPrompt:00000000 CLS1_PrintPrompt
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:614    .text.CLS1_PrintPrompt:00000028 $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:620    .text.CLS1_IsHistoryCharacter:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:625    .text.CLS1_IsHistoryCharacter:00000000 CLS1_IsHistoryCharacter
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:661    .text.CLS1_ReadLine:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:666    .text.CLS1_ReadLine:00000000 CLS1_ReadLine
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:837    .text.CLS1_PrintStatus:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1740   .text.CLS1_SendStatusStr:00000000 CLS1_SendStatusStr
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:900    .text.CLS1_PrintStatus:00000054 $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:920    .text.CLS1_PrintCommandFailed:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:925    .text.CLS1_PrintCommandFailed:00000000 CLS1_PrintCommandFailed
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:985    .text.CLS1_PrintCommandFailed:00000058 $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:994    .text.CLS1_IterateTable:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:999    .text.CLS1_IterateTable:00000000 CLS1_IterateTable
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1076   .text.CLS1_ParseWithCommandTable:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1081   .text.CLS1_ParseWithCommandTable:00000000 CLS1_ParseWithCommandTable
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1292   .text.CLS1_SetStdio:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1297   .text.CLS1_SetStdio:00000000 CLS1_SetStdio
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1328   .text.CLS1_SetStdio:0000001c $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1333   .text.CLS1_GetStdio:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1338   .text.CLS1_GetStdio:00000000 CLS1_GetStdio
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1362   .text.CLS1_GetStdio:00000014 $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1367   .text.CLS1_ReadAndParseWithCommandTable:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1372   .text.CLS1_ReadAndParseWithCommandTable:00000000 CLS1_ReadAndParseWithCommandTable
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1520   .text.CLS1_RequestSerial:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1525   .text.CLS1_RequestSerial:00000000 CLS1_RequestSerial
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1546   .text.CLS1_ReleaseSerial:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1551   .text.CLS1_ReleaseSerial:00000000 CLS1_ReleaseSerial
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1572   .text.CLS1_GetSemaphore:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1577   .text.CLS1_GetSemaphore:00000000 CLS1_GetSemaphore
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1601   .text.SendSeparatedStrings:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1605   .text.SendSeparatedStrings:00000000 SendSeparatedStrings
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1696   .text.CLS1_SendHelpStr:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1735   .text.CLS1_SendStatusStr:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1774   .text.CLS1_ReadChar:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1779   .text.CLS1_ReadChar:00000000 CLS1_ReadChar
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1810   .text.CLS1_SendChar:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1815   .text.CLS1_SendChar:00000000 CLS1_SendChar
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1841   .text.CLS1_KeyPressed:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1846   .text.CLS1_KeyPressed:00000000 CLS1_KeyPressed
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1870   .text.CLS1_Init:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1875   .text.CLS1_Init:00000000 CLS1_Init
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1896   .text.CLS1_Deinit:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1901   .text.CLS1_Deinit:00000000 CLS1_Deinit
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1922   .text.CLS1_SendData:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1927   .text.CLS1_SendData:00000000 CLS1_SendData
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1974   .text.CLS1_printfPutChar:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:1979   .text.CLS1_printfPutChar:00000000 CLS1_printfPutChar
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:2013   .text.CLS1_printfIO:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:2018   .text.CLS1_printfIO:00000000 CLS1_printfIO
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:2066   .text.CLS1_printfIO:00000038 $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:2071   .text.CLS1_printf:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:2076   .text.CLS1_printf:00000000 CLS1_printf
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:2125   .text.CLS1_printf:00000038 $d
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:2130   .text.CLS1_SendCharFct:00000000 $t
C:\Users\Aron\AppData\Local\Temp\ccjKWgxH.s:2135   .text.CLS1_SendCharFct:00000000 CLS1_SendCharFct
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.22dcf9ce9babd46e5ea858ea4400d115
                           .group:00000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.ctype.h.33.ccab01b863dab31a9d31c60d42dd191a
                           .group:00000000 wm4.MCUC1config.h.9.0bb8fec22d828f19e34a4cdf9951d555
                           .group:00000000 wm4._default_types.h.6.9e4229723f5523536bc8f574589d6a99
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.PE_Types.h.68.de7a315b6e4c635a9a7a45ae6ec20b08
                           .group:00000000 wm4.PE_Error.h.60.6ccf96637e85421388d147a5dcbc3621
                           .group:00000000 wm4.PE_Const.h.60.44eca2ca2a72148441f11b3e43b344a9
                           .group:00000000 wm4.MK22F12.h.59.83dcc0895f45d7d67f2182a38aa7f04f
                           .group:00000000 wm4.Cpu.h.66.9574a96471c5a4e92ddf5418cbdcf9a5
                           .group:00000000 wm4.CLS1config.h.2.854bb35357facad932898800d8509913
                           .group:00000000 wm4.CLS1.h.122.6dfe00e3ccac8c27c20e405bc6b8e609
                           .group:00000000 wm4.WAIT1config.h.9.10dc563fdcbcf1b71ae6cd3c0d22fd32
                           .group:00000000 wm4.WAIT1.h.93.af9b975f9a6d5eb80ff72ca188861d18
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.56.a2d04de9d47039852021e66fca39bb58
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.UTIL1.h.779.3f4da336bf693064cf78522cb140d5f7
                           .group:00000000 wm4.XF1config.h.2.019525ef4bf64d9e3cd792a651ed2fc0
                           .group:00000000 wm4.stdarg.h.31.72c3aa8d68b291953fa52b9471bcdff7
                           .group:00000000 wm4.CS1config.h.2.e5153cf58e5fe0ee6ea0dc776d94aafd
                           .group:00000000 wm4.CS1.h.86.71773cc9f7a1189b60d5af00334fca8e
                           .group:00000000 wm4.CLS1.h.172.83b9daee286b58c7d453522f7dba0b4f

UNDEFINED SYMBOLS
UTIL1_Num32sToStr
UTIL1_Num32uToStr
UTIL1_Num16sToStr
UTIL1_Num16uToStr
UTIL1_Num8uToStr
UTIL1_Num8sToStr
strcmp
strlen
XF1_xvformat
WAIT1_Waitms
